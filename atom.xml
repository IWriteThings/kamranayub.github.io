<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Kamranicus]]></title>
  <link href="http://kamranicus.com/atom.xml" rel="self"/>
  <link href="http://kamranicus.com/"/>
  <updated>2017-01-11T02:48:54+00:00</updated>
  <id>http://kamranicus.com/</id>
  <author>
    <name><![CDATA[Kamran]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Site Down Alerts Using Azure App Insights and Zapier]]></title>
    <link href="http://kamranicus.com/blog/2017/01/11/azure-alerts-zapier-sms/"/>
    <updated>2017-01-11T02:01:00+00:00</updated>
    <id>http://kamranicus.com/blog/2017/01/11/azure-alerts-zapier-sms</id>
    <content type="html"><![CDATA[<p>It&rsquo;s <a href="https://twitter.com/jordan_belinsky/status/818967360132513792">happened again</a>. Even though I <em>do</em> get emailed whenever <a href="http://ktomg.com">KTOMG</a> goes down, I don&rsquo;t pay attention to my email 24/7 and the site can be down for a bit until I realize it. In this case, I was cooking and wasn&rsquo;t at my computer or on my phone. The Twitter notification by a friendly user actually got me to check!</p>

<p>I know this is one of the headaches <a href="https://kamranicus.com/blog/2016/10/18/ravendb-standard-non-commercial-license/">I willingly signed up for</a> by moving to my own VM&mdash;and even though I get emailed when the site&rsquo;s down I hate not knowing that <strong>immediately</strong>.</p>

<!-- More -->


<h2>App Insights</h2>

<p>The first thing you should do is get an <a href="https://docs.microsoft.com/en-us/azure/application-insights/app-insights-overview">Azure App Insights account</a>. <strong>It&rsquo;s free.</strong> And you can even use it to <a href="https://docs.microsoft.com/en-us/azure/application-insights/app-insights-monitor-performance-live-website-now">monitor your own VMs</a>! This is how I can still get this for KTOMG:</p>

<p><img src="https://cloud.githubusercontent.com/assets/563819/21832425/afa2d62e-d770-11e6-864a-ef6dd5dc13c9.png" alt="Server Metrics" /></p>

<p>It&rsquo;s awesome.</p>

<p>The other thing it can do is handle availability (ping) tests. It&rsquo;s <a href="https://docs.microsoft.com/en-us/azure/application-insights/app-insights-monitor-web-app-availability">very easy to set up</a> and then you can set an alert for it. I&rsquo;ve done this already, where I&rsquo;ve set it to email me whenever KTOMG is down at more than 3 locations over 3 minutes&mdash;in other words, my site has blown up.</p>

<h2>Using a Webhook with Zapier</h2>

<p>I also use <a href="http://zapier.com">Zapier</a>, which is just a (fancier?) <a href="http://ifttt.com">IFTTT</a> clone. When I had deployed via Azure, I had <a href="https://zapier.com/zapbook/windows-azure-web-sites/">set up a Zap to notify me</a> whenever my Azure sites were deployed. Since I&rsquo;m on my own now, I disabled that but now I&rsquo;ll show you how to use it to notify you via SMS and webhooks.</p>

<ol>
<li><a href="http://zapier.com">Sign up for an account</a></li>
<li>Create a new Zap</li>
<li>Select &ldquo;Webhook by Zapier&rdquo; as the trigger</li>
<li>Go through the steps until you get a new webhook URL</li>
</ol>


<p><img src="https://cloud.githubusercontent.com/assets/563819/21832880/e0233246-d773-11e6-8b83-f974fe706ccd.png" alt="Webhook url" /></p>

<p>Now you&rsquo;ve got a webhook URL which is just an HTTP endpoint you can POST to.</p>

<p>In Azure App Insights, you&rsquo;ll want to paste this URL into your alert &ldquo;Webhook&rdquo; setting:</p>

<p><img src="https://cloud.githubusercontent.com/assets/563819/21832621/fe82c604-d771-11e6-839c-df997b44b942.png" alt="Webhook settings" /></p>

<p>Zapier will be asking you to test your hook. It&rsquo;s a bit hard to trigger an Azure alert, but all you really need to do is POST a JSON payload at the endpoint, so <a href="https://docs.microsoft.com/en-us/azure/monitoring-and-diagnostics/insights-webhooks-alerts">going off this Azure guide</a>, use something like <code>curl</code> or Postman to POST to the endpoint:</p>

<p><img src="https://cloud.githubusercontent.com/assets/563819/21832689/7baa2492-d772-11e6-9b9b-d6be7161fc01.png" alt="Testing the hook" /></p>

<p>Now that the hook is tested, Zapier has filled in a bunch of template fields for you, pretty cool! On the left side of the Zap, click the (+) icon and add a Filter:</p>

<p><img src="https://cloud.githubusercontent.com/assets/563819/21832706/9f6736c2-d772-11e6-8437-bad812a60201.png" alt="Add Zapier filter" /></p>

<p>We want to only send the Zap if the alert has been &ldquo;Activated&rdquo; (not if it gets Resolved). Chances are, you only care that the alert occurred and after that you can check your email/fix the issue to resolve it.</p>

<p><img src="https://cloud.githubusercontent.com/assets/563819/21832731/c9a53d94-d772-11e6-899a-a52a1efea106.png" alt="Filter for Activated" /></p>

<p>Now, add an Action to send an SMS (or really, do whatever you want&mdash;I just want a text message).</p>

<p><img src="https://cloud.githubusercontent.com/assets/563819/21832757/ffe84ea0-d772-11e6-8dc5-9fc4eadd2023.png" alt="SMS action" /></p>

<p>You can use the template fields if you want, but this webhook is customized for our alert so I don&rsquo;t really need any info from the alert. If you were sending <em>multiple</em> alerts to this single hook, you could use the fields of the JSON payload to customize the message here.</p>

<p>I am setting a &ldquo;From number&rdquo; because I can use an app like <a href="https://play.google.com/store/apps/details?id=de.hoernchen.android.firealert2&amp;hl=en">FireAlarm2</a> to read my SMS and page me loudly (even if my phone is on vibrate).</p>

<p>That&rsquo;s it! You can test the Zap and it&rsquo;ll send you an SMS to verify you can receive messages. Now you&rsquo;ll always know when your site&rsquo;s down so you don&rsquo;t need to rely on your users.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[2016: A Year in Review]]></title>
    <link href="http://kamranicus.com/blog/2017/01/03/year-in-review/"/>
    <updated>2017-01-03T00:32:00+00:00</updated>
    <id>http://kamranicus.com/blog/2017/01/03/year-in-review</id>
    <content type="html"><![CDATA[<p>Another year has passed and it&rsquo;s time to take a look back and see what I accomplished!</p>

<h2>Open Source</h2>

<p>It&rsquo;s been a busy year in open source for me with over 1100+ contributions, let&rsquo;s see&hellip;</p>

<p><img src="https://cloud.githubusercontent.com/assets/563819/21598070/22a0d308-d11b-11e6-8c8a-2eeef49ae568.png" alt="2016 contributions" /></p>

<ul>
<li><a href="https://github.com/excaliburjs/Excalibur"><strong>excalibur.js</strong></a>: Excalibur remains one of the largest OSS projects I help maintain. I redesigned the <a href="http://excaliburjs.com">Excalibur.js website</a>. I made
about <a href="https://github.com/excaliburjs/Excalibur/pulls?page=2&amp;q=is%3Apr+is%3Aclosed+author%3Akamranayub">49 pull requests</a>
to the codebase. We made 4 releases, bringing us from 0.6 to 0.8 (over 177 issues closed!).</li>
<li><a href="https://github.com/TypeStrong/typedoc"><strong>TypeDoc</strong></a>: This was a close one, last month I <a href="https://github.com/TypeStrong/typedoc/pull/365">submitted a PR</a> to support TypeScript 2.1.4.</li>
<li><a href="https://github.com/DefinitelyTyped/DefinitelyTyped/"><strong>DefinitelyTyped</strong></a>: Made <a href="https://github.com/DefinitelyTyped/DefinitelyTyped/pull/13169">my first PR</a> to DefinitelyTyped even though I&rsquo;ve made tons of private declaration files for my projects.</li>
<li><a href="https://github.com/kamranayub/UnderscoreKO"><strong>UnderscoreKO</strong></a>: Updated for Underscore 1.8</li>
<li><a href="https://github.com/kamranayub/posh-openweathermap"><strong>PoshOpenWeatherMap</strong></a>: I made a fun little weather Powershell module.</li>
<li><a href="https://github.com/kamranayub/cassette-sri"><strong>cassette-sri</strong></a>: I needed <a href="https://developer.mozilla.org/en-US/docs/Web/Security/Subresource_Integrity">Subresource Integrity</a> support for KTOMG, so I published an extension to Cassette.</li>
</ul>


<h2>New Tech</h2>

<p>I definitely enjoy learning new things and playing with tech.</p>

<ul>
<li>Played with <a href="http://kamranicus.com/blog/2016/02/24/azure-key-vault-config-encryption-azure/">Azure Key Vault</a></li>
<li>Dabbled in some <a href="https://github.com/eonarheim/aspnet-core-demogame">ASP.NET Core</a></li>
<li>At work I dove deep into Powershell DSC and JFrog Artifactory</li>
<li>I set up equipment for my course recording: <a href="https://www.amazon.com/gp/product/B008O517IC">Behringer XENYX Q802USB Mixer</a>, <a href="https://www.amazon.com/Audio-Technica-ATR2100-USB-Cardioid-Dynamic-Microphone/dp/B004QJOZS4">ATR2100 Microphone</a></li>
<li>I got a Raspberry Pi 3 for Christmas and made it into an emulation console using <a href="http://lakka.tv">Lakka</a></li>
</ul>


<h2>Gaming</h2>

<p>Making and playing games remains one of my passions, that much is clear:</p>

<ul>
<li><a href="http://ktomg.com"><strong>Keep Track of My Games</strong></a>: I <a href="http://blog.keeptrackofmygames.com/tagged/updates">released 10 updates</a> to KTOMG last year, some of the biggest ones so far, adding tons of major new features.</li>
<li>I <a href="http://kamranicus.com/blog/2016/05/08/ludum-dare-35-game-jam/">participated</a> in the Ludum Dare 35 game jam with the game <a href="http://excaliburjs.com/ludum-35/">Hex Shaper</a>.</li>
<li>Me and <a href="http://erikonarheim.com">Erik Onarheim</a> made a <a href="http://kamranicus.com/blog/2016/07/31/aspnet-core-demo-game/">ASP.NET Core demo game</a> for a work code camp</li>
<li>We also made a <a href="http://kamranicus.com/blog/2016/01/25/planet-wars-ai-competition-excaliburjs-csharp/">Planet Wars AI simulator</a> in Excalibur for a work competition</li>
<li>I&rsquo;ve been working on a (currently private) sample game for Excalibur, it will be used as a the primary learning sample for new users.</li>
<li>I <a href="https://keeptrackofmygames.com/users/kamranicus/lists/Playing">played some games</a></li>
</ul>


<h2>Speaking &amp; Conferences</h2>

<p>I gave some talks and went to conferences! I spread the TypeScript love.</p>

<ul>
<li><a href="http://midwestjs.com/"><strong>Midwest.js</strong></a>: I gave a presentation on <a href="http://kamranicus.com/presentations/demystifying-typescript/#/">Demystifying TypeScript</a> at Midwest.js in August this year. It was a lot of fun,
but the recording still isn&rsquo;t up on YouTube yet.</li>
<li><a href="http://twincitiescodecamp.com"><strong>TCCC20</strong></a>: I gave a presentation on <a href="https://www.youtube.com/watch?v=eeh-FcC6Sew">TypeScript in Action</a> at Twin Cities Code Camp 20 in April.</li>
<li><a href="http://build.microsoft.com"><strong>MS Build</strong></a>: I <a href="http://kamranicus.com/blog/2016/03/11/attending-build-2016/">attended</a> Microsoft Build 2016 with my coworkers. It was a blast.</li>
</ul>


<h2>Publishing</h2>

<p>I want to try and commit to beating 2016&rsquo;s blog post count:</p>

<ul>
<li>I <a href="http://kamranicus.com/blog/archives/">published 16 blog posts</a> in 2016.</li>
<li>I <a href="http://kamranicus.com/blog/2016/10/30/new-packt-publishing-typescript-course/">accepted a contract</a> to make an Introduction to TypeScript video course with Packt Publishing.</li>
</ul>


<h2>Life</h2>

<ul>
<li>My wife and I are expecting our first child in February! I&rsquo;m sure this will definitely affect how much time I get to spend on side projects so developing some kind of rhythm will be key.</li>
</ul>


<p>I&rsquo;m sure there&rsquo;s other stuff I&rsquo;m forgetting&mdash;but I&rsquo;m super proud of all the stuff I got done this year. Here&rsquo;s looking forward
to 2017 as a new father!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Working With Packt Publishing to Create a TypeScript Video Course]]></title>
    <link href="http://kamranicus.com/blog/2016/10/30/new-packt-publishing-typescript-course/"/>
    <updated>2016-10-30T15:45:00+00:00</updated>
    <id>http://kamranicus.com/blog/2016/10/30/new-packt-publishing-typescript-course</id>
    <content type="html"><![CDATA[<p><img src="https://cloud.githubusercontent.com/assets/563819/19837411/1ccc4910-9e87-11e6-8d0a-7d5b17711785.png" alt="Packt" /></p>

<p>I have some great news to share! Last week I signed on the dotted line to publish a TypeScript course for <a href="http://packtpub.com">Packt Publishing</a>. I&rsquo;m very excited for this opportunity&mdash;as you know, I&rsquo;m a big fan of TypeScript and <a href="http://kamranicus.com/presentations">I talk about it a lot</a>. This is the first video course I&rsquo;ll have worked on though I&rsquo;m no stranger to screencasts. I&rsquo;m pretty pumped and I think I have some good material to share.</p>

<p>I hope to share more about the recording process as I dive into it&mdash;the first order of business is rigging up all the recording equipment that is sitting in my basement collecting dust and testing it. I already have a recording mic, shock mount, and preamp, for example. They are years old now so I may need to get some new equipment but I&rsquo;m crossing my fingers that most of it will produce a good sound. My Sound Blaster X-Fi Elite Pro that I bought years ago is only half-working&mdash;it seems like it&rsquo;ll output sound for a bit and then crap out, but I&rsquo;m hoping that is only limited to output and that it can still record input. The X-Fi external box supports some of the standard audio plugs I&rsquo;d prefer using. It may end up I&rsquo;ll have to go entirely USB, we&rsquo;ll see.</p>

<p>The course should be ready by mid-February and will be geared towards introducing people to TypeScript. I plan to use practical code to introduce concepts and the final volume of the course should have 2-3 small projects we&rsquo;ll build from scratch.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Thoughts on Upgrading to a Dedicated Raven Standard Instance]]></title>
    <link href="http://kamranicus.com/blog/2016/10/18/ravendb-standard-non-commercial-license/"/>
    <updated>2016-10-18T00:11:00+00:00</updated>
    <id>http://kamranicus.com/blog/2016/10/18/ravendb-standard-non-commercial-license</id>
    <content type="html"><![CDATA[<p>As you may know, I use the NoSQL RavenDB database to power my hobby project <a href="http://ktomg.com">Keep Track of My Games</a>. I really like the development workflow and the way it has simplified a lot of my data access logic. Right now I use the hosted <a href="http://ravenhq.com">RavenHQ</a> solution for my two databases (staging and production). I&rsquo;ve been doing that for some time now for a few reasons:</p>

<ul>
<li>The regular yearly Standard RavenDB subscription of $700 is a bit much for a hobby project</li>
<li>I realized too late you could pay quarterly/one-time. One-time licenses only grant upgrades for 18 months and since major version upgrades seem to happen beyond that window, it is hard to justify even the one-time payment long term.</li>
<li>The Basic/Basic 2X pricing would have been perfect except the 2GB database size limit was a dealbreaker. Additionally, I&rsquo;d still need to add that monthy cost to the monthly cost of a VM.</li>
<li>When I started with HQ the price was low enough to warrant the latency. Now though, the $10/1GB overage is getting to me especially with the two replicated instances BOTH incurring the $10/1GB extra each.</li>
</ul>


<h2>The Cloud is Expensive and Slow [for Me]</h2>

<p>This last week though, I decided to see if I could figure out how to lower my database hosting costs and the number one way to do that was to get a Standard license and manage my own VM.</p>

<p>The hard truth is that PaaS offers awesome managed services and convenience but you pay (out the nose) for that convenience and often performance comes at a high cost so you&rsquo;re stuck with the smallest possible pricing tier otherwise your costs double and triple easily. When you want to save money, you need to go IaaS but even the major cloud platforms like Azure, AWS, and Google aren&rsquo;t super affordable for a hobby project <em>when you want performance</em>. Anything above 1 core on most cloud platforms is a minimum of about $100. You can&rsquo;t really expect to run Raven on a single core, 1GB machine&mdash;you need <em>some</em> metal.</p>

<h2>I Can Do It Myself</h2>

<p>Enter <a href="http://vultr.com">Vultr.com</a>. Have a look at <a href="https://www.vultr.com/pricing/">their pricing</a> for a second and then come back&hellip;</p>

<p>&hellip;</p>

<p>Back? <strong>I KNOW, RIGHT?!</strong></p>

<p>I discovered Vultr from reading <a href="https://weblog.west-wind.com/posts/2015/Feb/01/Azure-VM-Blues-Fighting-a-losing-Performance-Battle">Rick Strahl&rsquo;s woes on Azure VM performance</a> (see a pattern?) and he switched to Vultr VMs and was a happy camper. I have a 2 Core, 2GB VM spun up right now and I&rsquo;m not even hosting my site/DB yet but it still feels way faster than an Azure VM.</p>

<p>If I could find a way to get a Standard Raven license I could move all my stuff over to much cheaper infrastructure and get 2-3x the performance for less price. Yes, I may sacrifice some high availability and it will be more management overhead but managing web sites is what I do and I know how to monitor them plus even if I got a $36 2 Core 2GB web instance AND a $56 4 Core 4GB DB instance it would <strong>still be cheaper than my current hosting cost that has way less performance.</strong> Not to mention I could migrate over to .NET Core-based site and host on an even cheaper Linux VM. Raven 4 will also be able to run on Linux. That is some nice cost cutting!</p>

<h2>The Magic Non-Commercial License</h2>

<p>So I had to pony up $1000 for a Standard license if I wanted to pay it forward and reduce my long-term hosting cost. It&rsquo;s hard enough to justify this to myself let alone to my wife! Yes, I&rsquo;ve paid more than that overall so far but that&rsquo;s a sunk cost&mdash;it&rsquo;s tough to pay a lump sum like that all at once. I was willing to swallow that pill after a month or two of saving up.</p>

<p>But, I wondered if there was <strong>some other way</strong>. I kept thinking that I&rsquo;m not making money from KTOMG, I wish that would count as an OSS license.</p>

<p>So I went back to the RavenDB pricing page. At the bottom it says &ldquo;Open Source? Apply&rdquo;. This is great&mdash;I love it when awesome products like Resharper, RavenDB, and others are free for OSS projects. The issue is that KTOMG is <em>not</em> an OSS project. It&rsquo;s non-commercial, but it&rsquo;s not OSS. So obviously I initially ignored the offer years ago to apply for an OSS license.</p>

<p>I decided to Google more about RavenDB licensing&mdash;OSS projects can use it under AGPL but everyone else needs a commercial license, right? Well, yes&hellip; but:</p>

<blockquote><p><strong>NC:</strong>
Blah I hate OSS, I don&rsquo;t understand all this stuff. I mean if i create a community site thats not designed to make money other than advertising to cover server costs. I don&rsquo;t want to make my site open source to use OSS, does that mean I have to pay for a commercial license?</p>

<p><strong>Ayende:</strong>
Yes.
<strong>Or, for your scenario, you could contact us and ask for a freebie license in return for something like a &ldquo;Powered by RavenDB&rdquo; logo.</strong></p></blockquote>

<p>This was <a href="https://ayende.com/blog/4508/comments-on-ravendb-licensing">in the comments</a> on Ayende&rsquo;s blog post on RavenDB licensing.</p>

<h2>Whaaaaat?!</h2>

<p>It turns out that if you ask nicely and have a truly non-commercial project, you may qualify for a &ldquo;freebie&rdquo; license in exchange for some free press or a watermark (I filled out a testimonial and shared my thoughts with the team). I wish I knew that 3 years ago! I would have done that from the beginning had I known it was a possibility&mdash;and I bet more people out there like me didn&rsquo;t know it was a possibility. How could they? The pricing page doesn&rsquo;t mention this at all. It could be that they <em>don&rsquo;t</em> want to advertise it as more people would ask&mdash;but I think that&rsquo;s a good thing.</p>

<p>It&rsquo;s true that RavenHQ was able to extract money out of me for awhile and that benefited them&mdash;but it wasn&rsquo;t going to sustain itself. My options were to: a) fork out for a Standard license in which I pay once or b) explore other options like <a href="http://jasperfx.github.io/marten/">Marten for PostgreSQL</a>. There may be reasons people would move to Postgres and all that but I <em>am</em> comfortable with Raven and what it gives me so I&rsquo;m not exactly looking to migrate all my data access code (again) to another provider. That isn&rsquo;t value-added work to me, I want to focus on releasing features!</p>

<p>I think that the more folks that use Raven, the more word will spread around. If people are <em>not</em> using Raven because they think they have to pay $700/yr out-of-pocket for a non-commercial project, they could be attracted back if they knew they were still able to harness the power of Raven with a free non-commercial license. Perhaps not everyone will want to manage their own VM but people like me working on fun projects that want a robust NoSQL database for .NET would jump at the chance.</p>

<p>If anyone at Hibernating Rhino&rsquo;s is reading this, consider adding the non-commercial license as an &ldquo;official&rdquo; available license like OSS. It might be good for business!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Extending PowerShell Pester With Custom Assertions]]></title>
    <link href="http://kamranicus.com/blog/2016/08/17/posh-pester-extend-custom-assertions/"/>
    <updated>2016-08-17T02:10:00+00:00</updated>
    <id>http://kamranicus.com/blog/2016/08/17/posh-pester-extend-custom-assertions</id>
    <content type="html"><![CDATA[<p>After the initial release of <a href="http://kamranicus.com/blog/2016/08/12/posh-openweathermap-powershell-module/">my OpenWeatherMap PowerShell module</a> I decided it might be a good idea to write some tests. This was my first time using <a href="https://github.com/pester/Pester">Pester</a>, a BDD-style testing framework for PowerShell. Coming from <a href="http://jasmine.github.io/">Jasmine</a> Javascript unit testing, I felt right at home.</p>

<!-- More -->


<p>Now because my module deals a lot with dates, I wanted to use an assertion that simplified some of the logic of testing a date. For example, this is what it looks like validating a DateTime:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='powershell'><span class='line'><span class="nv">$Result</span><span class="p">.</span><span class="n">Time</span><span class="p">.</span><span class="n">Year</span>   <span class="p">|</span> <span class="n">Should</span> <span class="n">Be</span> <span class="n">2015</span>
</span><span class='line'><span class="nv">$Result</span><span class="p">.</span><span class="n">Time</span><span class="p">.</span><span class="n">Month</span>  <span class="p">|</span> <span class="n">Should</span> <span class="n">Be</span> <span class="n">8</span>
</span><span class='line'><span class="nv">$Result</span><span class="p">.</span><span class="n">Time</span><span class="p">.</span><span class="n">Day</span>    <span class="p">|</span> <span class="n">Should</span> <span class="n">Be</span> <span class="n">15</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$Result</span><span class="p">.</span><span class="n">Time</span><span class="p">.</span><span class="n">Hour</span>   <span class="p">|</span> <span class="n">Should</span> <span class="n">Be</span> <span class="n">13</span>
</span><span class='line'><span class="nv">$Result</span><span class="p">.</span><span class="n">Time</span><span class="p">.</span><span class="n">Minute</span> <span class="p">|</span> <span class="n">Should</span> <span class="n">Be</span> <span class="n">56</span>
</span><span class='line'><span class="nv">$Result</span><span class="p">.</span><span class="n">Time</span><span class="p">.</span><span class="n">Second</span> <span class="p">|</span> <span class="n">Should</span> <span class="n">Be</span> <span class="n">32</span>
</span></code></pre></td></tr></table></div></figure>


<p>The other way would be to compare formatted date strings:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='powershell'><span class='line'><span class="nv">$Result</span><span class="p">.</span><span class="n">Time</span><span class="p">.</span><span class="n">ToString</span><span class="p">(</span><span class="s2">&quot;MM/dd/yyyy HH:mm:ss&quot;</span><span class="p">)</span> <span class="p">|</span> <span class="n">Should</span> <span class="n">Be</span> <span class="s2">&quot;08/15/2015 13:56:32&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Which is fine. However, using it as a learning opportunity, I wanted to write my own assertion for Pester, <code>BeDate</code> so I could do:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='powershell'><span class='line'><span class="nv">$Result</span><span class="p">.</span><span class="n">Time</span> <span class="p">|</span> <span class="n">Should</span> <span class="n">BeDate</span> <span class="s2">&quot;08/15/2015 13:56:32&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>In C# using NUnit or MSTest, writing custom assertions is pretty straightforward. However, Pester essentially uses a convention where it loads up commands in its module starting with <code>Pester</code> and also having a couple failure message handlers.</p>

<p>So, for example, our <code>BeDate</code> assertion is defined as:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='powershell'><span class='line'><span class="k">Function</span> <span class="n">PesterBeDate</span><span class="p">(</span><span class="nv">$Value</span><span class="p">,</span> <span class="nv">$Expected</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nv">$Expected</span> <span class="p">=</span> <span class="no">[System.DateTime]</span><span class="err">::</span><span class="n">Parse</span><span class="p">(</span><span class="nv">$Expected</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="nv">$Value</span><span class="p">.</span><span class="n">Year</span>   <span class="p">|</span> <span class="n">Should</span> <span class="n">Be</span> <span class="nv">$Expected</span><span class="p">.</span><span class="n">Year</span>
</span><span class='line'>    <span class="nv">$Value</span><span class="p">.</span><span class="n">Month</span>  <span class="p">|</span> <span class="n">Should</span> <span class="n">Be</span> <span class="nv">$Expected</span><span class="p">.</span><span class="n">Month</span>
</span><span class='line'>    <span class="nv">$Value</span><span class="p">.</span><span class="n">Day</span>    <span class="p">|</span> <span class="n">Should</span> <span class="n">Be</span> <span class="nv">$Expected</span><span class="p">.</span><span class="n">Day</span>
</span><span class='line'>
</span><span class='line'>    <span class="nv">$Value</span><span class="p">.</span><span class="n">Hour</span>   <span class="p">|</span> <span class="n">Should</span> <span class="n">Be</span> <span class="nv">$Expected</span><span class="p">.</span><span class="n">Hour</span>
</span><span class='line'>    <span class="nv">$Value</span><span class="p">.</span><span class="n">Minute</span> <span class="p">|</span> <span class="n">Should</span> <span class="n">Be</span> <span class="nv">$Expected</span><span class="p">.</span><span class="n">Minute</span>
</span><span class='line'>    <span class="nv">$Value</span><span class="p">.</span><span class="n">Second</span> <span class="p">|</span> <span class="n">Should</span> <span class="n">Be</span> <span class="nv">$Expected</span><span class="p">.</span><span class="n">Second</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">Function</span> <span class="n">PesterBeDateFailureMessage</span><span class="p">(</span><span class="nv">$Value</span><span class="p">,</span> <span class="nv">$Expected</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="o">-not</span> <span class="p">((</span><span class="nv">$expected</span> <span class="o">-is</span> <span class="no">[string]</span><span class="p">)</span> <span class="o">-and</span> <span class="p">(</span><span class="nv">$value</span> <span class="o">-is</span> <span class="no">[System.DateTime]</span><span class="p">)))</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="s2">&quot;Expected: {$expected}`nBut was:  {$value}&quot;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="s2">&quot;Expected: $Expected\nBut was: </span><span class="si">$(</span><span class="err">$</span><span class="si">Value.ToString(&#39;MM/dd/YYYY h:mm:ss&#39;)</span><span class="s2">)&quot;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">Function</span> <span class="n">NotPesterBeDateFailureMessage</span><span class="p">(</span><span class="nv">$Value</span><span class="p">,</span> <span class="nv">$Expected</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">PesterBeDateFailureMessage</span> <span class="n">-Value</span> <span class="nv">$Value</span> <span class="n">-Expected</span> <span class="nv">$Expected</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now, I don&rsquo;t actually think my <code>PesterBeDateFailureMessage</code> cmdlet ever runs because I&rsquo;m using the basic <code>Be</code> assertion but whatever&mdash;this is the convention.</p>

<p>So, how we do we get Pester to see these functions? Well, like I said, it searches for the assertions <strong>in the scope of the module</strong>. That means if I define these in my own file, it won&rsquo;t see them.</p>

<h2>Defining functions inside a module&rsquo;s scope</h2>

<p>We can use a weird PowerShell &ldquo;hack&rdquo; to actually declare these functions <em>inside the scope of the Pester module</em> if we want.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='powershell'><span class='line'><span class="nv">$pesterModule</span> <span class="p">=</span> <span class="nb">Import-Module</span> <span class="n">Pester</span> <span class="n">-PassThru</span>
</span><span class='line'>
</span><span class='line'><span class="p">.</span> <span class="nv">$pesterModule</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">function</span> <span class="n">PesterBeDate</span> <span class="p">{</span> <span class="p">}</span>
</span><span class='line'>    <span class="c"># etc</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>This is what Dave Wyatt suggested <a href="https://github.com/pester/Pester/issues/590#issuecomment-239977094">when I asked about it</a>. Cool, we <strong>could</strong> do that but I would prefer if we could keep my custom assertions separated from my tests since I&rsquo;d have to include this in my <strong>.Tests.ps1</strong> files.</p>

<h2>Using local modules and extending Pester</h2>

<p>The  implication the previous solution has is that the caller (user) has Pester installed globally. Over the years, as a programming community we decided that&rsquo;s a sub-optimal outlook on life hence we have package managers like Nuget and NPM. To my knowledge, there&rsquo;s not yet a <code>package.json</code> equivalent to a PowerShell &ldquo;project&rdquo; besides the Module Manifest (psd1). Ideally, I would be able to type <code>Install-Module</code> in the current directory, PowerShellGet would identify the dependencies (perhaps from psd1 manifest?), and download them. Alas, it doesn&rsquo;t so we can do it ourselves.</p>

<p>To achieve maximum contributability (is that a word?) I decided to roll my own little build script that would bring down the Pester module locally to the project and then extend Pester&rsquo;s assertions by manually copying in my own code.</p>

<p>This only takes a few lines of Powershell:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='powershell'><span class='line'><span class="nv">$PesterVersion</span> <span class="p">=</span> <span class="s1">&#39;3.4.2&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Save-module locally</span>
</span><span class='line'><span class="n">Save-Module</span> <span class="n">-Name</span> <span class="n">Pester</span> <span class="n">-Path</span> <span class="s1">&#39;.modules\&#39;</span> <span class="n">-RequiredVersion</span> <span class="nv">$PesterVersion</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Copy custom assertions</span>
</span><span class='line'><span class="nb">Copy-Item</span> <span class="n">-Path</span> <span class="s1">&#39;.\Assertions\*.ps1&#39;</span> <span class="n">-Destination</span> <span class="s2">&quot;.\.modules\Pester\$PesterVersion\Functions\Assertions&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Import local Pester module so we can extend built-in assertions</span>
</span><span class='line'><span class="nb">Import-Module</span> <span class="s2">&quot;.\.modules\Pester\$PesterVersion\Pester.psd1&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Run tests</span>
</span><span class='line'><span class="nb">Invoke-Pester</span> <span class="n">-Script</span> <span class="s2">&quot;.\OpenWeatherMap.Tests.ps1&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>So this is fairly straightforward:</p>

<ol>
<li>Use <code>Save-Module</code> cmdlet to unzip and copy the Pester module locally to a <strong>.modules</strong> folder that we&rsquo;ll exclude from source control</li>
<li>Copy my <code>*.ps1</code> assertion files under <em>*Assertions*</em> to the local Pester assertions directory</li>
<li>Import the local Pester module explicitly (this will load our new assertions)</li>
<li>Invoke Pester on our test script (if you don&rsquo;t qualify it, it will run all the tests in the Pester module also!)</li>
</ol>


<p>Now we achieve both desired effects:</p>

<ol>
<li>Our repository is now self-contained and can be contributed to without any global dependencies (besides PowerShell 5)</li>
<li>We can keep our custom assertions separated</li>
</ol>


<p>If you want to see the final product, <a href="https://github.com/kamranayub/posh-openweathermap">give my OpenWeatherMap module a gander</a>!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[OpenWeatherMap PowerShell Module]]></title>
    <link href="http://kamranicus.com/blog/2016/08/12/posh-openweathermap-powershell-module/"/>
    <updated>2016-08-12T00:15:00+00:00</updated>
    <id>http://kamranicus.com/blog/2016/08/12/posh-openweathermap-powershell-module</id>
    <content type="html"><![CDATA[<p>There&rsquo;s no better to way to learn something new than to make a thing. Yesterday I had a strong desire to know what the weather was like from my command prompt. I can&rsquo;t explain it&mdash;I just had to and I thought, &ldquo;Hey, it can&rsquo;t be that bad, right?&rdquo; I decided to try writing and releasing an open-source PowerShell module.</p>

<!-- More -->


<p>It turned out to be very easy, in fact. There&rsquo;s an awesome project called <a href="http://openweathermap.org">OpenWeatherMap</a> where you can sign up for a free API key and go to town on their open data API&mdash;limited to 60 calls a minute which isn&rsquo;t a problem for my pet project.</p>

<p>So, what happens when you combine PowerShell and an open weather API? Weather in your command prompt!</p>

<p><img src="https://cloud.githubusercontent.com/assets/563819/17608181/4a908116-5ff0-11e6-8bb2-396c8f5a998e.png" alt="Weather" /></p>

<p>I&rsquo;ve <a href="https://github.com/kamranayub/posh-openweathermap/">released the module on GitHub</a> and the <a href="http://www.powershellgallery.com/packages/OpenWeatherMap/">PowerShell Gallery</a> for your enjoyment. I&rsquo;ve already added weather symbols (Unicode is cool) and I&rsquo;m adding friendly forecasting next.</p>

<p>You can set up your PowerShell profile to get the weather each time you boot your prompt, <a href="https://github.com/kamranayub/posh-openweathermap/blob/master/profile.example.ps1">following the example on GitHub</a>.</p>

<p>This also sets up an alias for <code>weather</code> so you can ad-hoc get the weather too:</p>

<p><img src="https://cloud.githubusercontent.com/assets/563819/17608247/ba82117e-5ff0-11e6-92c3-b06e7216feb3.png" alt="weather command" /></p>

<p>I plan to add the ability to get a quick forecast, so you can know what to plan for the next morning before you get into work! There&rsquo;s probably more neat stuff we can do with coloring the weather conditions but maybe you want to open a PR then?</p>

<p>One interesting thing I noticed was that the Windows Command Prompt (and PowerShell) does not support some Unicode characters. For example, you can probably see this:</p>

<pre><code>⛱
</code></pre>

<p>But if you try pasting that into command prompt you&rsquo;ll see:</p>

<p><img src="https://cloud.githubusercontent.com/assets/563819/17608313/4e4c8b3c-5ff1-11e6-9300-200bc4604a39.png" alt="no symbols" /></p>

<p>So that was a little disappointing&mdash;it meant I had to stick to the Unicode symbols that worked in the prompt, which is still a good amount but not as a granular as it could potentially be.</p>

<p>I am not sure why Windows doesn&rsquo;t support those characters but maybe in a future Windows 10 update they&rsquo;ll add support!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Demystifying TypeScript at Midwest.js]]></title>
    <link href="http://kamranicus.com/blog/2016/08/12/midwestjs-demystifying-typescript/"/>
    <updated>2016-08-12T00:09:00+00:00</updated>
    <id>http://kamranicus.com/blog/2016/08/12/midwestjs-demystifying-typescript</id>
    <content type="html"><![CDATA[<p>Today I was excited to give a talk at <a href="http://midwestjs.com">Midwest.js</a> about <a href="http://kamranicus.com/presentations/demystifying-typescript">Demystifying TypeScript</a>. This is not the first time I&rsquo;ve given the talk, it&rsquo;s actually the <strong>fourth</strong> time. Instead of leaving it stale I revamped the theme and updated all the information to be current as of today&mdash;including information about <a href="https://babeljs.io/">Babel.js</a> and <a href="https://flowtype.org/">Flow</a>.</p>

<p>Unfortunately due to technical difficulties (no HDMI-to-DisplayPort adapter!) the talk&rsquo;s <em>video</em> wasn&rsquo;t recorded. However, I was mic&rsquo;d and I did use SnagIt to record my screen, so we&rsquo;re hoping we can merge the audio and video tracks to generate a recording. If not, I may need to sit down and record audio for the talk.</p>

<p>I will update this post after the conference and let you know the status&mdash;let&rsquo;s hope we can get it working! Otherwise, I guess you just had to be there ;)</p>

<p>If you attended and have questions, feel free to leave them here or <a href="http://twitter.com/kamranayub">tweet</a> at me!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ASP.NET Core Sample Demo Game]]></title>
    <link href="http://kamranicus.com/blog/2016/07/31/aspnet-core-demo-game/"/>
    <updated>2016-07-31T18:05:00+00:00</updated>
    <id>http://kamranicus.com/blog/2016/07/31/aspnet-core-demo-game</id>
    <content type="html"><![CDATA[<p>At General Mills we do semi-annual code camps where the developer organization gets together for a half-day of talks and fun. This past code camp myself and my partner in crime, <a href="http://twitter.com/erikonarheim">Erik Onarheim</a> gave a talk around ASP.NET Core. It&rsquo;s part of our roadmap to be familiar with hosting ASP.NET Core so we wanted to build something and showcase to developers what&rsquo;s changed in Core vs. the typical Framework application.</p>

<p>We made a trivial demo game built on top of SignalR and .NET Core while also showing off other new features of the stack, including:</p>

<ul>
<li>Depdendency Injection</li>
<li>Custom Tag Helpers</li>
<li>Cascading Configuration</li>
<li>Multi-Environment Support</li>
<li>Strongly-Typed Options</li>
<li>Injecting Services into Views</li>
<li>Injected MVC Filters</li>
<li>Bundling &amp; Minification</li>
<li>Publishing to Azure</li>
</ul>


<p>We had the demo running on Azure during the talk so people could join the game and we even attempted showing Linux support, though web sockets were not behaving nicely behind nginx. The game is not really a game but more of a showcase of using web sockets to allow some real-time multiplayer server action. It is definitely <em>not</em> how you&rsquo;d implement a &ldquo;real&rdquo; multiplayer game but it&rsquo;s a fun demo.</p>

<p>You can check out the source code on GitHub: <a href="https://github.com/eonarheim/aspnet-core-demogame">https://github.com/eonarheim/aspnet-core-demogame</a>. It&rsquo;s commented pretty heavily to help understand the different parts, it&rsquo;s based on the default out-of-the-box web template (<code>dotnet new -t web</code>).</p>

<p>We may or may not upload the talk onto YouTube since there wasn&rsquo;t really anything specific about our work until the very end, which we can strip out without losing any important bits.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Adding Subresource Integrity Support to Cassette .NET]]></title>
    <link href="http://kamranicus.com/blog/2016/05/08/cassette-subresource-integrity-sri/"/>
    <updated>2016-05-08T05:13:00+00:00</updated>
    <id>http://kamranicus.com/blog/2016/05/08/cassette-subresource-integrity-sri</id>
    <content type="html"><![CDATA[<p>If you aren&rsquo;t familiar with <a href="https://developer.mozilla.org/en-US/docs/Web/Security/Subresource_Integrity">Subresource Integrity</a>, it&rsquo;s a browser-based security measure to protect embedded content like scripts and stylesheets using a file content hash to help protect against XSS attacks.</p>

<p>For example, let&rsquo;s say you&rsquo;re including a script from a CDN:</p>

<pre><code>&lt;script src="https://mycdn.com/jquery/1.0/jquery.js"&gt;&lt;/script&gt;
</code></pre>

<p>Then let&rsquo;s say the CDN is compromised and instead of returning jquery, the script returns some malicious code that could compromise your site. Even if you&rsquo;re using Content Security Policy (CSP), you won&rsquo;t be protected because you whitelisted the CDN.</p>

<p>Subresource Integrity allows you to put a hash of the file&rsquo;s contents in an attribute of the tag. The browser will then hash the contents of the response from the CDN and compare it against the attribute provided. If the hashes don&rsquo;t match, the browser won&rsquo;t include the response and will throw an error.</p>

<pre><code>&lt;script src="https://mycdn.com/jquery/1.0/jquery.js" integrity="sha256-hfhsh02929fhgh303yg"&gt;&lt;/script&gt;
</code></pre>

<h2>Integrating with Cassette</h2>

<p>I use <a href="http://getcassette.net">Cassette</a> to perform my bundling/minification and I also <a href="http://kamranicus.com/blog/2015/10/10/azure-cdn-cassette/">host my assets on a CDN</a>. Even though they are my own assets, I still want to ensure they are served securely and take advantage of SRI.</p>

<p>For third-party scripts, it is fairly easy to take advantage of SRI by <a href="https://srihash.org/">hashing the contents online</a> and customizing the CDN reference in Cassette:</p>

<pre><code>bundles.AddUrl("http://mycdn.com/jquery/1.0/jquery.js", bundle =&gt;
    bundle.HtmlAttributes.Add("integrity", "sha256-jquerysfilehash"));
</code></pre>

<p>But since my <em>own</em> files are dynamic, how can we still leverage Cassette <em>and</em> automatically hash the file contents when outputting to the page?</p>

<p>Luckily, Cassette is pretty extensible and includes a way to <a href="http://getcassette.net/documentation/v2/bundle-pipelines">customize the bundle pipeline</a>. So what we can do is essentially override the rendering of the HTML and add the <code>integrity</code> tag to the output.</p>

<p>To make this easy, I&rsquo;ve created an open source Nuget package called <a href="https://github.com/kamranayub/cassette-sri">Cassette.SubresourceIntegrity</a>. All you do is install the package and <strong>that&rsquo;s it.</strong> Since Cassette automatically scans for bundle customizations, all I did was implement a class <code>InsertIntoPipelineSubresourceIntegrity</code> and modify the pipeline to replace a couple parts with SRI-aware code.</p>

<p>The meat of the change is this code here:</p>

<pre><code>string integrity;

using (var stream = asset.OpenStream())
{
    using (var sha256 = SHA256.Create())
    {
        integrity = $"integrity=\"sha256-{Convert.ToBase64String(sha256.ComputeHash(stream))}\"";
    }
}

return $"&lt;script src=\"{_urlGenerator.CreateAssetUrl(asset)}\" " +
       $"type=\"text/javascript\" " +
       $"{integrity}{bundle.HtmlAttributes.ToAttributeString()}&gt;&lt;/script&gt;";
</code></pre>

<p>I am just getting the asset stream and hashing the contents using SHA256, then adding the attribute to the output. You&rsquo;ll notice that the <strong>URLs are not changed</strong>, so Cassette will continue to use SHA1 hashes internally. It&rsquo;s <em>only when rendering</em> we use SHA256 because that&rsquo;s the only place we need it.</p>

<p>While the code is interesting, it&rsquo;s nothing too crazy&mdash;in fact, most of the code required is because Cassette doesn&rsquo;t expose certain needed classes used in the rendering pipeline so I had to basically copy/paste a lot of the helper classes.</p>

<h2>The end result</h2>

<p>Now Cassette will automatically include SRI hashes for individual assets:</p>

<pre><code>&lt;link href="cassette.axd/asset/Content/bootstrap/bootstrap-ext.css?cabc6264a89106c4b9021c293cfa5c2cae7a0549" 
    integrity="sha256-sNfA6O5zvZPmMJ474pm2w6UyZbz5tfukxTEZXrsLm7Q=" type="text/css" rel="stylesheet"/&gt;
&lt;link href="cassette.axd/asset/Content/modules/typeahead.css?00581b47ff3848da273d91c31adb8270e9ef8707" 
    integrity="sha256-W6JAiwRw2ER1QoXjXL/YxsY/On1Y7MhW4TtoWY0XuH8=" type="text/css" rel="stylesheet"/&gt;
&lt;link href="cassette.axd/asset/Content/modules/toastr.css?32e90a136e05728ac23995ff8fe33077df9f50ca" 
    integrity="sha256-JT6UwDlczdRDx+9mnMCzvxwABJP0cSDgNLmT+WumJrQ=" type="text/css" rel="stylesheet"/&gt;
&lt;link href="cassette.axd/asset/Content/hopscotch/hopscotch.css?58ea04e54df958c33cf9e6bfed9f39a166354e9c" 
    integrity="sha256-Bq06LI6L0XMhxF+CoJo+4L12w2Orsbh2oRjOZ+fpmWc=" type="text/css" rel="stylesheet"/&gt;
&lt;link href="cassette.axd/asset/Content/core.css?a3b4fcb8b7d9b0e8465a4fea29d60247ea47fd87" 
    integrity="sha256-fAqyFLkOx1cFONu7NXX3c7/G1DSmXeHgtPtcWU72a4E=" type="text/css" rel="stylesheet"/&gt;
&lt;link href="cassette.axd/asset/Content/library.css?2c2746a086737dc588e313c0cc2c5adf8b947605" 
    integrity="sha256-SaP9kdYfbafIVes+qntAiDLPsi4JaXnit4eN6IfU9lA=" type="text/css" rel="stylesheet"/&gt;
</code></pre>

<p><em>and</em> bundles:</p>

<pre><code>&lt;link href="cassette.axd/stylesheet/ba58f2a04873e41b6a599274ea6768db1a61a650/Content/core" 
    integrity="sha256-thzkrIApz9dAI9nfJGleO1jbNFXXVT/BxoSynI2pEPw=" type="text/css" rel="stylesheet"/&gt;
&lt;link href="cassette.axd/stylesheet/2c2746a086737dc588e313c0cc2c5adf8b947605/Content/library.css" 
    integrity="sha256-6LgYbxu4UwouRBqvUdHZAQc0lewdik6aZYpDgrtAWJ4=" type="text/css" rel="stylesheet"/&gt;
</code></pre>

<p>Voila!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Designing Hexshaper, a Game for the Ludum Dare 35 Game Jam]]></title>
    <link href="http://kamranicus.com/blog/2016/05/08/ludum-dare-35-game-jam/"/>
    <updated>2016-05-08T02:10:00+00:00</updated>
    <id>http://kamranicus.com/blog/2016/05/08/ludum-dare-35-game-jam</id>
    <content type="html"><![CDATA[<p>This last weekend I took part in the global <a href="http://ludumdare.com">Ludum Dare 35</a> game jam. If you&rsquo;ve been following me for awhile, you know I&rsquo;ve participated in the past too. This time we <a href="http://excaliburjs.com/ludum-35">made a game called Hexshaper</a>&mdash;where the goal is to fly around, absorbing magic to seal portals to another dimension to prevent monsters from overtaking the world. The backstory, while not communicated directly, informed our design&mdash;but it wasn&rsquo;t like that at first.</p>

<!-- more -->


<p>It&rsquo;s interesting to look at where the game was 24 hours into the competition because <strong>it looks nothing like the final game</strong>:</p>

<p><img src="https://cloud.githubusercontent.com/assets/563819/14938110/522d02f8-0edf-11e6-9329-7af08f8f9ecc.png" alt="Ship in space" /></p>

<p>A ship shooting bullets at vampire bats in space? That is <em>nothing</em> like a witch flying around inside a castle closing portals!</p>

<p><img src="https://cloud.githubusercontent.com/assets/563819/14938116/935df5ca-0edf-11e6-8694-507052c8f6cf.png" alt="Witchcraft" /></p>

<p>How did that come to be?</p>

<h2>Let&rsquo;s make a shmup</h2>

<p>This being our fourth LD jam, we have a process for how we do things now. Friday is spent brainstorming and coming up with ideas and then Saturday-Monday we build out our idea. This jam was a little different though&mdash;by the end of the night the group agreed we wanted to make a shoot &lsquo;em up (&ldquo;shmup&rdquo;) but we didn&rsquo;t quite know what the game would be about. All the ideas seemed to be too involved for a jam:</p>

<ul>
<li>&ldquo;Let&rsquo;s make an Ikaruga style shoot &lsquo;em up with enemies and levels&rdquo;</li>
<li>&ldquo;Let&rsquo;s have different kinds of shooting styles&rdquo;</li>
<li>&ldquo;Let&rsquo;s make different shields that absorb certain bullets&rdquo;</li>
<li>&ldquo;Let&rsquo;s do a Geometry Wars style arena shooter&rdquo;</li>
</ul>


<p>The most important thing you can do during a jam is to scope your idea to something that makes sense. We know from experience we never make more than one level or develop different enemy designs&mdash;all of that is stuff you do <strong>after</strong> the game proves fun and interesting, which usually ends up being the last day :)</p>

<p>We ended up landing on the last two ideas Friday night but I don&rsquo;t think any of us really saw a coherent design in our heads. We knew the mechanics we wanted but that&rsquo;s about it.</p>

<h2>Designing yourself into a corner</h2>

<p>We began working on the game Saturday morning. We made a space ship, we made monsters, we had shooting and we had an arena&hellip; but by the end of the night, I was frustrated and I think several other team members were too. There were too many open questions in my mind:</p>

<ol>
<li>What was interesting about the game?</li>
<li>How will shields work?</li>
<li>Why are there vampire bats in space?</li>
<li>Why are you shooting them?</li>
<li>It feels wrong to constrain <em>space</em>, space is open and vast, why are you trapped?</li>
</ol>


<p>The problem was clear in hindsight and something that was nagging at me all throughout the day: <strong>we did not have an internally consistent idea.</strong> Our idea was too abstract and didn&rsquo;t tie together the reasons why the mechanics existed. There was no point of reference for the mechanics, the <em>why</em> of it all. Why were you a spaceship shooting bats in outer space? I don&rsquo;t know! None of us could explain why anything was happening.</p>

<p>So as I drove home that night I was frustrated and afraid&mdash;we just spent the entire day working on a game but I have no idea to what end. It just didn&rsquo;t feel right. We had a spaceship, we had a space theme, how the heck could this make any sense? I felt like we designed ourselves into a corner.</p>

<h2>Creativity needs some downtime</h2>

<p>I find some of my best ideas, in game jams and outside of them, come when I give my brain time to think&mdash;driving home late at night, right before bed, etc. <a href="http://www.bbc.com/future/story/20131205-how-sleep-makes-you-more-creative">This is a pretty well-known phenomena</a> and also why it&rsquo;s SO IMPORTANT to sleep during a game jam. Give your brain a rest. Your brain can pull together random stuff and tie it together when you push everything out and the time that <em>usually</em> can occur is before bed.</p>

<p>So it was like a brick in the face, when on my way home, I had an idea. An idea that I was so excited about, I couldn&rsquo;t sleep until I had made sure to note it all down. In the morning, I was pretty excited:</p>

<p><img src="https://cloud.githubusercontent.com/assets/563819/14938261/683c1bc0-0ee3-11e6-9da2-8e6481cdd1aa.png" alt="image" /></p>

<h2>The importance of an internally consistent theme</h2>

<p>When the team assembled, I told them I had a way to tie it all together&mdash;with minimal changes to existing mechanics. I was a little hesitant, would they like it? I was excited but started to doubt myself a little&mdash;was it a bit too farfetched?</p>

<blockquote><p>&ldquo;OK, what if you&rsquo;re a witch or a wizard and you&rsquo;re trying to make some kind of crazy potion. But then your dumb assistant bumps the ingredients and they all fall and mix together, creating interdimensional portals! The potions correspond to the shield types and you are trying to close the portals by killing the monsters. The arena is closed because you&rsquo;re actually INSIDE on a broomstick and you&rsquo;re in a castle. So the goal is to close all the portals to save the world!&rdquo;</p></blockquote>

<p>I had nothing to worry about. Everyone loved it and then <strong>everyone</strong> started to contribute their ideas:</p>

<ul>
<li>&ldquo;What if the monsters and the portals are colored to show their association?&rdquo;</li>
<li>&ldquo;What if we use shapes to denote the bullets and shield types?&rdquo;</li>
<li>&ldquo;What if we did waves, so like the first wave introduces the player to the idea and then have more waves until you win?&rdquo;</li>
<li>&ldquo;What if we showed an opening sequence where you bump all the potions into a pile and a HUGE PILLAR OF LIGHT AND ENERGY SHOOTS UP FROM THE GROUND AND THEN THE SCREEN FLASHES WHITE AND WHEN IT COMES BACK THE CASTLE IS IN RUINS!?&rdquo; (that was how I saw the intro in my head)</li>
</ul>


<p>You see, <strong>when you have an idea that is internally consistent you can answer all these kinds of questions easily and things just make sense.</strong> <em>Why are you flying around?</em> Because you&rsquo;re a witch! <em>Why are their monsters?</em> Because there are interdimensional portals! <em>Why do you have a shield?</em> They are hexes! <em>How do you close portals?</em> Absorb the magical energy to close them!</p>

<p>And then what happens is the theme helps get rid of mechanics you <em>thought</em> you wanted but turned out to just hinder the goal:</p>

<ul>
<li>Q: &ldquo;Why are you shooting?&rdquo;</li>
<li>A: &ldquo;I don&rsquo;t know, what if we get rid of shooting?&rdquo;</li>
</ul>


<p>And sure enough when we did the game felt more natural&mdash;instead of shooting working against the primary mechanic of changing shields, now the only thing you can do is absorb magic and run into monsters. That felt much better! The new theme brought together the rest of the design ideas: you&rsquo;re in a castle, there are portals, it should be fantasy-themed, etc. It all just tied together nicely and all it took was re-skinning what we had Saturday night.</p>

<p>An internally consistent theme is extremely important in any game for obvious reasons:</p>

<ul>
<li>It explains the internal lore of the game</li>
<li>It energizes team members</li>
<li>It gets the creative juices flowing</li>
<li>It defines what the game will be</li>
</ul>


<p>Think of even the most basic game and try to find the theme&mdash;you&rsquo;ll see that the mechanics and design all play off each other, even if the theme is never communicated formally. This realization isn&rsquo;t anything new&mdash;I&rsquo;ve read the <a href="http://www.amazon.com/Art-Game-Design-book-lenses/dp/0123694965">Art of Game Design</a> and many of the &ldquo;lenses&rdquo; discussed help you design a coherent theme. It&rsquo;s just something that can be hard to land on within 72 hours and easy to lose sight of in the excitement of a game jam.</p>

<h2>Think and work in the abstract until the theme reveals itself</h2>

<p>This experience also reinforces the value of <em>focusing on the mechanics first</em> rather than theming right away. One of the first things we did Saturday was design the spaceship! Instead, we should have focused on the mechanical ideas abstractly and <em>then</em> let the theme reveal itself. By using abstract design first, our minds could have been able to make connections faster to think of a consistent theme. When you&rsquo;re looking and playing with grey boxes, it becomes easier to imagine what the game might be like. When we decided to do art first, we pigeon-holed <strong>our brains</strong> into believing the final game needed to be space-themed rather than it being open-ended.</p>

<p>If we had decided on a more consistent theme before we started development, we could have probably done even more by the end of the jam. When we designed <a href="http://playsweepstacks.com">Sweep Stacks</a>, we knew exactly what the mechanics would be&mdash;so the theme was evident and we had scoped it to what we could finish in a jam. Sometimes what can help (and we didn&rsquo;t necessarily do this in this jam) is to write on a board the mechanics you want, then try to come up with creative ways they tie together. Don&rsquo;t spend too much time on one idea&mdash;someone should say let&rsquo;s move on and the group discusses a different idea entirely. This way, you can kind of avoid designing yourself into a corner by exploring all sorts of other ideas and how they relate to the mechanics you want.</p>

<p>Only by a lucky burst of creativity, &ldquo;Ship Shape&rdquo; became Hexshaper and turned out to be even better than we first thought.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[TypeScript in Action at Twin Cities Code Camp 20 (TCCC20)]]></title>
    <link href="http://kamranicus.com/blog/2016/04/11/tccc20-typescript-in-action/"/>
    <updated>2016-04-11T18:38:00+00:00</updated>
    <id>http://kamranicus.com/blog/2016/04/11/tccc20-typescript-in-action</id>
    <content type="html"><![CDATA[<p><strong>Update (4/20/16)</strong>: The presentation is now up on <a href="https://www.youtube.com/watch?v=eeh-FcC6Sew">YouTube</a> (and <a href="http://kamranicus.com/presentations/typescript-in-action/#/">the slides</a>).</p>

<iframe width="420" height="315" src="https://www.youtube.com/embed/eeh-FcC6Sew" frameborder="0" allowfullscreen></iframe>


<hr />

<p>I&rsquo;ll be speaking at 8:30am this weekend at <a href="http://twincitiescodecamp.com">Twin Cities Code Camp</a>. My talk will about using TypeScript
in the context of an Angular 2 ASP.NET MVC web application but will focus on how TypeScript enhances my productivity and showcases some features of the language. I&rsquo;ve done the talk previously internally at General Mills and had a great response so I thought I&rsquo;d piggyback on the success of my previous <a href="http://kamranicus.com/presentations/demystifying-typescript/#/">Demystifying TypeScript</a> talk (which is also on <a href="https://www.youtube.com/watch?v=kb7tvaBJeMs">YouTube</a>).</p>

<p>If you&rsquo;re at all interested in seeing how TypeScript development looks in action, you should attend and I&rsquo;d recommend going through my
previous talk if you&rsquo;re still not convinced TypeScript is awesome. This talk assumes you are at least open to the idea of developing
in TypeScript and are curious to see how it can be used.</p>

<p>It&rsquo;ll be a fun time and a busy weekend&mdash;I&rsquo;ll have to leave the conference right after my talk to participate in Ludum Dare, where I&rsquo;ll
be helping to build a game in 72 hours. I&rsquo;m sad I&rsquo;ll miss the speaker happy hour and the prizes but it&rsquo;s for a good reason!
Hope to see you Saturday!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Generating an Encryption Certificate for PowerShell DSC in WMF5]]></title>
    <link href="http://kamranicus.com/blog/2016/04/05/wmf5-powershell-dsc-generating-encryption-certificate/"/>
    <updated>2016-04-05T03:43:00+00:00</updated>
    <id>http://kamranicus.com/blog/2016/04/05/wmf5-powershell-dsc-generating-encryption-certificate</id>
    <content type="html"><![CDATA[<p>I&rsquo;m currently building out a PowerShell DSC pull server cluster at work. If you aren&rsquo;t familiar with DSC, I&rsquo;ll talk more about it in an upcoming post that ties it all together. The long and short of it is that DSC is a way to store configuration as code and automate the configuration of many servers at once.</p>

<p>In the recent Windows Management Framework 5 release, Microsoft has improved its support and feature set for DSC but with a new release comes new surprises. The first surprise you may run into, as we did, was that your old WMF4 way of encrypting MOF files doesn&rsquo;t work. In WMF5, the requirements for the certificate used to secure MOF files is stricter. <a href="https://msdn.microsoft.com/en-us/powershell/dsc/securemof">Taken from MSDN</a>:</p>

<ol>
<li>Key Usage:</li>
<li>Must contain: &lsquo;KeyEncipherment&rsquo; and &lsquo;DataEncipherment&rsquo;.</li>
<li>Should <em>not</em> contain: &lsquo;Digital Signature&rsquo;.</li>
<li>Enhanced Key Usage:</li>
<li>Must contain: Document Encryption (1.3.6.1.4.1.311.80.1).</li>
<li>Should <em>not</em> contain: Client Authentication (1.3.6.1.5.5.7.3.2) and Server Authentication (1.3.6.1.5.5.7.3.1).</li>
</ol>


<p>If you read my <a href="http://kamranicus.com/blog/2016/02/24/azure-key-vault-config-encryption-azure/">previous foray into certificates with Azure Key Vault</a>, you know I&rsquo;m pretty green when it comes to certificate management and terminology. I really didn&rsquo;t know what this stuff meant&mdash;I mean, I understand a certificate has key usages and enhanced key usages, but <strong>how does it get them?</strong> It has to do with the certificate request and the template used to provision your certificate.</p>

<p>It turns out Microsoft recommends obtaining a certificate from Active Directory Certificate Services. That&rsquo;s cool, but I&rsquo;m just a developer who wants to work on DSC, I don&rsquo;t have an ADCS server to give me certificates during testing&mdash;that&rsquo;s a different team altogether and when they&rsquo;re primary guy is out of the office, I&rsquo;m a bit stuck.</p>

<p><strong>Update (4/13)</strong>: <a href="https://msdn.microsoft.com/en-us/powershell/dsc/securemof">TechNet</a> now has a guide on how to generate certificates for WMF5. I&rsquo;m leaving the rest of this post as-is for posterity.</p>

<hr />

<p>I thought I could maybe use a self-signed certificate while I wait for a &ldquo;for real&rdquo; one later. After searching around for a method to create a certificate with the required KU and EKU specs, I found a lot of answers suggesting using OpenSSL. I&rsquo;ve never used OpenSSL before so I thought I&rsquo;d give it a try and I found it a bit confusing&mdash;I think I could have gotten it to work but instead I came across a random PowerShell article (unrelated to anything) using a utility called <code>certreq</code> that could handle providing custom key usages, problem solved!</p>

<p>You just need to create a file to define your certificate settings, <strong>MyCert.inf</strong>:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[Version]
</span><span class='line'>Signature = "$Windows NT$"
</span><span class='line'>
</span><span class='line'>[Strings]
</span><span class='line'>szOID_ENHANCED_KEY_USAGE = "2.5.29.37"
</span><span class='line'>szOID_DOCUMENT_ENCRYPTION = "1.3.6.1.4.1.311.80.1"
</span><span class='line'>
</span><span class='line'>[NewRequest]
</span><span class='line'>Subject = "cn=me@example.com"
</span><span class='line'>MachineKeySet = false
</span><span class='line'>KeyLength = 2048
</span><span class='line'>KeySpec = AT_KEYEXCHANGE
</span><span class='line'>HashAlgorithm = Sha1
</span><span class='line'>Exportable = true
</span><span class='line'>RequestType = Cert
</span><span class='line'>
</span><span class='line'>KeyUsage = "CERT_KEY_ENCIPHERMENT_KEY_USAGE | CERT_DATA_ENCIPHERMENT_KEY_USAGE"
</span><span class='line'>ValidityPeriod = "Years"
</span><span class='line'>ValidityPeriodUnits = "1000"
</span><span class='line'>
</span><span class='line'>[Extensions]
</span><span class='line'>%szOID_ENHANCED_KEY_USAGE% = "{text}%szOID_DOCUMENT_ENCRYPTION%"</span></code></pre></td></tr></table></div></figure>


<p>Just change the <code>Subject</code> line to whatever you need in your case.</p>

<p>Then execute <code>certreq</code> using the input file:</p>

<pre><code>certreq -new MyCert.inf MyCert.cer
</code></pre>

<p>Certreq should be available if you have Makecert&mdash;if you aren&rsquo;t finding it in the default command prompt, try using the Visual Studio Command Prompt. Once you execute the command it will generate a public key file and install the private/public key pair into your <code>CurrentUser</code> personal certificate store:</p>

<pre><code>PS&gt; dir Cert:\CurrentUser\My
</code></pre>

<p>From there, you can export the private/public keys and install it on your DSC nodes.</p>

<p><img src="https://cloud.githubusercontent.com/assets/563819/14269791/dac55acc-fa9c-11e5-8352-55881c3150ed.png" alt="Example screenshot" /></p>

<p>Until you get a signed certificate from your CA, this should work. Hope that helps!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[See You at Build 2016]]></title>
    <link href="http://kamranicus.com/blog/2016/03/11/attending-build-2016/"/>
    <updated>2016-03-11T00:31:00+00:00</updated>
    <id>http://kamranicus.com/blog/2016/03/11/attending-build-2016</id>
    <content type="html"><![CDATA[<p>I love attending conferences. At the end of the month I&rsquo;ll be attending <a href="http://buildwindows.com">Build 2016</a>. Build is the annual Microsoft conference. At the end of January me and some friends <a href="https://www.instagram.com/p/BBJQ-PTuIzZ">attended PAX South</a> in San Antonio and it was a blast (not for work). A gaming convention has a different air than a developer conference. There&rsquo;s a certain energy and it&rsquo;s very motivating being around fellow developers, learning new tech, and seeing what&rsquo;s new. I&rsquo;ve attended Build several times in the past and it&rsquo;s always been fun&mdash;especially <a href="http://kamranicus.com/blog/posts/7/mix-11-day-2-kinects-celebrities-kings-and-clubbin/">when you meet coding &ldquo;celebs&rdquo;</a>. Usually I take my wife even though she doesn&rsquo;t attend the conference, we will typically stay longer. This year, not only will she be joining but our friend will be coming as well&mdash;both of them will be traipsing around San Francisco while I and a few coworkers will attend the conference. My partners in crime, <a href="http://twitter.com/erikonarheim">Erik</a> &amp; <a href="http://twitter.com/alangrgic">Alan</a>, will be joining me so it&rsquo;ll be a <em>ton</em> of fun (yes, we all work together and yes we <em>just</em> went to PAX together). Going to a conference is fun, going to a conference <em>with your friends</em> is even more fun.</p>

<p>After Build we&rsquo;ll be leaving my coworkers behind and we&rsquo;ll be flying up to Portland to explore the area. I&rsquo;ve been to downtown Seattle for PAX Prime before but I&rsquo;ve only been in the surrounding area once when I was a teenager and I always thought it was beautiful. My wife never has been to the Pacific northwest so we thought it&rsquo;d be fun to spend a few days extra and drive around. We&rsquo;re all looking forward to it.</p>

<p>If you&rsquo;re at Build and you follow me, be sure to <a href="http://twitter.com/kamranayub">send me a tweet</a> and we&rsquo;ll meet up!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Handling Multiple Origins in CORS Using URL Rewrite]]></title>
    <link href="http://kamranicus.com/blog/2016/03/06/cors-multiple-origins-iis/"/>
    <updated>2016-03-06T15:50:00+00:00</updated>
    <id>http://kamranicus.com/blog/2016/03/06/cors-multiple-origins-iis</id>
    <content type="html"><![CDATA[<p>Here&rsquo;s a quick tip if you&rsquo;re trying to figure out how to handle <a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Access_control_CORS">cross-origin requests (CORS)</a> when you have multiple origins (namely, HTTP and HTTPS). This works in IIS 8.0 and above, including Azure, as long as you have the <a href="http://www.iis.net/downloads/microsoft/url-rewrite">URL Rewrite module</a> installed.</p>

<p>The CORS header looks like this:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Access-Control-Allow-Origin: http://mydomain.com</span></code></pre></td></tr></table></div></figure>


<p>The spec is very strict. The header can only return a single value and it must be absolutely qualified, which means if you have a site that is served over HTTP and HTTPS (or multiple domains), you need to <em>dynamically</em> build this header in your response. Many tutorials and blog posts say to specify <code>*</code> as the value&mdash;<strong>DO NOT DO THIS!</strong> This means any origin (domain) can embed/request assets from your website. Unless you have hundreds of sites doing this (aka CDN), you should only whitelist the domains that can include resources from your site.</p>

<p>If you are sharing resources with a known number of hosts, the following method will help. If it&rsquo;s a <em>dynamic</em> list, you will need to programmatically add the <code>Access-Control-Allow-Origin</code> header depending on the incoming <code>Origin</code> header&mdash;something I won&rsquo;t cover here.</p>

<p>Rather than messing with C# and modifying outgoing responses what I ended up using was a simple URL rewrite rule, proposed by <a href="http://stackoverflow.com/a/31084390/109458">this Stack Overflow answer</a>. All it does is add a header to the outbound response when the regular expression matches&mdash;in this case, whitelisting only the HTTP and HTTPS version of my domain (or subdomain).</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;system.webServer&gt;
</span><span class='line'>   &lt;httpProtocol&gt;
</span><span class='line'>     &lt;customHeaders&gt;
</span><span class='line'>         &lt;add name="Access-Control-Allow-Headers" value="Origin, X-Requested-With, Content-Type, Accept" /&gt;
</span><span class='line'>         &lt;add name="Access-Control-Allow-Methods" value="POST,GET,OPTIONS,PUT,DELETE" /&gt;
</span><span class='line'>     &lt;/customHeaders&gt;
</span><span class='line'>   &lt;/httpProtocol&gt;
</span><span class='line'>   &lt;rewrite&gt;            
</span><span class='line'>      &lt;outboundRules&gt;
</span><span class='line'>          &lt;clear /&gt;                
</span><span class='line'>          &lt;rule name="AddCrossDomainHeader"&gt;
</span><span class='line'>              &lt;match serverVariable="RESPONSE_Access_Control_Allow_Origin" pattern=".*" /&gt;
</span><span class='line'>              &lt;conditions logicalGrouping="MatchAll" trackAllCaptures="true"&gt;
</span><span class='line'>                  &lt;add input="{HTTP_ORIGIN}" pattern="(http(s)?:\/\/((.+\.)?mydomain\.com))" /&gt;
</span><span class='line'>              &lt;/conditions&gt;
</span><span class='line'>              &lt;action type="Rewrite" value="{C:0}" /&gt;
</span><span class='line'>          &lt;/rule&gt;           
</span><span class='line'>      &lt;/outboundRules&gt;
</span><span class='line'>   &lt;/rewrite&gt;
</span><span class='line'>&lt;/system.webServer&gt;</span></code></pre></td></tr></table></div></figure>


<p>This is using special syntax of the URL Rewrite module (<code>RESPONSE_</code>) to add a outgoing response header (dashes replaced with underscores). Then it matches the <em>incoming</em> <code>Origin</code> header, compares the value, and if it matches includes the CORS header with the value of my domain.</p>

<p>That was all I had to do!</p>

<p><strong>Note:</strong> Since I just converted over to always SSL, I no longer need this workaround but multiple origins is pretty common when dealing with CORS so this solution will come in handy.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Securing Secrets Using Azure Key Vault and Config Encryption]]></title>
    <link href="http://kamranicus.com/blog/2016/02/24/azure-key-vault-config-encryption-azure/"/>
    <updated>2016-02-24T02:30:00+00:00</updated>
    <id>http://kamranicus.com/blog/2016/02/24/azure-key-vault-config-encryption-azure</id>
    <content type="html"><![CDATA[<p>Secrets. We all have them. I&rsquo;m talking about secrets like your database connection strings, API keys and encryption keys. Where are you storing yours? Are you storing them&hellip;</p>

<ol>
<li>In your application&rsquo;s source code?</li>
<li>In a config file (<code>appSettings</code> or otherwise) checked into source control?</li>
<li>In a database?</li>
<li>In a managed portal, like Azure?</li>
</ol>


<p>I hope you aren&rsquo;t storing them hardcoded. You&rsquo;re probably doing option 2 or a hybrid of options 2-4. Even if you use an external data source, it&rsquo;s hard to escape the need for secrets in local development unless you force your app to rely on having connectivity which makes it hard to work offline.</p>

<p>In this post I&rsquo;m going to provide some suggestions on how to store your secrets better using Azure Key Vault and config file encryption, specifically in the context of Azure but the concepts apply to any hosting environment.</p>

<!-- More -->


<h2>Why bother?</h2>

<p>Some of you might say, &ldquo;It&rsquo;s okay if my secret is in a config file or an environment variable, only an admin can see that.&rdquo; You&rsquo;d assume so, wouldn&rsquo;t you? But I ran into an exploit last year where you could view <strong>ANY</strong> file on the web server using a custom file handler vulnerability (the exploit has since been fixed by the vendor). Just pass in the path you cared about and the handler would helpfully spit out the contents of the file! If your secrets are in cleartext in your configs, are you checking them into source control? Anyone can read those if they have access. If you work in an organization and your code is on the web servers, anyone with access to those servers can see the file system (and therefore, your precious &ldquo;secrets&rdquo;).</p>

<p>You might also (rightfully) say that if an attacker got access to your Azure portal, it&rsquo;s game over anyway. Yes, absolutely. If an app is compromised at the filesystem level where an attacker can upload files, you&rsquo;re pretty much done for. That&rsquo;s why your portal account should have a strong password and have Two-Factor Authentication enabled. If you&rsquo;re using source control integration, that also needs to be protected with the same amount of security to prevent someone from checking in malicious files and having them deployed through automation to the web server&mdash;go and <a href="https://help.github.com/articles/about-two-factor-authentication/">enable TFA for GitHub</a> if you haven&rsquo;t already.  The goal is that we want to avoid storing plaintext secrets on the filesystem and in the portal itself, instead opting to store them in a secure location so that only <strong>our application</strong> has access to them, no one else.</p>

<p>There are more benefits to separating your secrets from your application:</p>

<ul>
<li><strong>Logging</strong> &mdash; Azure Key Vault logs all operations, so if someone did compromise your application, you&rsquo;d have the logs or could monitor them closely for strange actions</li>
<li><strong>Least privilege</strong> &mdash; You can grant a service principal Read-only access so even if the app was compromised, an attacker couldn&rsquo;t change or delete anything (unless they also had access to change the policies in Key Vault)</li>
<li><strong>As-needed access</strong> &mdash; By storing secrets away from your application, you at <em>least</em> guarantee only the application can access secrets whereas anyone with Read access to the portal can see app settings</li>
<li><strong>Defense in depth</strong> &mdash; You&rsquo;re just adding one more layer of security between an attacker and your data</li>
<li><strong>Shared storage</strong> &mdash; If you have multiple apps or services, using a single vault is useful and you can grant access policies at the secret or key level</li>
<li><strong>Encrypted configs</strong> &mdash; Instead of storing secrets in cleartext in source control, I will show you how to encrypt sections of your web.config (and it works in Azure!)</li>
<li><strong>Right thing to do</strong> &mdash; You owe it to your users and to your business to protect their data to the best of your ability</li>
</ul>


<p><a href="http://blogs.msdn.com/b/data_insights_global_practice/archive/2015/09/24/protecting-sensitive-data-with-azure-key-vault.aspx">This article</a> sums it up nicely:</p>

<blockquote><p>One of the key security principals that is implicitly being applied here is to compartmentalize management of privileged data to security domains for which this is appropriate. An instance of Key Vault is used to manage the Twitter keys as a shared resource in the customer&rsquo;s environment, with access granted by whomever manages the Twitter account on an as-needed basis to specific applications and users. Applications are then responsible for managing only their application-specific Key Vault access tokens.</p></blockquote>

<p>With that in mind, let&rsquo;s move on!</p>

<h2>Encryption keys</h2>

<p>The most important secret in your app is probably your <strong>encryption key</strong> (aka &ldquo;keys&rdquo;). This is the skeleton key to your kingdom. If someone got ahold of it, they could unlock your user&rsquo;s data and tarnish your reputation. If your Azure or portal account was compromised (even after Two Factor Auth), would attackers have access to your keys? They would if you stored them in a config or in the portal. So how can you protect this key if none of the options above truly secure it?</p>

<p>Well, what if I told you that <strong>you don&rsquo;t need to know the key</strong>. If nobody knows it, no one can steal it! But how does that work exactly? Magic? Not exactly&hellip;</p>

<h2>Welcome to the vault</h2>

<p>Enter <a href="https://azure.microsoft.com/en-us/services/key-vault/">Azure Key Vault</a>.</p>

<p>Azure Key Vault does two things:</p>

<ul>
<li>It stores encryption &ldquo;keys&rdquo; which <strong>you cannot retrieve</strong> so that you can encrypt and decrypt data, you&rsquo;d use this for user data like PII (Personally Identifiable Information)</li>
<li>It stores &ldquo;secrets&rdquo; which <strong>you can</strong> retrieve, these are things like passwords, API tokens, or other items you pass around</li>
</ul>


<p>A word about how Azure Key Vault stores keys. It&rsquo;s basically the most hardcore thing ever. If you opt for the Premium service tier, your key is stored on <strong>dedicated hardware</strong> called a Hardware Security Module (HSM). I had never heard of these so let me clue you in: they are <strong><a href="https://en.wikipedia.org/wiki/Hardware_security_module">devices</a></strong> where all they do is encrypt and decrypt data and never let the key leave their boundaries. That means, essentially, you present the data you want to encrypt to the device, it encrypts it using a key that <strong>nobody knows</strong>, and spits out the ciphertext for you to store in your system. Azure Key Vault also supports <em>software-protected</em> keys which can operate under the same conditions except they are not stored on a dedicated device. The HSM is validated to be <a href="https://en.wikipedia.org/wiki/FIPS_140-2#Level_2">FIPS 140-2 Level 2</a> compliant (out of 4 levels). What does that mean exactly?</p>

<p>Well, here&rsquo;s Level 1 security:</p>

<blockquote><p>Level 1 provides the lowest level of security. Basic security requirements are specified for a cryptographic module (e.g., at least one Approved algorithm or Approved security function shall be used). No specific physical security mechanisms are required in a Security Level 1 cryptographic module beyond the basic requirement for production-grade components. An example of a Security Level 1 cryptographic module is a personal computer (PC) encryption board.</p></blockquote>

<p>OK, so we&rsquo;re still talking <strong>a dedicated encryption board</strong> to secure keys&hellip; how about Level 2?</p>

<blockquote><p>Security Level 2 improves upon the physical security mechanisms of a Security Level 1 cryptographic module by requiring features that show evidence of tampering, including tamper-evident coatings or seals that must be broken to attain physical access to the plaintext cryptographic keys and critical security parameters (CSPs) within the module, or pick-resistant locks on covers or doors to protect against unauthorized physical access.</p></blockquote>

<p>Jeez. That means there are <em>physical defenses</em> in place on the device to prevent intrusion. We&rsquo;re not even talking intrusion through the network, no, literally these devices are secured so a <strong>human being</strong> cannot access them. Even if it&rsquo;s not Level 4, that&rsquo;s still <em>way</em> more secure than in your App.config or your database or web portal. And even Wikipedia admits that &ldquo;<a href="https://en.wikipedia.org/wiki/Hardware_security_module#Security">very few</a>&rdquo; HSMs are Level 4 validated.</p>

<p>You&rsquo;d think this hardcore security would be pricey right? Not at all. I think the <a href="https://azure.microsoft.com/en-us/pricing/details/key-vault/">$1/key/mo</a> price tag is pretty fair considering the security offered.</p>

<h2>What about secrets?</h2>

<p>OK. So Azure Key Vault is a pretty good solution to our encryption key problem. What about generic secrets, stuff you will need to pass within your application or to external services? Azure Key Vault supports that without any trouble, though they won&rsquo;t be stored on dedicated hardware. They will still be stored separately from your application behind lock and key which is our ultimate goal.</p>

<h2>But even a safe needs a combination, won&rsquo;t the <em>vault</em> require a key?</h2>

<p>Yes! And you are right to point out that it doesn&rsquo;t really solve the secrets problem if the key I need to use to unlock the vault is <em>also</em> stored in my app.config or portal or database. Luckily, there&rsquo;s a way to solve that!</p>

<h2>Certificates to the rescue</h2>

<p>Instead of using the default authentication to Azure AD, a &ldquo;client ID&rdquo; and &ldquo;secret token&rdquo;, we will actually provide a secure X.509 certificate that we&rsquo;ll upload to Azure. Since you can&rsquo;t download the certificate from Azure or access the private key, it will authenticate your application without exposing the key to your vault in a config or portal interface.</p>

<h2>Let&rsquo;s do it!</h2>

<p>I followed these two guides for setting up Key Vault and authenticating using a certificate, so I won&rsquo;t repeat the steps here but I do have several notes below that augment the guides:</p>

<ol>
<li><a href="https://azure.microsoft.com/en-us/documentation/articles/key-vault-get-started/">Getting Started with Azure Key Vault</a></li>
<li><a href="https://azure.microsoft.com/en-us/documentation/articles/key-vault-use-from-web-application">Using Azure Key Vault from a Web Application</a></li>
</ol>


<p>Follow the appendix in guide 2 to generate a certificate to authenticate to Azure AD.</p>

<p>As you work through the guides, reference the notes below.</p>

<h3>PowerShell Cmdlet Changes</h3>

<p>For guide 2, in Azure SDK 2.8+, the cmdlets have changed now:</p>

<ul>
<li><code>New-AzureADApplication</code> is now <code>New-AzureRmADApplication</code></li>
<li><code>New-AzureADServicePrincipal</code> is now <code>New-AzureRmADServicePrincipal</code></li>
</ul>


<p>When executing <code>Set-AzureKeyVaultAccessPolicy</code> make sure to add the switch <code>-PermissionsToSecrets all</code> to grant permissions to manage secrets.</p>

<p><strong>Note:</strong> The article tells you to grant <code>all</code> permissions to both keys and secrets. In reality, for production, you may want to only grant specific rights. See <a href="https://msdn.microsoft.com/en-us/library/dn903607.aspx">this MSDN article</a> for the different access policies.</p>

<h3>Certificates&hellip;?</h3>

<p>If you&rsquo;re like me, you probably find certificates can be confusing. Are you making an SSL cert? Not exactly. <em>Most</em> SSL certs are X.509 certs (not all) but they also can be used to encrypt web traffic. &ldquo;Plain&rdquo; X.509 certs can be used to sign things or encrypt/authenticate, which is what we&rsquo;re doing. If you Google around, you&rsquo;ll see they can be called &ldquo;client certificates&rdquo; or &ldquo;personal&rdquo; certificates. There are two places a cert can be installed (&ldquo;stores&rdquo;), one is the &ldquo;Local Machine&rdquo; store and the other is the &ldquo;Current User&rdquo; store. The machine store can be accessed by <em>any</em> user account, the current user store can only be accessed by the user running the process (usually, you). A &ldquo;cer&rdquo; file is the <strong>public key</strong> for your certificate. You can distribute it to anyone. The &ldquo;pfx&rdquo; file contains <strong>both the private AND public key</strong>. <strong>DO NOT GIVE IT TO ANYONE.</strong> You want the PFX file for yourself only and to import into your PC and into Azure. The PFX file is protected by a password, I recommend a strong one and <em>don&rsquo;t lose it.</em> Rule of thumb: <strong>NEVER let the private key leave your machine. This means don&rsquo;t email it. Yes, this has really happened before.</strong></p>

<h3>Certificate key length</h3>

<p>In guide 2, you create a self-signed certificate. For production should you use a commercially-signed cert? I can&rsquo;t think of a reason why that would add any extra benefit since the <strong>key length</strong> is what matters (if you <em>can</em> think of a reason, I&rsquo;d be interested in hearing it). What I <em>would</em> recommend is generating a certificate with a 4096-bit length key instead of the default 2048 length. In Windows 10 at least, this works:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>makecert -sv mykey.pvk -n "cn=KVWebApp" KVWebApp.cer -b 02/23/2016 -e 02/23/2018 -len 4096 -r</span></code></pre></td></tr></table></div></figure>


<p>If you live in fear, you can buy &ldquo;personal&rdquo; certs from trusted authorities like <a href="https://ssl.comodo.com/personal-authentication.php">Comodo</a> and use that instead.</p>

<h3>Install the certificate</h3>

<p>For guide 2, after generating the certificate you need to install it locally to test Azure Key Vault. If you run your app under IIS and the app pool is <code>ApplicationPoolIdentity</code>, it&rsquo;s best to just <a href="http://www.iis.net/learn/manage/configuring-security/application-pool-identities">change it</a> to run under your account. Trust me, it&rsquo;ll be easier. Since Azure requires the certificate to be in the <code>CurrentUser</code> store, the default app pool runs under a different account (see <a href="http://stackoverflow.com/a/3176253/109458">this StackOverflow post</a>), so you&rsquo;d have to install the cert at the machine level.</p>

<p>In the folder where your cert was generated, right-click the <code>.pfx</code> file and select Install. Enter the password you chose. You can also <a href="http://www.databasemart.com/howto/SQLoverssl/How_To_Import_Personal_Certificate_With_MMC.aspx">follow this guide</a> to do it from the MMC console.</p>

<h2>Alright, so what about local secrets?</h2>

<p>We have the cloud secrets squared away. You <em>could</em> still use Key Vault locally, except you&rsquo;d depend on connectivity (and pay for the usage). Instead, there&rsquo;s something we can do even if we don&rsquo;t end up using Azure Key Vault. We can <strong>encrypt the settings</strong> in the web.config.</p>

<p>I started with <a href="http://eren.ws/2014/02/04/encrypting-the-web-config-file-of-an-azure-cloud-service">this guide</a> to encrypting the configuration sections (but <strong>NOT</strong> <code>appSettings</code>, see below). You <strong>cannot</strong> use the same certificate you generated in the tutorial above (well, maybe you could but you need the <code>-exchange sky</code> switch to <code>makecert</code> and I didn&rsquo;t try that initially so I generated a separate certificate).</p>

<p>There&rsquo;s another thing. You also need to use a different <code>PKCS12ProtectedConfigurationProvider</code>. The one provided <strong>only</strong> searches the <code>LocalMachine</code> certificate store but in Azure, your cert is installed for the current user, so the provider fails to decrypt the config when you try to build your app on Azure because it cannot find the certificate. You need a provider that can specify the <code>StoreLocation</code> of where to load certificates from. For Azure, it must be the <strong>CurrentUser</strong> store.</p>

<p>Here&rsquo;s my modified version:</p>

<script src="https://gist.github.com/kamranayub/eaf4c4e4983ecb2d0b37.js"></script>


<p>I&rsquo;ve also added it to <a href="https://github.com/kamranayub/PKCS12ProtectedConfigurationProvider">GitHub</a>. You can download the DLL directly from <a href="https://github.com/kamranayub/PKCS12ProtectedConfigurationProvider/releases/tag/v1.0.1">GitHub</a>. Once done, you can change the entry in the config to:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;configProtectedData&gt;
</span><span class='line'>    &lt;providers&gt;
</span><span class='line'>        &lt;add name="CustomProvider"
</span><span class='line'>             thumbprint="xxx"
</span><span class='line'>             storeLocation="LocalMachine"
</span><span class='line'>             type="Pkcs12ProtectedConfigurationProvider.Pkcs12ProtectedConfigurationProvider, PKCS12ProtectedConfigurationProvider, Version=1.0.1.0, Culture=neutral, PublicKeyToken=455a6e7bdbdc9023" /&gt;
</span><span class='line'>    &lt;/providers&gt;
</span><span class='line'>&lt;/configProtectedData&gt;</span></code></pre></td></tr></table></div></figure>


<p>A few notes:</p>

<ol>
<li>This <strong>is not</strong> the same certificate you generated for Azure AD and Key Vault. This is a separate RSA certificate for use with configuration encryption. You must <em>also</em> upload the PFX for this to Azure.</li>
<li>You will need to install the PKCS12ProtectedConfigurationProvider.dll to the GAC before running the <code>aspnet_regiis</code> command. Just run <code>gacutil -i PKCS12ProtectedConfigurationProvider.dll</code> beforehand.</li>
<li>You will need to reference the custom compiled DLL instead of the one in the guide</li>
<li>I found <a href="http://stackoverflow.com/questions/17189441/web-config-encryption-for-web-sites">this StackOverflow question</a> which asks about encrypting the web.config for Azure web apps. Using the PKCS12 provider, <strong>it works.</strong></li>
</ol>


<h3>Storing secrets outside <code>&lt;appSettings&gt;</code></h3>

<p>I ran into a major hurdle that caused me some grief. It turns out, <strong>YOU CANNOT ENCRYPT THE <code>&lt;appSettings&gt;</code> SECTION!</strong> See <a href="http://stackoverflow.com/questions/15067759/why-cant-i-encrypt-web-config-appsettings-using-a-custom-configprotectionprovid">this SO question</a>.</p>

<p>Other sections are just fine but for whatever reason, IIS just <strong>requires</strong> you to GAC the config provider for it to work. In Azure web apps, we cannot GAC. So what can we do? We can use our <strong>own</strong> config section!</p>

<p>Here&rsquo;s an implementation example of an <code>ISecretsProvider</code> contract and a <code>ConfigSecretsProvider</code> example implementation. You&rsquo;d also create an <code>AzureKeyVaultSecretsProvider</code> probably to handle getting secrets from Azure Key Vault using the code from the guides above.</p>

<script src="https://gist.github.com/kamranayub/eb6518356ac2b2f1a72a.js"></script>


<p>The <code>ConfigSecretsProvider</code> will use environment variables defined in Azure <em>first</em> then fallback to the config. This mirrors how app settings work in Azure.</p>

<p><strong>Note:</strong> Here I am deciding to use only one provider per environment. You might want an implementation that actually uses both. My Key Vault implementation actually uses the <code>ConfigSecretsProvider</code> to find the URL to load the secret for, so that in Azure, the app settings just specify the Key Vault secret URL to load:</p>

<p><img src="https://cloud.githubusercontent.com/assets/563819/13271735/9a0f600a-da5c-11e5-9ff0-106d5e009464.png" alt="App settings in Azure" /></p>

<p>This way, locally I can use the raw value (encrypted) and then in Azure, reference the URL for the secret.</p>

<p>To encrypt the <code>&lt;appSecrets&gt;</code> section, just run the the command (in the same directory as the web.config and using the Visual Studio Command Prompt):</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>aspnet_regiis -pef appSecrets . -prov CustomProvider</span></code></pre></td></tr></table></div></figure>


<p>And to decrypt:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>aspnet_regiis -pdf appSecrets .</span></code></pre></td></tr></table></div></figure>


<p>Easy peasy!</p>

<h2>So where are we at?</h2>

<p>If you followed all the guides I linked to and followed the notes, you should have the following:</p>

<ol>
<li>An Azure Key Vault set up with a secret to test with</li>
<li>A certificate that authenticates against Azure AD</li>
<li>A certificate that can encrypt/decrypt your web.config</li>
<li>Both certificates uploaded to Azure through the portal</li>
<li>A <code>&lt;appSecrets&gt;</code> section in your config for local secrets that is encrypted</li>
</ol>


<p>Phew! With all this in place, here&rsquo;s what this gets you:</p>

<ol>
<li>Encryption keys are not known, therefore the <strong>most</strong> an attacker could do if they compromised the application is to decrypt every user through Key Vault which is an audited system and slows them down</li>
<li>Your production secrets are not stored anywhere in your application or source control, local secrets and connection strings are encrypted</li>
<li>No cleartext tokens are used to access Key Vault, instead a signed certificate is used</li>
</ol>


<h2>Implementation notes</h2>

<p>The article above for getting started with a web app is a good place to start but I did a few things to make it easy to test and work with locally.</p>

<ol>
<li>I created an <code>ISecretsProvider</code> interface with two implementations: a config provider (see above) and a Key Vault provider. This also lets me mock for testability.</li>
<li>When I bind the <code>ISecretsProvider</code> for dependency injection, I inspect the current environment and use the appropriate provider (config locally, key vault otherwise)</li>
</ol>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="c1">// Ninject example</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Secrets provider</span>
</span><span class='line'><span class="n">kernel</span><span class="p">.</span><span class="n">Bind</span><span class="p">&lt;</span><span class="n">ISecretsProvider</span><span class="p">&gt;().</span><span class="n">ToMethod</span><span class="p">(</span><span class="n">ctx</span> <span class="p">=&gt;</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">switch</span> <span class="p">(</span><span class="n">AppSettings</span><span class="p">.</span><span class="n">RuntimeEnvironment</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">case</span> <span class="n">RuntimeEnvironment</span><span class="p">.</span><span class="n">D</span><span class="p">:</span>
</span><span class='line'>        <span class="k">case</span> <span class="n">RuntimeEnvironment</span><span class="p">.</span><span class="n">P</span><span class="p">:</span>
</span><span class='line'>            <span class="k">return</span> <span class="k">new</span> <span class="nf">AzureKeyVaultSecretsProvider</span><span class="p">();</span>
</span><span class='line'>        <span class="k">default</span><span class="p">:</span>
</span><span class='line'>            <span class="k">return</span> <span class="k">new</span> <span class="nf">ConfigSecretsProvider</span><span class="p">();</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}).</span><span class="n">InSingletonScope</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>Some other thoughts of what you might want to do:</p>

<ul>
<li>Add some logging/telemetry around calls to key vault, such as <a href="https://azure.microsoft.com/en-us/documentation/articles/app-insights-api-custom-events-metrics/#track-dependency">App Insights&#8217; track dependency</a></li>
<li>When the Key Vault client supports returning <code>SecureStrings</code>, you could use that to protect secrets in memory</li>
<li>Rotate encryption keys every so often (store the version of the key used on the entities), though this might be pricey for HSM keys</li>
<li>Encrypt secrets before storing them and then decrypt them at runtime (might be overkill)</li>
</ul>


<h3>A word on storing secrets in-memory</h3>

<p>Ideally you would only access secrets as-needed and not store them in memory. But there are some things to consider:</p>

<ul>
<li>If an attacker has compromised your process memory somehow, they&rsquo;ve owned you anyway.</li>
<li>While $0.13/10,000 operations seems cheap, it would add up if you had to call Key Vault <strong>every</strong> time you needed to use a secret</li>
<li>Calling Azure Key Vault does incur some latency, even if it&rsquo;s minimal&mdash;remember that their SLA is 99.9% within 5 seconds so it&rsquo;s possible latency could be pretty poor</li>
<li>At least with the <em>current</em> KeyVault client, it does <strong>not</strong> return secrets as <code>SecureStrings</code>, so it will be in cleartext in memory <em>anyway</em> so what&rsquo;s the difference? (Maybe <a href="https://github.com/Azure/azure-sdk-for-net/issues/1819">they will fix that</a>.)</li>
</ul>


<p>It&rsquo;s up to you but those are my thoughts.</p>

<h2>Troubleshooting</h2>

<p>I ran into a bunch of problems during the writing of this guide. Hopefully these help:</p>

<h3>When I run my app and try to get a secret from Key Vault I get a &ldquo;Keyset does not exist&rdquo; error</h3>

<p>Your app pool/user running the app does not have access to the private key. Follow my advice above to change the app pool identity to your own user account.</p>

<p>I use an app setting to determine where my app is running.</p>

<h3>When I run my app, I get a &ldquo;Bad Key&rdquo; error from the config encryption provider</h3>

<p>You are trying to use the same cert you made for Azure AD, you can&rsquo;t do this. Follow the guide I linked to above to make a new <code>azureconfig</code> cert and import it the same way you did before (to both certificate stores).</p>

<h3>When I build my app in Azure through Continuous Deployment, it&rsquo;s not able to decrypt the web.config</h3>

<ol>
<li>Ensure you uploaded the config PFX file through the portal</li>
<li>Ensure you restarted the application (or Stop then Start)</li>
<li>You can use the Kudu console to run Powershell to check if your cert is uploaded.</li>
<li><code>PS&gt; Set-Location Cert:\CurrentUser\My</code></li>
<li><code>PS&gt; Get-ChildItem</code></li>
<li>Ensure the <code>storeLocation</code> attribute in the web.config is set to <code>CurrentUser</code></li>
<li>Ensure you <strong>are not</strong> encrypting the <code>&lt;appSettings&gt;</code> config section, it&rsquo;s not supported (use the <code>appSecrets</code> workaround above)</li>
<li>Ensure your <code>thumbprint</code> matches the certificate thumbprint</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Tools of the Trade 2016]]></title>
    <link href="http://kamranicus.com/blog/2016/02/09/tools-of-the-trade/"/>
    <updated>2016-02-09T03:09:00+00:00</updated>
    <id>http://kamranicus.com/blog/2016/02/09/tools-of-the-trade</id>
    <content type="html"><![CDATA[<p>Sometimes you get so caught up in the work you do on a daily basis that you forget what it was like to start your job on day one&mdash;not knowing anything about what tools, extensions, and general utilities you take for granted now, 6 years into your career. It seems like on a monthly basis I find a new extension or utility that is useful to me. I wanted to share my toolbelt, in case it contains something you&rsquo;ve never heard of and causes you to exclaim in excitement about something awesome that you&rsquo;ll start using today.</p>

<!-- More -->


<p>This list is organized by function&mdash;i.e. what the tool contributes to for my work. If I use extensions for a tool, I will list them under the tool. I&rsquo;ve definitely used more things than I list here but I use these on a day-by-day basis typically and are what I would consider essential to my workflow. Share any awesome tools you use that I missed in the comments! If I think of more, I&rsquo;ll add them below.</p>

<h2>Coding</h2>

<p>I work with JavaScript/TypeScript, HTML, CSS, and C# on a daily basis. Here&rsquo;s what I use and for what.</p>

<h3><a href="https://go.microsoft.com/fwlink/?LinkId=691978&amp;clcid=0x409">Visual Studio 2015 Pro/Community</a></h3>

<p>For primary .NET work, web app work, and work-work. I use Community edition at home, it&rsquo;s free!</p>

<p><strong>Extensions</strong></p>

<ul>
<li><a href="https://www.jetbrains.com/resharper/download/">ReSharper 10</a> &ndash; Oodles of time-saving refactoring helpers and code analysis</li>
<li><a href="https://visualstudiogallery.msdn.microsoft.com/3b329021-cd7a-4a01-86fc-714c2d05bb6c">Web Compiler</a> &ndash; for LESS, SASS compiling</li>
<li><a href="https://visualstudiogallery.msdn.microsoft.com/e1d68248-f30e-4a5d-bf18-31399a0bcfa6">Typewriter</a> (see my recent <a href="http://kamranicus.com/blog/2016/02/04/typewriter/">blog post</a>) &ndash; for T4-style TypeScript codegen</li>
<li><a href="https://visualstudiogallery.msdn.microsoft.com/ee6e6d8c-c837-41fb-886a-6b50ae2d06a2">Web Essentials 2015</a> &ndash; for web dev</li>
<li><a href="https://visualstudiogallery.msdn.microsoft.com/1f6ec6ff-e89b-4c47-8e79-d2d68df894ec">Razor Generator</a> &ndash; for Razor templates for emails</li>
<li><a href="https://visualstudiogallery.msdn.microsoft.com/dd1dc8a5-d627-48a2-a19d-df4fe0c47f19">Node.js Tools for Visual Studio</a> &ndash; for Node.js projects</li>
<li><a href="https://visualstudiogallery.msdn.microsoft.com/c9eb3ba8-0c59-4944-9a62-6eee37294597">PowerShell Tools for Visual Studio</a> &ndash; for interactive PowerShell prompt and editing</li>
<li><a href="https://visualstudiogallery.msdn.microsoft.com/410e9b9f-65f3-4495-b68e-15567e543c58">Rebracer</a> &ndash; save formatting settings per solution</li>
</ul>


<h3><a href="http://code.visualstudio.com">Visual Studio Code</a></h3>

<p>For working on lots of my JS/TS-based OSS projects like <a href="http://excaliburjs.com">Excalibur.js</a>. The cross-platform, Git-integrated nature of the IDE is awesome along with per-project user settings to keep everyone in-sync.</p>

<p><strong>Extensions</strong></p>

<ul>
<li>ReStructured Text &ndash; for <a href="http://docs.excaliburjs.com">Excalibur docs</a></li>
<li>PowerShell &ndash; for scripts</li>
</ul>


<h3><a href="https://www.sublimetext.com">Sublime Text 3</a></h3>

<p>I use Sublime for note-taking (auto-save) and quick file editing since it&rsquo;s so fast and has a context-menu shortcut to edit files.</p>

<h3><a href="http://github.com">GitHub</a></h3>

<p>I pay for a plan at GitHub for private source code hosting but I also use it for all my <a href="http://github.com/kamranayub">OSS development</a>. It&rsquo;s a staple of my coding workflow.</p>

<h3><a href="http://desktop.github.com">GitHub Desktop</a></h3>

<p>For working with GitHub projects and local Git repositories, I also like that launches posh-git for the shell.</p>

<h3><a href="http://linqpad.com">Linqpad 5</a></h3>

<p>For quick C# script testing, database queries, etc.</p>

<h3><a href="https://technet.microsoft.com/en-us/scriptcenter/dd742419.aspx">PowerShell &amp; ISE</a></h3>

<p>I recently <a href="http://kamranicus.com/blog/2015/09/17/powershell-html5-offline-manifest/">became a believer</a> in PowerShell, for automation and scripting it&rsquo;s awesome. Just <a href="https://mva.microsoft.com/en-US/training-courses/getting-started-with-powershell-3-0-jump-start-8276">take the few hours</a> and learn it, you won&rsquo;t regret it. ISE is the scripting editor built into Windows.</p>

<h3><a href="https://github.com/dahlbyk/posh-git">posh-git</a></h3>

<p>The default shell for GH Desktop (above), posh-git is a PowerShell prompt with Git integration.</p>

<h2>Multimedia</h2>

<h3><a href="http://www.adobe.com/creativecloud.html">Adobe Creative Cloud</a></h3>

<p>The subscription-based model softens the blow of owning Adobe products and, perhaps, costs more over time but the benefits outweigh the negatives&mdash;namely, I own the full suite of Adobe products (<em>cough</em> legally) and they&rsquo;re <strong>always</strong> up-to-date with new versions so I don&rsquo;t need to pay up-the-nose every year. I also really like TypeKit for syncing new fonts.</p>

<h3><a href="http://www.aseprite.org/">aseprite Editor</a></h3>

<p>This is for pixel graphics and sprites, ASE is great for pixel-perfect drawings and animations.</p>

<h3><a href="http://www.mapeditor.org/">Tiled Map Editor</a></h3>

<p>For creating game maps using the spritesheets and tilesets I made from ASE/Photoshop (or purchased). Tiled also exports to JSON, making it easy to <a href="http://github.com/excaliburjs/excalibur-tiled">integrate with game engines</a>.</p>

<h3><a href="http://www.audacityteam.org/">Audacity</a></h3>

<p>I use Audacity for audio editing since it&rsquo;s easy to use and very lightweight.</p>

<h3><a href="http://www.virtualdub.org/">VirtualDub</a></h3>

<p>Simple video editor and great for transencoding video formats.</p>

<h3><a href="https://obsproject.com/download#mp">Open Broadcasting Studio</a></h3>

<p>For streaming and screen recording, you can&rsquo;t beat the FOSS OBS Studio. The new version is hot stuff and is a total rewrite of the &ldquo;Classic&rdquo; version.</p>

<h2>Productivity</h2>

<h3><a href="http://www.teamviewer.com/en-us/">TeamViewer</a></h3>

<p>I use TeamViewer because it&rsquo;s dead simple to set up and manage remote access to my machines without fiddling with firewalls or port forwarding. They also have native mobile clients for on-the-go RDP.</p>

<h3><a href="https://products.office.com/en-us/office-365-home">OneNote / Office 365</a></h3>

<p>I use OneNote for password-protected information (it&rsquo;s actually encrypted) and for cross-device note syncing. O365 is great for the cross-platform Office and syncing via OneDrive.</p>

<h3><a href="http://onedrive.com">OneDrive</a></h3>

<p>I use OneDrive for its cross-platform syncing (PC/Android/iPhone), cloud storage, and PC Windows-explorer integration. It just works. It also means my OneNote notebooks are available everywhere.</p>

<h3><a href="http://lastpass.com">LastPass</a></h3>

<p>I use LastPass Password Manager for its browser integration, always available cloud vault, and cross-device syncing (to my Android).</p>

<h3><a href="http://trello.com">Trello</a></h3>

<p>My wife and I use Trello to manage our household information&mdash;events, shopping, to-do lists, restaurants to eat at, blog posts to write, etc. My wife loves how she can use it easily on her iPhone and get notifications whenever someone changes/adds something. We both like the flexibility it offers and its ease of use. At work, we use it to manage our tasks and work for the team alongside TFS (because, you know, TFS).</p>

<h3><a href="http://www.powerarchiver.com/">PowerArchiver</a></h3>

<p>Yeah, I pay for an archiving software&hellip; it&rsquo;s awesome, easy to use, unzips anything, has Explorer-integration, etc. It was only $23 and they do free upgrades for the Personal edition.</p>

<h3><a href="https://play.google.com/store/apps/details?id=com.snoggdoggler.android.applications.doggcatcher.v1_0&amp;hl=en">Doggcatcher</a>, <a href="http://audible.com">Audible</a>, <a href="http://iheartradio.com">iHeartRadio</a>, <a href="http://spotify.com">Spotify</a></h3>

<p>You have to listen to something while you work, right? Do you just listen to the local radio on your commutes? Podcasts are invaluable for staying current with tech news and listening to books makes it easy to be &ldquo;literate&rdquo; on the go.</p>

<p><strong>Podcasts</strong></p>

<p>I paid for <a href="https://play.google.com/store/apps/details?id=com.snoggdoggler.android.applications.doggcatcher.v1_0&amp;hl=en">Doggcatcher</a> and it&rsquo;s money well spent. It works flawlessly and I listen to podcasts in the car on the way to and from work everyday. Usually I do one day podcasts, one day book, to keep it sane. I also pick and choose the episodes I listen to.</p>

<ul>
<li><a href="https://www.dotnetrocks.com/">.NET Rocks</a></li>
<li><a href="https://twit.tv/shows/this-week-in-tech">This Week in Tech</a></li>
<li><a href="http://www.polygon.com/minimap">Polygon Minimap</a></li>
<li><a href="http://www.giantbomb.com/podcasts/">Giant Bombcast</a></li>
<li><a href="http://maximumfun.org/shows/my-brother-my-brother-and-me">My Brother, My Brother, and Me</a></li>
<li><a href="http://www.thisamericanlife.org/">This American Life</a></li>
</ul>


<p>I listen to <a href="http://audible.com">Audible</a> for books on commutes. I&rsquo;ve been a member for over 6 years and through it own over 100 books and probably have saved myself hundreds of dollars on books. PS. Check out the <a href="http://www.audible.com/series/ref=a_search_c4_1_1_1srSrs_sa?asin=B0085NK3SS">Matthew Corbett series</a>, Edoardo Ballerini is a fucking awesome narrator.</p>

<p>For radio at home, I hooked up my old Android Moto G to a Bluetooth stereo and use <a href="http://iheartradio.com">iHeartRadio</a>.</p>

<p>For streaming music, I subscribe to <a href="http://spotify.com">Spotify</a> that my wife and I share on our devices. I can also use Spotify/iHeartRadio in the basement on my PS4.</p>

<h3>OK Google</h3>

<p>I use OK Google on my phone (Cortana before, on my Windows Phone) to add reminders and to-dos on-the-go.</p>

<h2>Misc</h2>

<h3>Chrome</h3>

<p>I use <a href="http://kamranicus.com/blog/2015/05/21/chrome-multi-user/">supervised user profiles</a> to keep my work separated.</p>

<h3><a href="https://conemu.github.io/">ConEmu</a></h3>

<p>An awesome multi-tabbed customizable command prompt host&mdash;I use it to create shortcuts for Azure Powershell SDK, Visual Studio CMD prompt, Posh-Git, CMD prompt, etc.</p>

<h3><a href="http://regexr.com/">RegExr</a></h3>

<p>An awesome Regular Expression engine in the browser, my go-to Regex reference/tester.</p>

<h3><a href="http://draeton.github.io/stitches/">Stitches</a></h3>

<p>An HTML5-based sprite sheet generator.</p>

<h3><a href="https://emby.media/">Emby</a></h3>

<p>Not work-related but I use Emby (it&rsquo;s free!) to stream media to my consoles and other devices. It has a great web interface for remote viewing too!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using Typewriter to Strongly-Type Your Client-Side Models and Services]]></title>
    <link href="http://kamranicus.com/blog/2016/02/04/typewriter/"/>
    <updated>2016-02-04T02:08:00+00:00</updated>
    <id>http://kamranicus.com/blog/2016/02/04/typewriter</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve recently discovered <a href="http://frhagn.github.io/Typewriter/index.html">Typewriter for Visual Studio</a>, a T4-style code-generator specifically meant for generating Typescript files. I&rsquo;ve been using it since in all my projects, at work and at home. It&rsquo;s just <strong>so</strong> good. Let me explain what Typewriter does and why it&rsquo;s so awesome.</p>

<!-- more -->


<h2>Setting the stage</h2>

<p>It&rsquo;s 2016. The web app you&rsquo;re working on is a mix of Javascript, C#, and controllers for MVC or Web API. Your solution looks something like this:</p>

<p><img src="https://cloud.githubusercontent.com/assets/563819/12835031/1f2c4cfc-cb72-11e5-8f99-d6b3a4af3e83.png" alt="Folder structure" /></p>

<p>You&rsquo;ve got a standard folder structure with a MVC controller and API controller. You want to leverage a client-side library to make it easier to have a dynamic and responsive interface, let&rsquo;s say <a href="http://knockoutjs.com">Knockout.js</a>. You start creating a Knockout view model and you want to bind it to your view. What do you do now at this point for binding the initial data to your view?</p>

<p>Do you&hellip;</p>

<ol>
<li>Serialize the server model into JSON and pass it into your Knockout view model manually</li>
<li>Don&rsquo;t even bother and fetch the data via AJAX when the page loads</li>
</ol>


<p>In either case, you&rsquo;re left with a realization: <strong>I need to pass in my server model so I can use it in my client-side code.</strong> You&rsquo;re left doing something like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">TaskListViewModel</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">model</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>   <span class="kd">var</span> <span class="nx">vm</span> <span class="o">=</span> <span class="p">{};</span>
</span><span class='line'>
</span><span class='line'>   <span class="nx">vm</span><span class="p">.</span><span class="nx">name</span> <span class="o">=</span> <span class="nx">ko</span><span class="p">.</span><span class="nx">observable</span><span class="p">(</span><span class="nx">model</span><span class="p">.</span><span class="nx">name</span><span class="p">);</span>
</span><span class='line'>   <span class="nx">vm</span><span class="p">.</span><span class="nx">tasks</span> <span class="o">=</span> <span class="nx">ko</span><span class="p">.</span><span class="nx">observableArray</span><span class="p">(</span><span class="nx">model</span><span class="p">.</span><span class="nx">tasks</span><span class="p">.</span><span class="nx">map</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">t</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="nx">TaskViewModel</span><span class="p">(</span><span class="nx">t</span><span class="p">);</span> <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>   <span class="k">return</span> <span class="nx">vm</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="nx">$</span><span class="p">(</span><span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">vm</span> <span class="o">=</span> <span class="nx">TaskListViewModel</span><span class="p">(</span><span class="nb">window</span><span class="p">.</span><span class="nx">model</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">ko</span><span class="p">.</span><span class="nx">applyBindings</span><span class="p">(</span><span class="nx">vm</span><span class="p">);</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>And then passing in your server model, serialized from JSON either via AJAX or embedded in the view:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;script&gt;</span>
</span><span class='line'><span class="nb">window</span><span class="p">.</span><span class="nx">model</span> <span class="o">=</span> <span class="err">@</span><span class="nx">Html</span><span class="p">.</span><span class="nx">Raw</span><span class="p">(</span><span class="nx">JsonConvert</span><span class="p">.</span><span class="nx">SerializeObject</span><span class="p">(</span><span class="nx">Model</span><span class="p">));</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// or</span>
</span><span class='line'>
</span><span class='line'><span class="nx">$</span><span class="p">(</span><span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">$</span><span class="p">.</span><span class="nx">getJSON</span><span class="p">(</span><span class="s1">&#39;/api/tasks&#39;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">tasks</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">vm</span> <span class="o">=</span> <span class="nx">TaskListViewModel</span><span class="p">(</span><span class="nx">tasks</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">ko</span><span class="p">.</span><span class="nx">applyBindings</span><span class="p">(</span><span class="nx">vm</span><span class="p">);</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'><span class="nt">&lt;/script&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>We&rsquo;ve all done something like this because no matter what approach you choose, you have to map the models <em>somewhere</em>. You could use a mapping library like <a href="http://knockoutjs.com/documentation/plugins-mapping.html">ko.mapping</a> to help. But even with help, you still have the same problem:</p>

<blockquote><p>What happens when you change your model in C#?</p></blockquote>

<p>The answer is, &ldquo;I have to go and update all the references in my client-side Javascript.&rdquo; So what do we do? We try to leave it as much alone as we can, preferring not to change things so we can avoid Happy JS Refactoring Funtime.</p>

<h2>Enter Typescript, stage left</h2>

<p>We can address one aspect of this problem using <a href="http://typescriptlang.org">Typescript</a>, the typed superset of Javascript introduced by Microsoft several years ago. My love for Typescript is <a href="http://kamranicus.com/presentations/demystifying-typescript">well-documented</a> and I encourage you to go through that presentation if you haven&rsquo;t already.</p>

<p>Here&rsquo;s one reason why I love it: we can create interfaces that strongly-type our C# models.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kr">interface</span> <span class="nx">TaskListViewModel</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">id</span><span class="o">:</span> <span class="nx">number</span><span class="p">;</span>
</span><span class='line'>  <span class="nx">name</span><span class="o">:</span> <span class="nx">string</span><span class="p">;</span>
</span><span class='line'>  <span class="nx">author</span><span class="o">:</span> <span class="nx">string</span><span class="p">;</span>
</span><span class='line'>  <span class="nx">created</span><span class="o">:</span> <span class="nb">Date</span><span class="p">;</span>
</span><span class='line'>  <span class="nx">tasks</span><span class="o">:</span> <span class="nx">TaskViewModel</span><span class="p">[];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kr">interface</span> <span class="nx">TaskViewModel</span> <span class="p">{</span>
</span><span class='line'>   <span class="nx">order</span><span class="o">:</span> <span class="nx">number</span><span class="p">;</span>
</span><span class='line'>   <span class="nx">canMarkDone</span><span class="o">:</span> <span class="kr">boolean</span><span class="p">;</span>
</span><span class='line'>   <span class="nx">task</span><span class="o">:</span> <span class="nx">Task</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kr">interface</span> <span class="nx">Task</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">text</span><span class="o">:</span> <span class="nx">string</span><span class="p">;</span>
</span><span class='line'>  <span class="nx">done</span><span class="o">:</span> <span class="kr">boolean</span><span class="p">;</span>
</span><span class='line'>  <span class="nx">created</span><span class="o">:</span> <span class="nb">Date</span><span class="p">;</span>
</span><span class='line'>  <span class="nx">modified</span><span class="o">:</span> <span class="nb">Date</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now I&rsquo;ve created an interface that mirrors my serialized C# model representation. So now with Typescript, <strong>anytime</strong> I use a server-side model, I can ensure I never have any problems with misspellings/refactoring or type changes (e.g. &ldquo;author&rdquo; changing from a string to a <code>User</code> model). At compile-time, Typescript will ensure my references are correct.</p>

<p>Using type information, we can strongly type our previous JS view model:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">TaskListViewModel</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">model</span><span class="o">:</span> <span class="nx">TaskListViewModel</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>   <span class="kd">var</span> <span class="nx">vm</span> <span class="o">=</span> <span class="p">{};</span>
</span><span class='line'>
</span><span class='line'>   <span class="nx">vm</span><span class="p">.</span><span class="nx">name</span> <span class="o">=</span> <span class="nx">ko</span><span class="p">.</span><span class="nx">observable</span><span class="o">&lt;</span><span class="nx">string</span><span class="o">&gt;</span><span class="p">(</span><span class="nx">model</span><span class="p">.</span><span class="nx">name</span><span class="p">);</span>
</span><span class='line'>   <span class="nx">vm</span><span class="p">.</span><span class="nx">tasks</span> <span class="o">=</span> <span class="nx">ko</span><span class="p">.</span><span class="nx">observableArray</span><span class="o">&lt;</span><span class="nx">TaskViewModel</span><span class="o">&gt;</span><span class="p">(</span><span class="nx">model</span><span class="p">.</span><span class="nx">tasks</span><span class="p">.</span><span class="nx">map</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">t</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="nx">TaskViewModel</span><span class="p">(</span><span class="nx">t</span><span class="p">);</span> <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>   <span class="k">return</span> <span class="nx">vm</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>But we still have one problem: how can we avoid the headaches when our server model changes? We <em>still</em> need to update our TS models manually.</p>

<h2>Enter Typewriter, stage right</h2>

<p><a href="http://frhagn.github.io/Typewriter/index.html">Typewriter</a> is a Visual Studio extension that does one thing and does it well: it lets you create <strong>Typescript Template</strong> files. These are <em>basically</em> T4 templates but they&rsquo;re abstracted to the point where it&rsquo;s actually <em>easy</em> to use (sorry T4). When you save your C# files, Typewriter reflects over them and will run the template and generate corresponding Typescript files. This lets you do simple things like mirror types to crazy things like&hellip; generate an entire AJAX web service.</p>

<p>So, using Typewriter, what would the template file look like to mirror our models?</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">namespace</span> <span class="nx">TypewriterBlogPost</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">$Classes</span><span class="p">(</span><span class="nx">TypewriterBlogPost</span><span class="p">.</span><span class="nx">Models</span><span class="p">.</span><span class="o">*</span><span class="p">)[</span>
</span><span class='line'>    <span class="cm">/**</span>
</span><span class='line'><span class="cm">     * Interface for: $FullName</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="kr">export</span> <span class="kr">interface</span> <span class="nx">$Name</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">$Properties</span><span class="p">[</span>
</span><span class='line'>        <span class="nx">$name</span><span class="o">:</span> <span class="nx">$Type</span><span class="p">;]</span>
</span><span class='line'>    <span class="p">}]</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The syntax of the template file is pretty straightforward, as <a href="http://frhagn.github.io/Typewriter/pages/getting-started.html">explained in the documentation</a>. Let&rsquo;s walk through it.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">$Classes</span><span class="p">(</span><span class="nx">TypewriterBlogPost</span><span class="p">.</span><span class="nx">Models</span><span class="p">.</span><span class="o">*</span><span class="p">)[</span>
</span></code></pre></td></tr></table></div></figure>


<p>The <code>Classes</code> keyword tells Typewriter to search for all public classes in a file. In parenthesis, you can filter classes by FullName using wildcard syntax. Typewriter also supports Lambda functions to filter by a predicate:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">$Classes</span><span class="p">(</span><span class="nx">x</span> <span class="o">=&gt;</span> <span class="nx">x</span><span class="p">.</span><span class="nx">FullName</span><span class="p">.</span><span class="nx">Length</span> <span class="o">&gt;</span> <span class="mi">50</span><span class="p">)[</span>
</span></code></pre></td></tr></table></div></figure>


<p>The open square bracket indicates a repeated block of code of Typescript. We declare an interface since we want to add type safety, not an implementation (although you could, which you&rsquo;ll see next!). You can append another square pair for a separator string if there are > 1 items that match (i.e. multiple classes in a file, multiple properties, multiple methods).</p>

<p>Next, we list the properties using the same syntax. By the way, Typewriter has full Intellisense for all these keywords and variable names.</p>

<p><img src="https://cloud.githubusercontent.com/assets/563819/12796507/baabed5c-ca84-11e5-99bf-2079d85dabf0.png" alt="Intellisense" /></p>

<h2>Customize Knockout View Models</h2>

<p>Now that we have our models reflected and auto-syncing with our client-side code, we can do some extra fun stuff to <em>automatically generate Knockout view models.</em></p>

<p>The goal here is to auto-generate a base view model that we can then extend with custom methods, properties, and computed observables.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">$</span><span class="p">{</span>
</span><span class='line'>    <span class="nx">string</span> <span class="nx">KnockoutType</span><span class="p">(</span><span class="nx">Property</span> <span class="nx">p</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="nx">p</span><span class="p">.</span><span class="nx">Type</span><span class="p">.</span><span class="nx">IsEnumerable</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="nx">p</span><span class="p">.</span><span class="nx">Type</span><span class="p">.</span><span class="nx">Name</span><span class="p">.</span><span class="nx">TrimEnd</span><span class="p">(</span><span class="s1">&#39;[&#39;</span><span class="p">,</span><span class="s1">&#39;]&#39;</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">return</span> <span class="nx">p</span><span class="p">.</span><span class="nx">Type</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">string</span> <span class="nx">KnockoutValue</span><span class="p">(</span><span class="nx">Property</span> <span class="nx">property</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">type</span> <span class="o">=</span> <span class="nx">KnockoutType</span><span class="p">(</span><span class="nx">property</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="nx">IsEnumerableViewModel</span><span class="p">(</span><span class="nx">property</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="nx">$</span><span class="s2">&quot;ko.observableArray&lt;Knockout{type}&gt;([])&quot;</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="nx">property</span><span class="p">.</span><span class="nx">Type</span><span class="p">.</span><span class="nx">IsEnumerable</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="nx">$</span><span class="s2">&quot;ko.observableArray&lt;{type}&gt;([])&quot;</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">return</span> <span class="nx">$</span><span class="s2">&quot;ko.observable&lt;{type}&gt;()&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">bool</span> <span class="nx">IsEnumerableViewModel</span><span class="p">(</span><span class="nx">Property</span> <span class="nx">p</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">string</span> <span class="nx">type</span> <span class="o">=</span> <span class="nx">KnockoutType</span><span class="p">(</span><span class="nx">p</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">return</span> <span class="nx">p</span><span class="p">.</span><span class="nx">Type</span><span class="p">.</span><span class="nx">IsEnumerable</span> <span class="o">&amp;&amp;</span> <span class="nx">type</span><span class="p">.</span><span class="nx">EndsWith</span><span class="p">(</span><span class="s2">&quot;ViewModel&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="nx">namespace</span> <span class="nx">TypewriterBlogPost</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">$Classes</span><span class="p">(</span><span class="o">*</span><span class="nx">ViewModel</span><span class="p">)[</span>
</span><span class='line'>    <span class="cm">/**</span>
</span><span class='line'><span class="cm">     * Interface for: $FullName</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="kr">export</span> <span class="kr">interface</span> <span class="nx">$Name</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">$Properties</span><span class="p">[</span>
</span><span class='line'>        <span class="nx">$name</span><span class="o">:</span> <span class="nx">$Type</span><span class="p">;]</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/**</span>
</span><span class='line'><span class="cm">     * Knockout base view model for $FullName</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="kr">export</span> <span class="kr">class</span> <span class="nx">Knockout$Name</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">$Properties</span><span class="p">[</span>
</span><span class='line'>        <span class="kr">public</span> <span class="nx">$name</span> <span class="o">=</span> <span class="nx">$KnockoutValue</span><span class="p">;]</span>
</span><span class='line'>
</span><span class='line'>        <span class="nx">constructor</span><span class="p">(</span><span class="nx">model</span><span class="o">:</span> <span class="nx">$Name</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">this</span><span class="p">.</span><span class="nx">map</span><span class="p">(</span><span class="nx">model</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="cm">/**</span>
</span><span class='line'><span class="cm">         * Map $Name model to Knockout view model</span>
</span><span class='line'><span class="cm">         */</span>
</span><span class='line'>        <span class="kr">public</span> <span class="nx">map</span><span class="p">(</span><span class="nx">model</span><span class="o">:</span> <span class="nx">$Name</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">$Properties</span><span class="p">(</span><span class="nx">x</span> <span class="o">=&gt;</span> <span class="o">!</span><span class="nx">IsEnumerableViewModel</span><span class="p">(</span><span class="nx">x</span><span class="p">))[</span>
</span><span class='line'>            <span class="k">this</span><span class="p">.</span><span class="nx">$name</span><span class="p">(</span><span class="nx">model</span><span class="p">.</span><span class="nx">$name</span><span class="p">);]</span>
</span><span class='line'>            <span class="nx">$Properties</span><span class="p">(</span><span class="nx">x</span> <span class="o">=&gt;</span> <span class="nx">IsEnumerableViewModel</span><span class="p">(</span><span class="nx">x</span><span class="p">))[</span>
</span><span class='line'>            <span class="k">this</span><span class="p">.</span><span class="nx">$name</span><span class="p">(</span><span class="nx">model</span><span class="p">.</span><span class="nx">$name</span><span class="p">.</span><span class="nx">map</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">map$Name</span><span class="p">));]</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="nx">$Properties</span><span class="p">(</span><span class="nx">x</span> <span class="o">=&gt;</span> <span class="nx">IsEnumerableViewModel</span><span class="p">(</span><span class="nx">x</span><span class="p">))[</span>
</span><span class='line'>        <span class="cm">/**</span>
</span><span class='line'><span class="cm">         * Map $KnockoutType equivalent Knockout view model. Override to customize.</span>
</span><span class='line'><span class="cm">         */</span>
</span><span class='line'>        <span class="kr">public</span> <span class="nx">map$Name</span><span class="p">(</span><span class="nx">model</span><span class="o">:</span> <span class="nx">$KnockoutType</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="k">new</span> <span class="nx">Knockout$KnockoutType</span><span class="p">(</span><span class="nx">model</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}]</span>
</span><span class='line'>
</span><span class='line'>        <span class="cm">/**</span>
</span><span class='line'><span class="cm">         * Returns a plain JSON object with current model properties</span>
</span><span class='line'><span class="cm">         */</span>
</span><span class='line'>        <span class="kr">public</span> <span class="nx">getModel</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="p">{</span>
</span><span class='line'>                <span class="nx">$Properties</span><span class="p">(</span><span class="nx">x</span> <span class="o">=&gt;</span> <span class="o">!</span><span class="nx">IsEnumerableViewModel</span><span class="p">(</span><span class="nx">x</span><span class="p">))[</span>
</span><span class='line'>                <span class="nx">$name</span><span class="o">:</span> <span class="k">this</span><span class="p">.</span><span class="nx">$name</span><span class="p">(),]</span>
</span><span class='line'>                <span class="nx">$Properties</span><span class="p">(</span><span class="nx">x</span> <span class="o">=&gt;</span> <span class="nx">IsEnumerableViewModel</span><span class="p">(</span><span class="nx">x</span><span class="p">))[</span>
</span><span class='line'>                <span class="nx">$name</span><span class="o">:</span> <span class="k">this</span><span class="p">.</span><span class="nx">$name</span><span class="p">().</span><span class="nx">map</span><span class="p">(</span><span class="nx">x</span> <span class="o">=&gt;</span> <span class="nx">x</span><span class="p">.</span><span class="nx">getModel</span><span class="p">())][,]</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}]</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Oh man! This one&rsquo;s a doozy. All we&rsquo;re really doing is ensuring we recursively map KO view models for collections (we ignore non-ViewModels). We also added a couple convenient helper methods like <code>getModel()</code> that returns a JSON object with the current KO model values. <code>map$Name</code> allows us to customize how we map each collection, for example, to override what view model to use (such as a custom view model).</p>

<p>Typewriter allows you to create &ldquo;helper&rdquo; functions that you can then use in the template. We created ones for parsing out the Knockout types (trimming square brackets).</p>

<p>You might ask why prepend the name with <code>Knockout</code>? So that it won&rsquo;t conflict with the interfaces named after the view models. Since we want to pass in JSON from the server, we still need an interface that represents the server-side view model.</p>

<p>Here&rsquo;s an example of what this template will generate for <code>TaskListViewModel</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">namespace</span> <span class="nx">TypewriterBlogPost</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/**</span>
</span><span class='line'><span class="cm">     * Interface for: TypewriterBlogPost.ViewModels.TaskListViewModel</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="kr">export</span> <span class="kr">interface</span> <span class="nx">TaskListViewModel</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>        <span class="nx">id</span><span class="o">:</span> <span class="nx">number</span><span class="p">;</span>
</span><span class='line'>        <span class="nx">name</span><span class="o">:</span> <span class="nx">string</span><span class="p">;</span>
</span><span class='line'>        <span class="nx">author</span><span class="o">:</span> <span class="nx">string</span><span class="p">;</span>
</span><span class='line'>        <span class="nx">created</span><span class="o">:</span> <span class="nb">Date</span><span class="p">;</span>
</span><span class='line'>        <span class="nx">tasks</span><span class="o">:</span> <span class="nx">TaskViewModel</span><span class="p">[];</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/**</span>
</span><span class='line'><span class="cm">     * Knockout base view model for TypewriterBlogPost.ViewModels.TaskListViewModel</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="kr">export</span> <span class="kr">class</span> <span class="nx">KnockoutTaskListViewModel</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>        <span class="kr">public</span> <span class="nx">id</span> <span class="o">=</span> <span class="nx">ko</span><span class="p">.</span><span class="nx">observable</span><span class="o">&lt;</span><span class="nx">number</span><span class="o">&gt;</span><span class="p">();</span>
</span><span class='line'>        <span class="kr">public</span> <span class="nx">name</span> <span class="o">=</span> <span class="nx">ko</span><span class="p">.</span><span class="nx">observable</span><span class="o">&lt;</span><span class="nx">string</span><span class="o">&gt;</span><span class="p">();</span>
</span><span class='line'>        <span class="kr">public</span> <span class="nx">author</span> <span class="o">=</span> <span class="nx">ko</span><span class="p">.</span><span class="nx">observable</span><span class="o">&lt;</span><span class="nx">string</span><span class="o">&gt;</span><span class="p">();</span>
</span><span class='line'>        <span class="kr">public</span> <span class="nx">created</span> <span class="o">=</span> <span class="nx">ko</span><span class="p">.</span><span class="nx">observable</span><span class="o">&lt;</span><span class="nb">Date</span><span class="o">&gt;</span><span class="p">();</span>
</span><span class='line'>        <span class="kr">public</span> <span class="nx">tasks</span> <span class="o">=</span> <span class="nx">ko</span><span class="p">.</span><span class="nx">observableArray</span><span class="o">&lt;</span><span class="nx">KnockoutTaskViewModel</span><span class="o">&gt;</span><span class="p">([]);</span>
</span><span class='line'>
</span><span class='line'>        <span class="nx">constructor</span><span class="p">(</span><span class="nx">model</span><span class="o">:</span> <span class="nx">TaskListViewModel</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">this</span><span class="p">.</span><span class="nx">map</span><span class="p">(</span><span class="nx">model</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="cm">/**</span>
</span><span class='line'><span class="cm">         * Map TaskListViewModel model to Knockout view model</span>
</span><span class='line'><span class="cm">         */</span>
</span><span class='line'>        <span class="kr">public</span> <span class="nx">map</span><span class="p">(</span><span class="nx">model</span><span class="o">:</span> <span class="nx">TaskListViewModel</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>            <span class="k">this</span><span class="p">.</span><span class="nx">id</span><span class="p">(</span><span class="nx">model</span><span class="p">.</span><span class="nx">id</span><span class="p">);</span>
</span><span class='line'>            <span class="k">this</span><span class="p">.</span><span class="nx">name</span><span class="p">(</span><span class="nx">model</span><span class="p">.</span><span class="nx">name</span><span class="p">);</span>
</span><span class='line'>            <span class="k">this</span><span class="p">.</span><span class="nx">author</span><span class="p">(</span><span class="nx">model</span><span class="p">.</span><span class="nx">author</span><span class="p">);</span>
</span><span class='line'>            <span class="k">this</span><span class="p">.</span><span class="nx">created</span><span class="p">(</span><span class="nx">model</span><span class="p">.</span><span class="nx">created</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>            <span class="k">this</span><span class="p">.</span><span class="nx">tasks</span><span class="p">(</span><span class="nx">model</span><span class="p">.</span><span class="nx">tasks</span><span class="p">.</span><span class="nx">map</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">mapTasks</span><span class="p">));</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>        <span class="cm">/**</span>
</span><span class='line'><span class="cm">         * Map TaskViewModel equivalent Knockout view model. Override to customize.</span>
</span><span class='line'><span class="cm">         */</span>
</span><span class='line'>        <span class="kr">public</span> <span class="nx">mapTasks</span><span class="p">(</span><span class="nx">model</span><span class="o">:</span> <span class="nx">TaskViewModel</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="k">new</span> <span class="nx">KnockoutTaskViewModel</span><span class="p">(</span><span class="nx">model</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="cm">/**</span>
</span><span class='line'><span class="cm">         * Returns a plain JSON object with current model properties</span>
</span><span class='line'><span class="cm">         */</span>
</span><span class='line'>        <span class="kr">public</span> <span class="nx">getModel</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>                <span class="nx">id</span><span class="o">:</span> <span class="k">this</span><span class="p">.</span><span class="nx">id</span><span class="p">(),</span>
</span><span class='line'>                <span class="nx">name</span><span class="o">:</span> <span class="k">this</span><span class="p">.</span><span class="nx">name</span><span class="p">(),</span>
</span><span class='line'>                <span class="nx">author</span><span class="o">:</span> <span class="k">this</span><span class="p">.</span><span class="nx">author</span><span class="p">(),</span>
</span><span class='line'>                <span class="nx">created</span><span class="o">:</span> <span class="k">this</span><span class="p">.</span><span class="nx">created</span><span class="p">(),</span>
</span><span class='line'>
</span><span class='line'>                <span class="nx">tasks</span><span class="o">:</span> <span class="k">this</span><span class="p">.</span><span class="nx">tasks</span><span class="p">().</span><span class="nx">map</span><span class="p">(</span><span class="nx">x</span> <span class="o">=&gt;</span> <span class="nx">x</span><span class="p">.</span><span class="nx">getModel</span><span class="p">())</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Awesome? You bet! So how would I use this in practice? I would just <code>extend</code> the auto-generated code with my custom code!</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">namespace</span> <span class="nx">TypewriterBlogPost</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kr">export</span> <span class="kr">class</span> <span class="nx">ViewModel</span> <span class="kr">extends</span> <span class="nx">KnockoutTaskListViewModel</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>        <span class="nx">constructor</span><span class="p">(</span><span class="nx">model</span><span class="o">:</span> <span class="nx">TaskListViewModel</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="kr">super</span><span class="p">(</span><span class="nx">model</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="nx">addTask</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>            <span class="c1">// todo call service</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// apply KO bindings and use JSON object from server</span>
</span><span class='line'>    <span class="nx">$</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="nx">ko</span><span class="p">.</span><span class="nx">applyBindings</span><span class="p">(</span><span class="k">new</span> <span class="nx">ViewModel</span><span class="p">((</span><span class="o">&lt;</span><span class="nx">any</span><span class="o">&gt;</span><span class="nb">window</span><span class="p">).</span><span class="nx">viewModel</span><span class="p">)));</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Strongly-typing your API controllers</h2>

<p>Now that we&rsquo;ve got our view models squared away, how can we leverage Typewriter to help us with our Web API methods? Well, Typewriter comes with an awesome Web API extension that makes it easy to generate strongly-typed service classes.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">$</span><span class="p">{</span>
</span><span class='line'>    <span class="nx">using</span> <span class="nx">Typewriter</span><span class="p">.</span><span class="nx">Extensions</span><span class="p">.</span><span class="nx">WebApi</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">string</span> <span class="nx">ReturnType</span><span class="p">(</span><span class="nx">Method</span> <span class="nx">m</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">m</span><span class="p">.</span><span class="nx">Type</span><span class="p">.</span><span class="nx">Name</span> <span class="o">==</span> <span class="s2">&quot;IHttpActionResult&quot;</span> <span class="o">?</span> <span class="s2">&quot;void&quot;</span> <span class="o">:</span> <span class="nx">m</span><span class="p">.</span><span class="nx">Type</span><span class="p">.</span><span class="nx">Name</span><span class="p">;</span>
</span><span class='line'>    <span class="nx">string</span> <span class="nx">ServiceName</span><span class="p">(</span><span class="nx">Class</span> <span class="nx">c</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">c</span><span class="p">.</span><span class="nx">Name</span><span class="p">.</span><span class="nx">Replace</span><span class="p">(</span><span class="s2">&quot;Controller&quot;</span><span class="p">,</span> <span class="s2">&quot;Service&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">string</span> <span class="nx">ParentServiceName</span><span class="p">(</span><span class="nx">Method</span> <span class="nx">m</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">ServiceName</span><span class="p">((</span><span class="nx">Class</span><span class="p">)</span><span class="nx">m</span><span class="p">.</span><span class="nx">Parent</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nx">module</span> <span class="nx">TypewriterBlogPost</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">$Classes</span><span class="p">(</span><span class="o">:</span><span class="nx">ApiController</span><span class="p">)[</span>
</span><span class='line'>    <span class="kr">export</span> <span class="kr">class</span> <span class="nx">$ServiceName</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">$Methods</span><span class="p">[</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// $HttpMethod: $Url</span>
</span><span class='line'>        <span class="kr">public</span> <span class="kr">static</span> <span class="nx">Route$Name</span> <span class="o">=</span> <span class="p">(</span><span class="nx">$Parameters</span><span class="p">(</span><span class="nx">p</span> <span class="o">=&gt;</span> <span class="nx">p</span><span class="p">.</span><span class="nx">Type</span><span class="p">.</span><span class="nx">IsPrimitive</span><span class="p">)[</span><span class="nx">$name</span><span class="o">:</span> <span class="nx">$Type</span><span class="p">][,</span> <span class="p">])</span> <span class="o">=&gt;</span> <span class="err">`</span><span class="nx">$Url</span><span class="err">`</span><span class="p">;</span>
</span><span class='line'>        <span class="kr">public</span> <span class="kr">static</span> <span class="nx">$name</span><span class="p">(</span><span class="nx">$Parameters</span><span class="p">[</span><span class="nx">$name</span><span class="o">:</span> <span class="nx">$Type</span><span class="p">][,</span> <span class="p">])</span><span class="o">:</span> <span class="nx">JQueryPromise</span><span class="o">&lt;</span><span class="nx">$ReturnType</span><span class="o">&gt;</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="nx">$</span><span class="p">.</span><span class="nx">ajax</span><span class="p">({</span>
</span><span class='line'>                <span class="nx">url</span><span class="o">:</span> <span class="nx">$ParentServiceName</span><span class="p">.</span><span class="nx">Route$Name</span><span class="p">(</span><span class="nx">$Parameters</span><span class="p">(</span><span class="nx">p</span> <span class="o">=&gt;</span> <span class="nx">p</span><span class="p">.</span><span class="nx">Type</span><span class="p">.</span><span class="nx">IsPrimitive</span><span class="p">)[</span><span class="nx">$name</span><span class="p">][,</span> <span class="p">]),</span>
</span><span class='line'>                <span class="nx">type</span><span class="o">:</span> <span class="s1">&#39;$HttpMethod&#39;</span><span class="p">,</span>
</span><span class='line'>                <span class="nx">data</span><span class="o">:</span> <span class="nx">$RequestData</span>
</span><span class='line'>            <span class="p">});</span>
</span><span class='line'>        <span class="p">}]</span>
</span><span class='line'>    <span class="p">}]</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>So, let&rsquo;s break it down:</p>

<ol>
<li>Include the WebApi extensions</li>
<li>Create some helper methods to rename the controllers and provide the right return type</li>
<li>For all classes that inherit <code>ApiController</code>

<ol>
<li>Create a service class</li>
<li>For each method:

<ol>
<li>Create a route helper function that returns a URL formatted with the right parameters</li>
<li>Create a JQuery AJAX call that sends a request to the right URL and includes the right request information</li>
</ol>
</li>
</ol>
</li>
</ol>


<p>The <code>TasksController</code> we have defined looks like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">using</span> <span class="nn">System</span><span class="p">;</span>
</span><span class='line'><span class="k">using</span> <span class="nn">System.Collections.Generic</span><span class="p">;</span>
</span><span class='line'><span class="k">using</span> <span class="nn">System.Linq</span><span class="p">;</span>
</span><span class='line'><span class="k">using</span> <span class="nn">System.Net</span><span class="p">;</span>
</span><span class='line'><span class="k">using</span> <span class="nn">System.Net.Http</span><span class="p">;</span>
</span><span class='line'><span class="k">using</span> <span class="nn">System.Web.Http</span><span class="p">;</span>
</span><span class='line'><span class="k">using</span> <span class="nn">TypewriterBlogPost.Models</span><span class="p">;</span>
</span><span class='line'><span class="k">using</span> <span class="nn">TypewriterBlogPost.ViewModels</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">namespace</span> <span class="nn">TypewriterBlogPost.Controllers</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">class</span> <span class="nc">TasksController</span> <span class="p">:</span> <span class="n">ApiController</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">private</span> <span class="k">static</span> <span class="n">IList</span><span class="p">&lt;</span><span class="n">TaskListViewModel</span><span class="p">&gt;</span> <span class="n">_taskLists</span> <span class="p">=</span> <span class="k">new</span> <span class="n">List</span><span class="p">&lt;</span><span class="n">TaskListViewModel</span><span class="p">&gt;()</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="k">new</span> <span class="nf">TaskListViewModel</span><span class="p">()</span>
</span><span class='line'>            <span class="p">{</span>
</span><span class='line'>                <span class="n">Name</span> <span class="p">=</span> <span class="s">&quot;Todos&quot;</span><span class="p">,</span>
</span><span class='line'>                <span class="n">Author</span> <span class="p">=</span> <span class="s">&quot;Kamranicus&quot;</span><span class="p">,</span>
</span><span class='line'>                <span class="n">Created</span> <span class="p">=</span> <span class="n">DateTime</span><span class="p">.</span><span class="n">Now</span><span class="p">,</span>
</span><span class='line'>                <span class="n">Id</span> <span class="p">=</span> <span class="m">1</span><span class="p">,</span>
</span><span class='line'>                <span class="n">Tasks</span> <span class="p">=</span>
</span><span class='line'>                <span class="p">{</span>
</span><span class='line'>                    <span class="k">new</span> <span class="nf">TaskViewModel</span><span class="p">()</span> <span class="p">{</span> <span class="n">Task</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Task</span><span class="p">()</span> <span class="p">{</span> <span class="n">Text</span> <span class="p">=</span> <span class="s">&quot;Get milk from store&quot;</span> <span class="p">}</span> <span class="p">},</span>
</span><span class='line'>                    <span class="k">new</span> <span class="nf">TaskViewModel</span><span class="p">()</span> <span class="p">{</span> <span class="n">Task</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Task</span><span class="p">()</span> <span class="p">{</span> <span class="n">Text</span> <span class="p">=</span> <span class="s">&quot;Get deli meat&quot;</span><span class="p">,</span> <span class="n">Done</span> <span class="p">=</span> <span class="k">true</span>  <span class="p">}</span> <span class="p">}</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">public</span> <span class="n">IEnumerable</span><span class="p">&lt;</span><span class="n">TaskListViewModel</span><span class="p">&gt;</span> <span class="n">GetAll</span><span class="p">()</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">_taskLists</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">public</span> <span class="n">TaskListViewModel</span> <span class="nf">GetById</span><span class="p">(</span><span class="kt">int</span> <span class="n">id</span><span class="p">)</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">_taskLists</span><span class="p">.</span><span class="n">First</span><span class="p">(</span><span class="n">t</span> <span class="p">=&gt;</span> <span class="n">t</span><span class="p">.</span><span class="n">Id</span> <span class="p">==</span> <span class="n">id</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">public</span> <span class="k">void</span> <span class="nf">Post</span><span class="p">(</span><span class="kt">int</span> <span class="n">id</span><span class="p">,</span> <span class="n">Task</span> <span class="n">task</span><span class="p">)</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="kt">var</span> <span class="n">t</span> <span class="p">=</span> <span class="n">GetById</span><span class="p">(</span><span class="n">id</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>            <span class="n">t</span><span class="p">.</span><span class="n">Tasks</span><span class="p">.</span><span class="n">Add</span><span class="p">(</span><span class="k">new</span> <span class="n">TaskViewModel</span><span class="p">()</span> <span class="p">{</span> <span class="n">Task</span> <span class="p">=</span> <span class="n">task</span> <span class="p">});</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>A few things to note:</p>

<ol>
<li>To avoid name collisions, I use <code>getAll</code> and <code>getById</code></li>
<li>To use with Typewriter, I return simple types&mdash;using <code>HttpResponseMessage</code> won&rsquo;t allow you to strongly-type the service. However you can still be flexible with errors by throwing <code>HttpExceptions</code> and Web API will serialize your response.</li>
<li>This is terrible code and is for illustrative purposes only</li>
</ol>


<p>What gets generated is what you&rsquo;d expect:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">module</span> <span class="nx">TypewriterBlogPost</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kr">export</span> <span class="kr">class</span> <span class="nx">TasksService</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// get: api/tasks/</span>
</span><span class='line'>        <span class="kr">public</span> <span class="kr">static</span> <span class="nx">RouteGetAll</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="err">`</span><span class="nx">api</span><span class="o">/</span><span class="nx">tasks</span><span class="o">/</span><span class="err">`</span><span class="p">;</span>
</span><span class='line'>        <span class="kr">public</span> <span class="kr">static</span> <span class="nx">getAll</span><span class="p">()</span><span class="o">:</span> <span class="nx">JQueryPromise</span><span class="o">&lt;</span><span class="nx">TaskListViewModel</span><span class="p">[]</span><span class="o">&gt;</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="nx">$</span><span class="p">.</span><span class="nx">ajax</span><span class="p">({</span>
</span><span class='line'>                <span class="nx">url</span><span class="o">:</span> <span class="nx">TasksService</span><span class="p">.</span><span class="nx">RouteGetAll</span><span class="p">(),</span>
</span><span class='line'>                <span class="nx">type</span><span class="o">:</span> <span class="s1">&#39;get&#39;</span><span class="p">,</span>
</span><span class='line'>                <span class="nx">data</span><span class="o">:</span> <span class="kc">null</span>
</span><span class='line'>            <span class="p">});</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// get: api/tasks/${id}</span>
</span><span class='line'>        <span class="kr">public</span> <span class="kr">static</span> <span class="nx">RouteGetById</span> <span class="o">=</span> <span class="p">(</span><span class="nx">id</span><span class="o">:</span> <span class="nx">number</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="err">`</span><span class="nx">api</span><span class="o">/</span><span class="nx">tasks</span><span class="o">/</span><span class="nx">$</span><span class="p">{</span><span class="nx">id</span><span class="p">}</span><span class="err">`</span><span class="p">;</span>
</span><span class='line'>        <span class="kr">public</span> <span class="kr">static</span> <span class="nx">getById</span><span class="p">(</span><span class="nx">id</span><span class="o">:</span> <span class="nx">number</span><span class="p">)</span><span class="o">:</span> <span class="nx">JQueryPromise</span><span class="o">&lt;</span><span class="nx">TaskListViewModel</span><span class="o">&gt;</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="nx">$</span><span class="p">.</span><span class="nx">ajax</span><span class="p">({</span>
</span><span class='line'>                <span class="nx">url</span><span class="o">:</span> <span class="nx">TasksService</span><span class="p">.</span><span class="nx">RouteGetById</span><span class="p">(</span><span class="nx">id</span><span class="p">),</span>
</span><span class='line'>                <span class="nx">type</span><span class="o">:</span> <span class="s1">&#39;get&#39;</span><span class="p">,</span>
</span><span class='line'>                <span class="nx">data</span><span class="o">:</span> <span class="kc">null</span>
</span><span class='line'>            <span class="p">});</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// post: api/tasks/${id}</span>
</span><span class='line'>        <span class="kr">public</span> <span class="kr">static</span> <span class="nx">RoutePost</span> <span class="o">=</span> <span class="p">(</span><span class="nx">id</span><span class="o">:</span> <span class="nx">number</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="err">`</span><span class="nx">api</span><span class="o">/</span><span class="nx">tasks</span><span class="o">/</span><span class="nx">$</span><span class="p">{</span><span class="nx">id</span><span class="p">}</span><span class="err">`</span><span class="p">;</span>
</span><span class='line'>        <span class="kr">public</span> <span class="kr">static</span> <span class="nx">post</span><span class="p">(</span><span class="nx">id</span><span class="o">:</span> <span class="nx">number</span><span class="p">,</span> <span class="nx">task</span><span class="o">:</span> <span class="nx">Task</span><span class="p">)</span><span class="o">:</span> <span class="nx">JQueryPromise</span><span class="o">&lt;</span><span class="k">void</span><span class="o">&gt;</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="nx">$</span><span class="p">.</span><span class="nx">ajax</span><span class="p">({</span>
</span><span class='line'>                <span class="nx">url</span><span class="o">:</span> <span class="nx">TasksService</span><span class="p">.</span><span class="nx">RoutePost</span><span class="p">(</span><span class="nx">id</span><span class="p">),</span>
</span><span class='line'>                <span class="nx">type</span><span class="o">:</span> <span class="s1">&#39;post&#39;</span><span class="p">,</span>
</span><span class='line'>                <span class="nx">data</span><span class="o">:</span> <span class="nx">task</span>
</span><span class='line'>            <span class="p">});</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Man, <em>how sexy is that?</em> Not only have we ensured our models and view models stay in-sync, our API is also reflected on the client-side so we don&rsquo;t need to worry about hard-coding routes!</p>

<p>Now we can implement our view model method properly:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">addTask</span><span class="p">(</span><span class="nx">id</span><span class="o">:</span> <span class="nx">number</span><span class="p">,</span> <span class="nx">task</span><span class="o">:</span> <span class="nx">Task</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">TasksService</span><span class="p">.</span><span class="nx">post</span><span class="p">(</span><span class="nx">id</span><span class="p">,</span> <span class="nx">task</span><span class="p">).</span><span class="nx">then</span><span class="p">(</span>
</span><span class='line'>    <span class="p">()</span> <span class="o">=&gt;</span> <span class="nx">toastr</span><span class="p">.</span><span class="nx">success</span><span class="p">(</span><span class="s2">&quot;Posted new task successfully&quot;</span><span class="p">));</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Obviously there&rsquo;s much more you can do such as automatically handling errors, customizing options, creating Angular services, etc.</p>

<h2>So, that&rsquo;s why Typewriter is awesome</h2>

<p>I&rsquo;ve walked through a simple use case of why Typewriter is super useful&mdash;as a developer I&rsquo;m always interested in ways to make my life easier and not worrying about differences between my client and server is always helpful. That&rsquo;s why I love TypeScript and why I love Typewriter. Hope you found this helpful!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Planet Wars AI Competition With C# and Excalibur.js]]></title>
    <link href="http://kamranicus.com/blog/2016/01/25/planet-wars-ai-competition-excaliburjs-csharp/"/>
    <updated>2016-01-25T18:30:00+00:00</updated>
    <id>http://kamranicus.com/blog/2016/01/25/planet-wars-ai-competition-excaliburjs-csharp</id>
    <content type="html"><![CDATA[<p><img src="https://zippy.gfycat.com/BraveBlushingImpala.gif" alt="Planet Wars" /></p>

<p>This past weekend <a href="http://twitter.com/erikonarheim">Erik</a> and I built out a <a href="https://github.com/eonarheim/planet-wars-competition">Planet Wars</a> server (written in C#) and an <a href="http://excaliburjs.com">Excalibur.js</a>-powered visualization (written in TypeScript). Planet Wars is an AI competition where you build an AI that competes against another player to control a solar system. A map consists of several planets that have different growth rates and an initial number of ships. You have to send out a &ldquo;fleet&rdquo; of ships to colonize other planets and the player who controls the most planets and has destroyed their opponent&rsquo;s ships wins the game.</p>

<p>At work we are hosting our 6th Code Camp and recently we started hosting an AI competition internally. You can find past competition agents for <a href="https://github.com/eonarheim/AntAICompetition">Ants</a> and <a href="https://github.com/eonarheim/BellTowerEscape">Elevators</a>, for example.</p>

<p>The <a href="https://github.com/eonarheim/planet-wars-competition/tree/master/PlanetWars/Scripts/game">visualization for Planet Wars</a> is fairly simple, made even simpler using the power of <a href="http://excaliburjs.com">Excalibur.js</a>, the engine we work on during our spare time. We basically just use an Excalibur timer to query the status of the game state and update the state of all the actors in the game. For moving the fleets, we just use the <a href="http://excaliburjs.com/docs/api/edge/classes/ex.actioncontext.html">Actor Action API</a>.</p>

<p>For the <a href="https://github.com/eonarheim/planet-wars-competition/tree/master/PlanetWars/Server">game server</a>, we are using a <a href="https://github.com/eonarheim/planet-wars-competition/blob/master/PlanetWars/Server/HighFrequencyTimer.cs">HighFrequencyTimer</a> to run a 30fps server and then clients just send commands via HTTP, so any kind of agent will work like Python, Perl, PowerShell, or whatever! Anything that speaks HTTP can be a client. The server runs in the context of a website so we can easily query the state using a singleton <code>GameManager</code>. This wouldn&rsquo;t work in a load-balanced environment but it doesn&rsquo;t matter since people develop agents locally and we run the simulations on one server at high-speed to produce the results. If you backed the server with a data store, you could replay games but right now there&rsquo;s only an in-memory implementation.</p>

<p>To keep the server and client models in-sync, we use <a href="http://frhagn.github.io/Typewriter/index.html">Typewriter for Visual Studio</a> which is <strong>amazing</strong> and super useful not just for syncing client/server but also generating web clients, interfaces, etc. from C# code. I plan to write a separate post on some Typewriter tips for Knockout.js and Web API.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[2015: A Year in Review]]></title>
    <link href="http://kamranicus.com/blog/2016/01/05/year-in-review/"/>
    <updated>2016-01-05T01:30:00+00:00</updated>
    <id>http://kamranicus.com/blog/2016/01/05/year-in-review</id>
    <content type="html"><![CDATA[<p>2015 was a very eventful (and fulfilling) year for me and my wife. Let&rsquo;s break it down, shall we?</p>

<h2>Living abroad for 6 months</h2>

<p><img src="https://d262ilb51hltx0.cloudfront.net/max/2000/1*-h8wTj1iOSrHHtnGMxR60w.jpeg" alt="Bordeaux, France" /></p>

<p>By far the most impressive thing I did last year was to <a href="http://kamranicus.com/blog/2015/05/21/5-things-for-6-months-abroad/">take a 6 month sabbatical</a> and live abroad in France with my wife. Though I&rsquo;ve written about it previously, I left out the entire part where we chronicled our adventure in a series of publications on <a href="http://medium.com">Medium</a>. We kept it anonymous during the trip to avoid any potential issues but now that it&rsquo;s over, I will list the different publications so you can read back through what we did for 6 months (spoiler: we did <em>a lot</em>).</p>

<p>Just to be clear when you&rsquo;re reading, I am <strong>Vincent</strong> and my wife is <strong>Celeste.</strong></p>

<ul>
<li><a href="https://medium.com/visa-vis-a-guide">Visa-Vis: A Guide</a> &ndash; Prologue series of posts on steps to being able to live in France for 6 months</li>
<li><a href="https://medium.com/aix-squared">Aix Squared</a> &ndash; Dec 23, 2015-June 14, 2015 &ndash; General posts on food, cities, and living in France</li>
<li><a href="https://medium.com/aix-squared/rennes-france-d4957bf17d4e">Rennes</a>, <a href="https://medium.com/aix-squared/nantes-france-5c0aa9cf5ff">Nantes</a>, <a href="https://medium.com/aix-squared/bordeaux-france-c66f859826c9">Bordeaux</a> &ndash; April 24-30, 2015 &ndash; A tour of north/western France</li>
<li><a href="https://medium.com/aix-in-amsterdam">Aix in Amsterdam</a> &ndash; February 11-19, 2015</li>
<li><a href="https://medium.com/aix-in-marrakesh">Aix in Marrakesh</a> &ndash; March 10-16, 2015</li>
<li><a href="https://medium.com/aix-in-dublin">Aix in Dublin</a> &ndash; April 5-9, 2015</li>
<li><a href="https://medium.com/aix-in-oslo">Aix in Oslo</a> &ndash; April 9-13, 2015</li>
<li><a href="https://medium.com/aix-in-london">Aix in London</a> &ndash; May 12-16, 2015</li>
<li><a href="https://medium.com/aix-in-florence">Aix in Florence</a> &ndash; June 9-14, 2015</li>
</ul>


<p>It was an experience I&rsquo;ll never forget and one that probably won&rsquo;t be repeated anytime soon. My wife and I both felt it was the right time and that we&rsquo;d probably get little to no chance at doing something so crazy once we had kids and &ldquo;settled down.&rdquo; We still hope to continue traveling once a year or couple years, especially after an experience like that. One of my plans for 2016 is to compile all these posts into a book that we print and keep for us and our future children.</p>

<h2>New House</h2>

<p><img src="https://cloud.githubusercontent.com/assets/563819/12107000/cd7f12cc-b32a-11e5-852e-78b839331383.png" alt="Bay window" /></p>

<p>We weren&rsquo;t in a position to buy a house so soon after a 6 month sabbatical but we still thought it was best to move from apartment living to a real house, especially after living in a 400 sq ft space in France. We found a great place to rent in Minneapolis that&rsquo;s pretty close to both workplaces, friends, and family. We&rsquo;ve done a few things to it to make it more like home and we&rsquo;ve been really enjoying it so far and our landlord is superb. The photo above is our enhancement to the bay window. My brother-in-law built the spanning bench between the bookcases and I built the cushion. I removed the tall blinds that covered the window so we could open up the room and add extra seating. It turned out so good!</p>

<h2>New Dog</h2>

<p><img src="https://cloud.githubusercontent.com/assets/563819/12107029/1b61acac-b32b-11e5-9bee-3325f44374db.png" alt="Dogger" /></p>

<p>My wife has always wanted a dog ever since we moved into an apartment together&mdash;except our apartment complex never let us have dogs. We cat-sat (is that a word?) for 2 years for some friends and then they took her back down to Texas where they bought a house and she happily frolicks outside. In August (Dogust?) we went to the humane society and on pretty-much-a-whim took in a cute dog we named Rennes (after <a href="https://medium.com/aix-squared/rennes-france-d4957bf17d4e">one of our favorite French cities</a> we visited). She&rsquo;s a black lab and border collie mix. She&rsquo;s awesome even though she jumps the fence to chase squirrels (we&rsquo;re working on that). We love her a ton.</p>

<h2>Keep Track of My Games</h2>

<p><img src="http://41.media.tumblr.com/fe33ac3443fbfeab5b2e4da2c6fe170e/tumblr_inline_nyz1izCCVg1qlpzxk_500.png" alt="KTOMG" /></p>

<p>2015 marked the <a href="http://blog.keeptrackofmygames.com/post/124929587854/happy-4th-birthday-to-keep-track-of-my-games">4th year</a> that <a href="http://keeptrackofmygames.com">KTOMG</a> has been around since its humble beginnings and while I was abroad it gave me time to focus and finish a <a href="http://kamranicus.com/blog/2015/05/30/ktomg-update/">major rewrite of the codebase in May</a>. Since then I&rsquo;ve released <a href="http://blog.keeptrackofmygames.com/post/134750555276/updates-for-november-2015">public lists</a> and capping the year off with <a href="http://blog.keeptrackofmygames.com/post/135781123861/updates-for-december-2015">Steam syncing</a>, just to name a few features.</p>

<h2>Speaking</h2>

<iframe width="420" height="315" src="https://www.youtube.com/embed/kb7tvaBJeMs" frameborder="0" allowfullscreen></iframe>


<p>Even though I was abroad for 6 months, I still managed to give a talk this year at Twin Cities Code Camp 19: an update to my popular <a href="http://kamranicus.com/presentations/demystifying-typescript">Demystifying TypeScript</a> presentation. You can also find 2014&rsquo;s version <a href="https://www.youtube.com/watch?v=kb7tvaBJeMs">on YouTube</a>.</p>

<h2>Making Games</h2>

<p><img src="https://cloud.githubusercontent.com/assets/563819/12107063/7b1593c0-b32b-11e5-9148-0470e84acfb4.png" alt="Minotaur" /></p>

<p>In August, I participated in the <a href="http://ludumdare.com/compo/ludum-dare-33/">Ludum Dare 33</a> game jam where some friends and I created a minotaur hack-n-slash game, <a href="http://excaliburjs.com/ludum-33/">Crypt of the Minotaur</a> (<a href="https://github.com/excaliburjs/ludum-33">source</a>). I love participating in game jams and by extension, helping to contribute to the <a href="http://excaliburjs.com">Excalibur.js</a> game engine.</p>

<h2>Playing Games</h2>

<p>Somehow after all that I still managed to log hundreds of hours into my gaming habit. Since I added public lists to KTOMG, why don&rsquo;t you go take a look at my <a href="http://keeptrackofmygames.com/users/kamranicus/lists/11">Top 10 Played Games of 2015</a>? Yes, some of those came out in 2014 but I didn&rsquo;t play or finish them until this year. Being abroad, I managed to bring my laptop, 3DS, and PS4 so I played a lot of <a href="http://keeptrackofmygames.com/games/1931">Destiny</a>, finished the remastered <a href="http://keeptrackofmygames.com/games/394">Grim Fandango</a> and other PS4/3DS games. My laptop wasn&rsquo;t that great but I was able to still enjoy <a href="http://keeptrackofmygames.com/games/1267">Pillars of Eternity</a>, a throwback Baldur&rsquo;s Gate-style RPG. In November, I started playing <a href="http://keeptrackofmygames.com/games/145171">Fallout 4</a> and have since logged over 75 hours in it. It&rsquo;s definitely tough to juggle both hobbies: playing games and developing a site that helps manage those games. During time off, I usually try to mix my time between them to satisfy both needs and sticking to a monthly release cadence helps a lot to prioritize work.</p>

<h2>Work &amp; Friends</h2>

<p>My work has been going swimmingly, after my sabbatical I returned to work on a team with one of my best friends. Speaking of friends, I made more this year, fulfilling a goal I made at the start of 2015&mdash;not only abroad but also at home. Board game nights, Dungeon World sessions, and a Star Wars marathon are just some of the highlights of the fun stuff we&rsquo;ve done with our [awesome] circle of friends.</p>

<h2>Looking towards a new year</h2>

<p>Cheers to 2016, let&rsquo;s hope it&rsquo;s even bigger and better than 2015 and brings more happiness and joy to my life.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Influencing Your Kudu Deployment Through Git Commit Messages]]></title>
    <link href="http://kamranicus.com/blog/2015/12/11/kudu-deployment-flags-in-commit-messages/"/>
    <updated>2015-12-11T01:30:00+00:00</updated>
    <id>http://kamranicus.com/blog/2015/12/11/kudu-deployment-flags-in-commit-messages</id>
    <content type="html"><![CDATA[<p>If you&rsquo;re on Windows Azure and using continuous deployment through Git, you may not know you are using an open source platform called
<a href="https://github.com/projectkudu/kudu">Kudu</a> behind-the-scenes that performs your deployment. If this is the first time you&rsquo;ve heard of Kudu and you&rsquo;ve been
using Azure for awhile, it&rsquo;s time to <a href="https://github.com/projectkudu/kudu">get acquainted</a>. Kudu is amazing. It has a whole REST API that lets you manage
deployments, trigger builds, trigger webjobs, view processes, a command prompt, and a ton more.</p>

<p>You can get to your Kudu console by visiting</p>

<pre><code>https://&lt;yoursite&gt;.scm.azurewebsites.net
</code></pre>

<p>The <strong>.scm.</strong> part is the key, as that is where the Kudu site is hosted.</p>

<h2>Customizing Kudu deployments</h2>

<p>One of the other things it offers is a <a href="https://github.com/projectkudu/kudu/wiki/Custom-Deployment-Script">customized deployment script</a>. I&rsquo;ve customized mine because I have a test
project where I run automated tests during the build. This is useful since it&rsquo;ll fail the build if I make any changes
that break my tests and forces me to keep things up-to-date resulting in a higher quality codebase.</p>

<p>If you want to generate your own script, it&rsquo;s pretty easy. Just follow the steps <a href="https://github.com/projectkudu/kudu/wiki/Custom-Deployment-Script">outlined here</a>. For example, after
customizing my script here&rsquo;s what my section looks like to run my tests:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>:: 3. Build unit tests
</span><span class='line'>call :ExecuteCmd "%MSBUILD_PATH%" "%DEPLOYMENT_SOURCE%\src\Tests\Tests.csproj" /nologo /verbosity:m /t:Build /p:AutoParameterizationWebConfigConnectionStrings=false;Configuration=Release /p:SolutionDir="%DEPLOYMENT_SOURCE%\.\\" %SCM_BUILD_ARGS%
</span><span class='line'>
</span><span class='line'>IF !ERRORLEVEL! NEQ 0 goto error</span></code></pre></td></tr></table></div></figure>


<p>All I really did was copy step 2 in the script that builds my web project and just change the path to my tests project.</p>

<p>Finally, I run the tests using the packaged Nunit test runner (checked into source control):</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>call :ExecuteCmd "%DEPLOYMENT_SOURCE%\tools\nunit\nunit-console.exe" "%DEPLOYMENT_SOURCE%\src\Tests\bin\Release\Tests.dll" /framework:v4.5.1
</span><span class='line'>IF !ERRORLEVEL! NEQ 0 goto error</span></code></pre></td></tr></table></div></figure>


<p>Simple!</p>

<h2>Now the fun part</h2>

<p>One thing you&rsquo;ll notice if you start running tests on your builds is that this starts to slow down your continuous deployment workflow.
For 90% of the time this is acceptable, after all, you can wait a few minutes to see your changes show up on the site. But sometimes,
especially for production hotfixes or trial-and-error config changes, that 3-5 minutes becomes unbearable.</p>

<p>In cases like this, I&rsquo;ve set up a little addition to my script that will read the git commit message and take action depending on what phrases it sees.</p>

<p>For example, let&rsquo;s say I commit a change that is just a config change and I know I don&rsquo;t need to run any tests or I really want the quick build.
This is what my commit message looks like:</p>

<pre><code>[notest] just changing App.config
</code></pre>

<p>That phrase <code>[notest]</code> is something my script looks for at build time and if it&rsquo;s present it will skip running tests!
You can use this same logic to do pretty much anything you want. Here&rsquo;s what it looks like after step 3 in my script:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>:: Above at top of file
</span><span class='line'>
</span><span class='line'>IF NOT DEFINED RUN_TESTS (
</span><span class='line'>   SET RUN_TESTS=1
</span><span class='line'>)
</span><span class='line'>
</span><span class='line'>:: 4. Run unit tests
</span><span class='line'>echo Latest commit ID is "%SCM_COMMIT_ID%"
</span><span class='line'>
</span><span class='line'>call git show -s "%SCM_COMMIT_ID%" --pretty=%%%%s &gt; commitmessage.txt
</span><span class='line'>SET /p COMMIT_MESSAGE=&lt;commitmessage.txt
</span><span class='line'>
</span><span class='line'>echo Latest commit message is "%COMMIT_MESSAGE%"
</span><span class='line'>
</span><span class='line'>IF NOT "x%COMMIT_MESSAGE:[notest]=%"=="x%COMMIT_MESSAGE%" (
</span><span class='line'>   SET RUN_TESTS=0
</span><span class='line'>)
</span><span class='line'>
</span><span class='line'>IF /I "%RUN_TESTS%" NEQ "0" (
</span><span class='line'>  echo Running unit tests
</span><span class='line'>  call :ExecuteCmd "%DEPLOYMENT_SOURCE%\tools\nunit\nunit-console.exe" "%DEPLOYMENT_SOURCE%\src\Tests\bin\Release\Tests.dll" /framework:v4.5.1
</span><span class='line'>  IF !ERRORLEVEL! NEQ 0 goto error
</span><span class='line'>) ELSE (
</span><span class='line'>  echo Not running unit tests because [notest] was present in commit message
</span><span class='line'>)</span></code></pre></td></tr></table></div></figure>


<p>Alright, there&rsquo;s definitely some batch file black magic incantations going on here! So let&rsquo;s break it down.</p>

<pre><code>echo Latest commit ID is "%SCM_COMMIT_ID%"
</code></pre>

<p>Kudu defines several useful <a href="https://github.com/projectkudu/kudu/wiki/Deployment-Environment">environment variables</a> that you have access to, including the current commit ID.
I&rsquo;m just echoing it out so I can debug when viewing the log output.</p>

<pre><code>call git show -s "%SCM_COMMIT_ID%" --pretty=%%%%s &gt; commitmessage.txt
SET /p COMMIT_MESSAGE=&lt;commitmessage.txt
</code></pre>

<p>Alright. This took me some real trial and error. Git lets you <a href="https://git-scm.com/docs/git-show"><code>show</code> any commit message</a> and can format it using a printf format string (<code>--pretty=%s</code>).
However, due to the weird escaping rules of batch files and variables, this requires not one but <strong>four</strong> <code>%</code> signs. Go figure.</p>

<p>Next I pipe it to a file, this is only so I can read the file back and store the message in a batch variable (<code>COMMIT_MESSAGE</code>), on the next line.
<strong>Kudu team:</strong> It would be sweet to add a <code>SCM_COMMIT_MESSAGE</code> environment variable!</p>

<pre><code>IF NOT "x%COMMIT_MESSAGE:[notest]=%"=="x%COMMIT_MESSAGE%" (
   SET RUN_TESTS=0
)
</code></pre>

<p>Okay, what&rsquo;s going on here? I&rsquo;ll <a href="http://stackoverflow.com/questions/7005951/batch-file-find-if-substring-is-in-string-not-in-a-file">let StackOverflow explain</a>. The <code>:[notest]=</code> portion REPLACES the term &ldquo;[notest]&rdquo; in
the preceding variable (<code>COMMIT_MESSAGE</code>) with an empty string. The <code>x</code> prefix character guards against batch file weirdness.
So if <code>[notest]</code> is NOT present, this will return true (the strings match). If it is present, the condition will be false and so we do <code>IF NOT</code>
since we want to execute when that is the case.</p>

<p>If <code>[notest]</code> is present in the message, we set another variable, <code>RUN_TESTS</code> to 0.</p>

<pre><code>IF /I "%RUN_TESTS%" NEQ "0" (
    echo Running unit tests
    call :ExecuteCmd "%DEPLOYMENT_SOURCE%\tools\nunit\nunit-console.exe" "%DEPLOYMENT_SOURCE%\src\Tests\bin\Release\Tests.dll" /framework:v4.5.1
    IF !ERRORLEVEL! NEQ 0 goto error
) ELSE (
    echo Not running unit tests because [notest] was present in commit message
)
</code></pre>

<p>If <code>RUN_TESTS</code> does not evaluate to 0, then we run the tests! Otherwise we echo out an informative message as to why it was skipped.</p>

<p>Phew. So how much time do we save on <code>[notest]</code> builds now?</p>

<p><img src="https://cloud.githubusercontent.com/assets/563819/11734864/9a5e5e10-9f80-11e5-92ff-b93a1d9c994a.png" alt="No test build" /></p>

<p>Compared to a build with tests:</p>

<p><img src="https://cloud.githubusercontent.com/assets/563819/11734880/b874bed0-9f80-11e5-9af2-8e0425a02563.png" alt="Build with tests" /></p>

<p>So that flag cuts the build in half! Nice! There are probably some other ways to improve the time. By the way, if you&rsquo;re wondering what&rsquo;s taking so long
in your build, you can use the Kudu <a href="https://github.com/projectkudu/kudu/wiki/REST-API">REST endpoint</a> to see your deployment logs (<strong>/api/deployments</strong> endoint) which contain full timestamp information!</p>

<p>Happy continuous deployment!</p>
]]></content>
  </entry>
  
</feed>
