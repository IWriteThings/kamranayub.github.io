<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Kamranicus]]></title>
  <link href="http://kamranicus.com/atom.xml" rel="self"/>
  <link href="http://kamranicus.com/"/>
  <updated>2015-05-30T23:09:17+00:00</updated>
  <id>http://kamranicus.com/</id>
  <author>
    <name><![CDATA[Kamran]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Behind the Major Update to Keep Track of My Games]]></title>
    <link href="http://kamranicus.com/blog/2015/05/30/ktomg-update/"/>
    <updated>2015-05-30T22:13:00+00:00</updated>
    <id>http://kamranicus.com/blog/2015/05/30/ktomg-update</id>
    <content type="html"><![CDATA[<p><img src="https://cloud.githubusercontent.com/assets/563819/7899619/b3154994-072a-11e5-8da1-b9a9703a8b57.png" alt="My profile" /></p>

<p>Today I just pushed a <strong>major</strong> update to <a href="http://keeptrackofmygames.com">KTOMG</a>. <em>Psst, you should join!</em></p>

<p>You can <a href="http://blog.keeptrackofmygames.com/post/120264549011/updates-for-may-2015">reference the blog post</a> for details on features but on the technical side I&rsquo;m pretty proud because I got to implement a bunch of new tech that I&rsquo;ve been wanting to learn properly.</p>

<!-- More -->


<h2>At a glance</h2>

<p>The site is built using <a href="http://getbootstrap.com">Bootstrap</a>, <a href="http://lesscss.org">LESS</a>, and <a href="http://knockoutjs.com">Knockout.js</a>. It is totally responsive and yes, every feature is available on every view. I don&rsquo;t yet have offline mode or some more app-y things like local storage quite yet but it&rsquo;s on my to-do list. By far the hardest thing to make responsive was the list view but using Flexbox and toolbar configurations, it&rsquo;s manageable. It could always be simpler though, my work is never done.</p>

<h2>CSS3 Flexbox</h2>

<p><img src="https://cloud.githubusercontent.com/assets/563819/7899652/94500830-072c-11e5-8656-59fb097ecf36.png" alt="Lists" /></p>

<p>The list view is using <a href="https://css-tricks.com/snippets/css/a-guide-to-flexbox/">CSS3 Flexbox</a> with <code>display: table</code> fallback w/JavaScript. A Flexbox grid is perfect for a modern responsive app, which KTOMG is. It scales down to mobile fine (and if you don&rsquo;t have Flexbox or if the fallback fails, the worst you get is a stacked list). For different breakpoints I customize the flex basis of the items to create 1-3 column layouts. The homepage will soon use Flexbox as soon as I get to it (right now it&rsquo;s using <code>display: table</code> to maintain equal-height columns). All of the modern browsers support Flexbox and for those that don&rsquo;t, they just get a wrapping grid.</p>

<p>I also use Flexbox for any grid of games using table display as a fallback; this prevents me from needing to have fixed column sizes for different screen sizes so the games will just wrap as they need to.</p>

<p><strong>Aside:</strong> The box art image grid for the list is simply just the first four games in the list (dynamically updated, since the entire page uses Knockout) positioned using <code>background-size</code> and <a href="https://developer.mozilla.org/en-US/docs/Web/Guide/CSS/Using_multiple_backgrounds">multiple backgrounds</a>. It uses a placeholder image repeated 4 times, in case the games are missing artwork and during loading.</p>

<p>Most of the CSS3/HTML5 stuff I have fallbacks by detecting features using <a href="http://modernizr.com/">Modernizr</a>.</p>

<h2>HTML5 Drag and Drop</h2>

<p>The other cool thing Flexbox gives you is some hot drag and drop action by allowing dynamic insertion of flex items:</p>

<p><img src="https://cloud.githubusercontent.com/assets/563819/7899631/1b7db50c-072b-11e5-9977-49c7b6c3b176.gif" alt="Drag and drop" /></p>

<p>I wrote the drag and drop code in vanilla HTML5 Javascript, it wasn&rsquo;t too bad <a href="https://developer.mozilla.org/en-US/docs/Web/Guide/HTML/Drag_and_drop">using MDN as a guide</a>. The fallback if that isn&rsquo;t supported is simply toolbar icons (which really is faster anyway for moving things far).</p>

<p>I admit I haven&rsquo;t tried a browser that <em>doesn&rsquo;t</em> support Flexbox but <em>does</em> support drag/drop, so that case might still need some tweaking.</p>

<h2>Hopscotch Tutorials</h2>

<p><img src="https://cloud.githubusercontent.com/assets/563819/7899658/bda3d91e-072c-11e5-80ea-932d2f309681.png" alt="Tutorials" /></p>

<p>Since lists are pretty powerful, people might need some help remembering all the things they can do.</p>

<p>I use a modified version of <a href="http://linkedin.github.io/hopscotch">Hopscotch</a> for an introduction tutorial. I struggled at first to figure out how I wanted to do tutorials. I ended up just using a string array on every user that I fill in when they finish a tutorial, allowing for an infinite number of tutorials and everyone not seeing them by default. I keep a master list of valid tutorials on the server.</p>

<p>It&rsquo;s a simple solution that will let me add tutorials as I can make them. It took me a little finnagling, but I also got the tour working fine on small screens.</p>

<h2>Stats with Chart.js</h2>

<p><img src="https://cloud.githubusercontent.com/assets/563819/7899666/222e5d5a-072d-11e5-9328-f52ae59c9e76.png" alt="Stats" /></p>

<p>I use <a href="http://www.chartjs.org/">Chart.js</a> for profile and list stats. The API is easy to use and easy to extend, as well as being sufficiently sexy. The stats I show right now are just the tip of the iceberg. I look forward to generating some cool charts later on (especially the Radar ones for comparisons).</p>

<p>Also, I apparently really like Action/Adventure and RPGs. But I knew that already, tell me something I don&rsquo;t know! Like maybe my &ldquo;burndown&rdquo; for finishing my backlog&hellip;</p>

<h2>I&rsquo;m excited</h2>

<p>I worked on this update all month as my wife will attest. I still have <a href="ktomg.uservoice.com/">plenty</a> to do but <a href="http://kamranicus.com/blog/2015/05/21/5-things-for-6-months-abroad/">our vacation</a> is coming to an end. I don&rsquo;t think I&rsquo;ll be able to release such massive updates each month but this one definitely gets me closer to completing the vision I have. I&rsquo;m pretty excited! The updates are just in time for the big gaming conferences, if only I could get public lists out by the end of June&hellip;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Knockout.js Binding Report for Performance Tuning]]></title>
    <link href="http://kamranicus.com/blog/2015/05/25/knockout-binding-report/"/>
    <updated>2015-05-25T10:30:00+00:00</updated>
    <id>http://kamranicus.com/blog/2015/05/25/knockout-binding-report</id>
    <content type="html"><![CDATA[<p>I use a lot of <a href="http://knockoutjs.com">Knockout.js</a> on <a href="http://keeptrackofmygames.com">Keep Track of My Games</a>. I love Knockout but sometimes it makes it difficult to understand what&rsquo;s slowing my page down.</p>

<!-- More -->


<p>For the game list, there&rsquo;s a lot of binding going on because I have to bind not only the list of games but also the toolbar.</p>

<p><img src="http://41.media.tumblr.com/fefa8f95951ed13a2f4d22e758bb807b/tumblr_inline_nonu62Tr1J1qlpzxk_540.png" alt="KTOMG list" /></p>

<p>Before I deploy the newest update (shown above), I&rsquo;d prefer it if the list binding performance was better than it is now. Currently there&rsquo;s a visible block on the UI thread when returning results from the API, about 500-1000ms. <strong>This is unacceptable.</strong></p>

<p>A quick Google search did not yield anything regarding a &ldquo;real&rdquo; performance tool for Knockout. What I would love is an extension that would overlay performance statistics over the UI of my app after binding is complete. This way I could visualize and easily pinpoint what bindings are causing performance issues.</p>

<p>I&rsquo;ve made a small step towards that dream by creating a simple reporting script that outputs a &ldquo;binding report&rdquo; to the Chrome console:</p>

<p><img src="https://cloud.githubusercontent.com/assets/563819/7795861/5a10389a-02d9-11e5-9462-056fa9e4da18.png" alt="Binding report" /></p>

<p>The report displays the total duration of the binding process (which is all bindings that occur after a 500ms wait time) as well as the top binding according to total duration.</p>

<p>It also displays each binding summary in a table (<code>console.table</code>). You can drill-down by expanding the array entries underneath the table (sorted by duration).</p>

<p><img src="https://cloud.githubusercontent.com/assets/563819/7795969/8fb1c828-02da-11e5-8b81-fe88f466812e.png" alt="Drill-down" /></p>

<p>The script works by wrapping all the binding handlers (even custom ones) in a wrapper function that calculates the duration of the call to <code>init</code> or <code>update</code>. You just need to include it after your custom binding handlers and before the <code>applyBindings</code> call.</p>

<p>The script requires <a href="http://underscorejs.org">Underscore</a> and Google Chrome. Here&rsquo;s the gist:</p>

<script src="https://gist.github.com/kamranayub/65399fa247a6c182bc65.js"></script>


<p>As you can see in my own performance report, I have some work to do to fix my <code>if</code> bindings. It doesn&rsquo;t exactly pinpoint the problem binding, but it gets me a step closer to understanding what&rsquo;s going on.</p>

<p><img src="https://cloud.githubusercontent.com/assets/563819/7796086/f407dc76-02db-11e5-90e7-b89613408174.png" alt="Uh oh" /></p>

<p>Now if you&rsquo;ll execuse me, I&rsquo;ve got some work to do.</p>

<p><strong>Update:</strong> Using this little script, I was able to get down to &lt;150ms from 600-900ms (and this is a slow laptop). This is much more acceptable for a release this week!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[5 Things I Learned About Design While Living Abroad for 6 Months]]></title>
    <link href="http://kamranicus.com/blog/2015/05/21/5-things-for-6-months-abroad/"/>
    <updated>2015-05-21T16:48:00+00:00</updated>
    <id>http://kamranicus.com/blog/2015/05/21/5-things-for-6-months-abroad</id>
    <content type="html"><![CDATA[<p>My wife and I have been living abroad in France for the past six months, since December. We had originally planned for me to work during this time (and to stay longer) but sometimes things just don&rsquo;t work out as planned. Still, it was truly a blessing in disguise as we&rsquo;ve been able to travel and I&rsquo;ve been able to observe and learn about how people around the world use technology that has affected the way I think about how I design software and websites.</p>

<p>Here are 5 things I&rsquo;ve learned during my 6 months living abroad.</p>

<!-- More -->


<h2>1. Mobile is well and truly ubiquitous</h2>

<p>We know phones are ubiquitous, right? But I don&rsquo;t think I truly understood until I traveled around and saw it for myself in &ldquo;the wild.&rdquo; When you travel you&rsquo;re reduced to the bare minimum you&rsquo;re willing to take and a phone is a lifeline. When you&rsquo;re trying to pay bills, send PDFs, or figuring out bus routes, you start to appreciate all the connectivity you really have.</p>

<p>When we walked through the <a href="http://www.morocco.com/blog/arsat-moulay-abdeslam-cyber-park">Cyber Park in Marrakech, Morocco</a>, we saw people from all walks of life gathering and sitting around the park. Were they frolicking through the gardens? No, although the gardens <em>were</em> beautiful. The Cyber Park in Marrakech is actually a <strong>fully connected park</strong> and offers free Wi-Fi for anyone that wants to connect. They even have touch kiosks with Chrome installed on them. This was important to us as our Airbnb internet was actually powered by someone&rsquo;s 3G data plan. It was slow as heck. The park&rsquo;s Wi-Fi was pretty decent, good enough to do a video call and more than enough to browse news or check emails. This was a cool idea merging beautiful outdoor environments with technology. United States, let&rsquo;s see some cyber parks!</p>

<p><a href="https://flic.kr/p/auYjGX"><img src="https://cloud.githubusercontent.com/assets/563819/7750838/c4fd5bac-ffd6-11e4-9387-fb59d7aead09.jpg" alt="Cyber Park" /></a></p>

<p>I watched as pre-teens and adults took their phones out (usually Android) to text or surf the web. Not only were they using &ldquo;low-end&rdquo; hardware they were trying to use apps and sites <strong>we build</strong>. Can your site even run on a low-end Android phone? Can <em>mine</em>?! It was an eye-opener. As the community flocks to all-Javascript, all-the-time frameworks like Angular, I sat there wondering if that&rsquo;s really a good idea if you really want to <em>reach</em> people, everyday people, on all these devices.</p>

<p>Even in a modern city like the one in France where we lived, Internet connectivity is available but not optimal. The fastest we can get in the city center is 15Mbps, which is pretty good but nothing like the 40-100Mbps I can get in Minneapolis. Mobile is a bit better, with access to LTE and 4G for most subscribers on the major networks&mdash;I myself used SFR &ldquo;La Carte&rdquo; with 1GB of data for 30 euros per 30-day period. I ended up just switching to the 600MB option for 20 euros since I didn&rsquo;t actually use all that data. Data caps are a thing, folks! Thankfully native apps provide options to prevent them from hogging data on cellular networks but web sites? Nope&mdash;so I avoided surfing the web when on data.</p>

<p>People are using their phones everywhere, way more than they are using laptops (if they even own one). People don&rsquo;t sit outside here on their MacBooks. They browse and consume on their tiny little phones. Teens sit on the stairs of a building in the historic city center of Marseille, their thumbs dancing across the screen of WhatsApp sending emotes to their friends. Adults sit at a cafe, sipping espresso on the canal streets of Amsterdam as they type on their iPad. Commuters stand in the Paris metro, headphones plugged-in playing Candy Crush Saga on their Windows Phones. Business people in suits walk briskly through the streets of central London, phone in hand checking their emails. Merchants in the souks of Marrakech discuss politics over some mint tea while checking Twitter or the news on their phone. Your driver is chatting with his friend in Arabic as you head 200km through the countryside to a village in Morocco. This isn&rsquo;t made up, these are all things I&rsquo;ve observed first-hand.</p>

<p>The truth is, when we design, we typically design for ourselves, in a bubble. I think we&rsquo;re all guilty of it. It&rsquo;s not until you&rsquo;re out there, &ldquo;amongst the people&rdquo;, that you realize that maybe testing your site on the high-end phones and super-fast LAN networks might not be representative of the people using your site. I brought my brother&rsquo;s laptop with me and it really sucks for development. It&rsquo;s slow. Still, it&rsquo;s kind of a good thing, the pain I feel while developing forces me to live through every slow cycle the CPU churns out as Visual Studio pauses between keystrokes, or Chrome chugging on [my] poorly written Javascript. Performance matters but We are Designers and we work on big rigs so we don&rsquo;t feel that pain as much as we should.</p>

<p>I challenge you to pull out that dusty Dell laptop from 2004 or your 1st-gen iPad and try running your site. If it works, you might be reaching way more people across the world than you thought. If it doesn&rsquo;t&hellip; well, it&rsquo;s up to you to decide. From the souks of Marrakech to the canal streets of Amsterdam, it&rsquo;s all the same:  <strong>Mobile. Is. Ubiquitous.</strong> And it is used <strong>everywhere</strong> in <strong>every</strong> setting imaginable.</p>

<h2>2. You can learn about design from transportation networks</h2>

<p>If you want to learn about designing for everyone, you can&rsquo;t do much better than being a tourist and navigating the transportation networks of the world. The variance between cities is astounding.</p>

<p><strong>Amsterdam</strong></p>

<p>Amsterdam has fantastic real-time traffic data for buses, trams, and trains. This data is not only available on Google Maps but is also shown live <strong>on the buses and trams</strong>, making it crazy easy to get around. Their tram system also has an electronic check-in/out system where you check in as you walk into the tram and check out as you go out. This sounds good in writing but in practice it is confusing to tourists (or non-Amsterdam natives) as only <strong>certain</strong> doors can be used to exit. Clearly the designers wanted to help expedite the boarding/off-boarding process but it also makes it very confusing for first-time users expecting to get on and off through the same doors. Furthermore, there are <strong>constant</strong> reminders to check in and out because if you forget to check in, you&rsquo;ll be fined, or if you check out <em>without</em> checking in, the next check-in will cost a lot more than you anticipated since it calculates fare from check in to check out.</p>

<p><strong>Oslo</strong></p>

<p>The Oslo T-Bane is well-designed for the Norwegians who love to ski and do activities. The metro cars are super-wide with plenty of leg/aisle space for skis and equipment. It even goes straight from the city center up into the forest to the ski area. We saw people literally skiing out the doors of the metro into the snow-covered forest.</p>

<p><strong>London</strong></p>

<p>The London Underground offers the easy-to-use Oyster card for checking in and out with pay-as-you-go discounts; it&rsquo;s accessible to tourists moreso than typical travel cards. Instead of the paper ticketing system, you just tap your card on the reader at the entrances and exits of the station. The route maps and overhead signage are also super clear about cardinal direction and major stops along a route. In the Victoria station (and elsewhere), lines run across the floor indicating the path to specific areas of the station (Tube, Gatwick Express, etc.).</p>

<p><strong>Paris</strong></p>

<p>The Paris metro is easy to navigate but not as easy as the London Underground. Unlike the LU, the Paris metro does not have cardinal directions or major stops in the overhead signage, so you need to inspect the route map closely if you can&rsquo;t remember the terminus you need.</p>

<p><a href="https://flic.kr/p/4G7FW4"><img src="https://cloud.githubusercontent.com/assets/563819/7750927/4b5cd15a-ffd7-11e4-82a9-f57c88beb2d3.jpg" alt="Paris metro ticket" /></a></p>

<p>Another difference is the ticketing. Most people use paper tickets, many of whose remains can be seen thrown on the ground and littered across the metro. Not only is the Oyster card more <em>convenient</em>, it&rsquo;s also friendlier to the environment.</p>

<p><a href="https://flic.kr/p/2yqxQ"><img src="https://cloud.githubusercontent.com/assets/563819/7750969/8e3b44ca-ffd7-11e4-9c7d-30e8110863ba.jpg" alt="Metro sign" /></a></p>

<p>There were some things I thought were better designed over the Underground.</p>

<p>One was that the outdoor signs for the Paris metro are easier to see. The Underground signs in London are flat when viewed from the side (so they don&rsquo;t stand out) but the Paris ones have a crazy looking gothic style, making them easier to see through the hustle and bustle of traffic and pedestrians. The Paris metro stops are also easier to stumble across because they go directly down into the ground versus London where station doors are on buildings. Furthermore, the Paris entrances are on both sides of the street whereas the Underground only has specific exits. Sometimes it depends on the stop but in most cases these hold true.</p>

<p>Another thing I liked was that the Paris metro has exit maps that show the local street map with the exits marked clearly so you can orient yourself as soon as you leave the train car. I did not use the Underground enough to see if they offered the same maps but we found the exits easy enough since they listed the attractions.</p>

<p>One more positive the Metro has is the exit signs are green with a little person running to the door. The Underground exit signs just say &ldquo;Way Out &ndash;>&rdquo; without any iconography. Even if you don&rsquo;t know French, a bright green exit sign with the image of a human running to a door is fairly clear, but if you don&rsquo;t know English would you understand the Underground signs?</p>

<p><strong>Trains</strong></p>

<p>Train travel is common in Europe and is operated primarily by SNCF in France. The train stations themselves are designed well, including one feature that was very notable: the presence of a piano. I mean it, every station we&rsquo;ve been in has featured a piano that <em>anyone</em> can play. I&rsquo;m not sure how that would go down in the US, but in France it appeared that only people who knew how to play piano used it and there&rsquo;s just something about waiting at the train station listening to the overture of Pirates of the Carribean or the thumping Game of Thrones theme that puts a smile on your face in a boring or stressful situation. The stations are well-designed to boot, with train diagrams indicating the coach numbers and platform.</p>

<p><img src="https://cloud.githubusercontent.com/assets/563819/7751150/c16f1fdc-ffd8-11e4-83f9-3cb4f01ff3e6.png" alt="Train diagram" /></p>

<h2>3. Designing for tourists is a lesson in tutorials and accessibility</h2>

<p>Did you ever stop to think that when you&rsquo;re a tourist, your experience is really <strong>designed</strong> by the city? Some cities do it well, others do it poorly or not at all. As soon as you arrive in a new city, you <em>might</em> be equipped with a LonelyPlanet guide but that&rsquo;s not enough to prepare you directly for what you experience. Even with a hefty amount of tips from us, our friends still were confused about the differences between the RER A, RER B, and Metro systems in Paris (not to mention the whole Zones 1-5 thing).</p>

<p><strong>Nantes, France</strong></p>

<p>One of the best examples of good tourism design I encountered was in Nantes, France. First, the tram stop is clearly marked and visible from the exit of the train station&mdash;this is not always the case everywhere. Second, throughout <strong>the entire city</strong> is a green painted line on the pavement, on the sidewalk, on the roads, everywhere. If you follow this line, you will be led to most, if not all, of the common tourist stops in Nantes. <strong>GENIUS</strong>. If you were lost, follow the green line back to a landmark. I can&rsquo;t imagine who convinced the city to do this but they should be applauded. Can you imagine someone suggesting painting a green line in NYC? Imagine the red (green?) tape you&rsquo;d wade through.</p>

<p>Along the route of the green line, there turned out to be another set of surprises. Do you recognize this character?</p>

<p><img src="https://cloud.githubusercontent.com/assets/563819/7751097/7f601966-ffd8-11e4-9e16-0f4ce60ee002.png" alt="Mario!" /></p>

<p>Him and his ilk were peppered throughout the city on the sides of buildings along the route of the green line turning our walks into a sort of scavenger hunt. So not only was the green line <em>helpful</em>, it made me want to follow it by discovering all the videogame characters&mdash;it was <strong>fun</strong>. In the end, I found about 10. I have no idea if the characters were intentionally put there by the city but whoever did it was a genius because it made me want to explore the city (and we did). I had to collect them all!</p>

<p>The other excellent piece of design we found in Nantes was this free eating guide, shown below.</p>

<p><img src="https://cloud.githubusercontent.com/assets/563819/7751330/97263818-ffd9-11e4-96a0-cfb416ac2d51.png" alt="Nantes eating guide" /></p>

<p>This was a well-designed guide to all the restaurants and cafes in Nantes. Unlike many other sources, including Foursquare and TripAdvisor, they provided the schedule of the restaurant along with a min/max dish price. It was fantastic for planning on where to go; it was like doing an Advanced Search in a book (&ldquo;OK, what has a price below 15 euros but is also an Editor&rsquo;s Choice and open on Mondays?&rdquo;), you could easily scan the book to answer that question. By the way, the answer is <a href="http://www.shalimar-restaurant-nantes.fr/">Shalimar</a>, a <strong>fantastic</strong> Indian/Pakistani bistro where I had superb beef madras.</p>

<p>Nobody is perfect though. The tram system in Nantes was super confusing at first because the kiosks <strong>did not</strong> explain the difference between the 2-3 types of network tickets you could get (&ldquo;Which one is the TRAM ticket, damn it?!&rdquo;). Instead it only had the <em>name</em> of the network (which did not include the words &ldquo;tram&rdquo; or &ldquo;lightrail&rdquo; or anything indicative of what kind of transport it was). Eventually we saw the network&rsquo;s logo on the tram and bought a ticket for that network (it&rsquo;s <em>Tan</em>, if you were wondering).</p>

<p><strong>Oslo&rsquo;s UseIt</strong></p>

<p>Oslo was another example of some great tourism design. Oslo is known for being one of the most expensive cities in the world and our experience backed that up (<strong>one</strong> small Chipotle-sized taco for $8, uhhhhh). So <em>our</em> primary motivation when visiting Oslo was to spend as little money as possible. Well, a local company called <a href="http://www.use-it.no/">UseIt</a> sources advice and tips from locals to provide a super handy guide to the city including things to do, cheap eats, and really cool walks (like the Art Walk) along with free maps. We found the guide in our Airbnb room but they had an office in the city center near the tourism office. They even let you store your luggage there and use the free Internet&mdash;two things that travelers might desperately need in an emergency or unplanned event. Kudos, UseIt team!</p>

<p><strong>Your app is a city</strong></p>

<p>Tourism design is essentially designing a tutorial or introduction to your city for newcomers. Now think of <strong>your app</strong> as a city. We <em>try</em> to design for FTU (first-time users) on apps and sites but often we leave it until they actually <em>join</em> or use a fancy new feature. We should be providing the information they need <em>immediately</em>, as soon as they arrive in our beautiful city whether by car or foot (&ldquo;Tourism Office &ndash;>&rdquo;) or by train, plane, or bus (free guides at the station!). Great tourism design gets the visitor familiar and provides the information they need to plan their visit and ideally, spend the <em>most</em> of their time (and money) actually <em>doing</em> things in your city. Sometimes visitors planned ahead, sometimes not, for others it might just be a quick stop on the way to another destination; whatever the motivation, make sure you&rsquo;ve given some thought about it.</p>

<p>The introduction starts as soon as people arrive, so take a look at the entrances to your site&mdash;do they give the visitor the information they need to navigate your beautiful city? Have you explained your 3 methods of transport? Or they do they leave frustrated and discontent, ready to move to the next city on their agenda?</p>

<h2>4. There are a lot of people in this world</h2>

<p>This might be a no-brainer, just like saying mobile is ubiquitous. But again, has the <em>magnitude</em> really hit you?</p>

<p>When I design I design English-first. This is all well and good for us native English speakers but when you&rsquo;re living in France, trying to use French-made apps like the local theater app, you curse the designer for not adding an English localization. But can you blame them?! They are just doing what we do, writing in their native tongue. It&rsquo;s the same everywhere. There are SO MANY local apps&mdash;there&rsquo;s RueCentrale for local restaurants, Cinema Aixois for local movies in Aix-en-Provence, there&rsquo;s Capitain Traine, Voyages SNCF, and Ouigo for planning train rides, PACA Mobilite for bus routes <em>solely</em> for southern France, and Marmiton, the AllRecipes of France. Apps are everywhere and you don&rsquo;t even know they exist until you&rsquo;re in the region they&rsquo;re used. On top of that, <em>most</em> of them are not localized. Just take a look at my France folder on my phone:</p>

<p><img src="https://cloud.githubusercontent.com/assets/563819/7751371/e1939666-ffd9-11e4-9d47-85f9f2372bff.png" alt="Phone folder" /></p>

<p>Don&rsquo;t even mention the <a href="http://sfr.fr">SFR</a> portal used to manage my phone and SIM, try learning simple tech terms like log in, log out, etc. in a non-native language. Thank the Lord for Google site translation.</p>

<p><img src="https://cloud.githubusercontent.com/assets/563819/7752401/876d3e70-ffdf-11e4-9e86-1f8fb01b2ce9.png" alt="SFR site" /></p>

<p>What about your apps? What about <em>my</em> apps? I usually don&rsquo;t even stop to think about how things differ between countries like dates (DD/MM/YYYY vs. MM/DD/YYYY), phone number formats (+33 01 02 03 45 06), time (24h vs. 12h format) or how an American living in France can&rsquo;t wrap their head around the metric system when trying to cook or bake. Kudos to AllRecipes for including an automated Metric conversion for recipes so we can use our measuring cups here.</p>

<p><img src="https://cloud.githubusercontent.com/assets/563819/7752589/98d08630-ffe0-11e4-9287-9f277df101c3.png" alt="AllRecipes" /></p>

<p>I don&rsquo;t even know what libraries to use for localizing/globalizing JavaScript apps because I haven&rsquo;t done it! <a href="https://github.com/jquery/globalize">I know they exist</a> but I haven&rsquo;t <em>used</em> any. I&rsquo;ve done localization before in C# (once in French, even) but that&rsquo;s the extent of most of my experience. Why is that? For one, it&rsquo;s just <strong>easier</strong> to write code with strings in English. Anytime you begin to introduce other formatting and cultures, things get more hairy. It shouldn&rsquo;t be that way. Another reason is simply because it&rsquo;s easy to just assume people will speak English but this is a bad assumption. We&rsquo;ve met a ton of French, Moroccans, and to a limited extent even Dutch who don&rsquo;t know any English and they&rsquo;re automatically excluded from using your apps simply due to their language. Even <strong>the English</strong> speak a different language than Americans. Some have jokingly commented that they can&rsquo;t understand us (well, I don&rsquo;t understand you, friends. <em>Bobbies</em>? Really?). We didn&rsquo;t get to travel to any Asian countries but I imagine it&rsquo;s the same everywhere or even more pronounced. <strong>Even</strong> if someone is fluent in English, we use idioms and slang they might not be familiar with. Take a second look at your copy on your apps. Would someone whose second language is English understand what you&rsquo;re even saying?</p>

<p>Living somewhere else for an extended period of time really makes you appreciate when a designer has thought about localization and globalization. We need to do better. <em>I</em> need to do better. The world is a big place and there are a <em>ton</em> of people in it&mdash;are you designing for everyone or just yourself?</p>

<h2>5. If you have the means, see the world</h2>

<p>Finally, get out of your comfort zone if you can. I&rsquo;ve learned a ton just by being a visitor, a tourist, to all these locations.</p>

<p>Make a goal to travel someplace away from your comfortable home sweet home. Maybe it&rsquo;s only a week or maybe, <strong>if</strong> you can do it, save up and take a sabbatical. We are lucky that we had a chance to do this and I understand not everyone can travel, especially for such an extended amount of time. You might have children, you might be in a different phase of life, you might be falling on hard times, there could be any number of things preventing you from traveling. If you have the means, try. At the least, just get out and tour your own city and observe the people in it! You might see things differently when you&rsquo;re the one trying to get around or sitting at a cafe watching people use technology.</p>

<p>After all, what are you working for, if not to better yourself and learn&mdash;living and experiencing new things is a sure way to grow. It has affected the way I think about design and I think it&rsquo;s important to observe things for yourself.</p>

<p>Challenge yourself. I didn&rsquo;t think I&rsquo;d be into going to Morocco but it was <strong>amazing</strong> and I&rsquo;d go back again. Using GPS to navigate the labyrinth of souks while being hassled by shop owners is definitely an experience you won&rsquo;t get anywhere else.</p>

<p><img src="https://cloud.githubusercontent.com/assets/563819/7751434/40bec6b0-ffda-11e4-89cb-1df305332f13.png" alt="Souks" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Use a Separate Chrome Profile to Manage Your Apps]]></title>
    <link href="http://kamranicus.com/blog/2015/05/21/chrome-multi-user/"/>
    <updated>2015-05-21T13:45:00+00:00</updated>
    <id>http://kamranicus.com/blog/2015/05/21/chrome-multi-user</id>
    <content type="html"><![CDATA[<p>If you&rsquo;re an app or site developer, you&rsquo;ve probably got a bunch of
tabs or bookmarks for your dashboards, social network accounts,
blog, and more. For <a href="http://keeptrackofmygames.com">Keep Track of My Games</a>,
I have UserVoice, Azure, RavenDB, social profiles, etc. that I
need to manage and track (haha).</p>

<!-- More -->


<p>It can be a chore to manage all of this easily but I have a tip.
A little while back Chrome <a href="https://support.google.com/chrome/answer/2364824?hl=en">introduced a new feature</a> that lets
you switch between multiple profiles super easily. I use it
for me and my wife, since she has a Google account and goes
to knitting sites and does whatever she likes doing&mdash;I don&rsquo;t want that filth in <em>my</em> Chrome instance! :)</p>

<p><img src="https://cloud.githubusercontent.com/assets/563819/7749041/784a45e2-ffca-11e4-8a5f-ce5d1c445d4e.png" alt="Chrome user switcher is in the corner" /></p>

<p>The user switcher is in the top-right of Chrome, shown above. You can single-click to bring up a modal or right-click to quickly switch.
Chrome profiles are kept separate, with their own settings, extensions,
and bookmarks. This keeps tabs and work separated neatly and creates a
so-called &ldquo;separation of concerns&rdquo; for your browsing.</p>

<p>Here&rsquo;s the rub: A full Chrome user is tied to a Google account. I don&rsquo;t want to create a separate Google account just for KTOMG.
The Google+, YouTube, email, etc. is all linked to my primary Google Account.
The issue is, Chrome will not let more than one
Google account exist on a single PC. So how can we take advantage of the profile separation but still
keep my primary Google account?</p>

<p>The answer is: we&rsquo;ll create a
<a href="https://support.google.com/chrome/answer/3463947">Supervised User Account</a>. Did you notice I said &ldquo;full user&rdquo; before?
A SUA is just a lower privilege profile (meant for children) that you can
control via your primary Google account. BUT, if you <strong>don&rsquo;t restrict anything</strong>,
it&rsquo;ll just be like a &ldquo;full&rdquo; profile!</p>

<p>We&rsquo;ll follow the instructions above in the Google help article:</p>

<ol>
<li>Under your Chrome profile, go to Settings</li>
<li>Scroll down to Users</li>
<li>Click &ldquo;Add User&rdquo; and enter your app&rsquo;s name and avatar for a picture</li>
<li>Click &ldquo;Control and view websites this person visits from [your Google account]&rdquo;</li>
</ol>


<p><img src="https://cloud.githubusercontent.com/assets/563819/7749183/8dd90398-ffcb-11e4-8f8a-095f4a2e4beb.png" alt="Supervised user" /></p>

<p>Now you&rsquo;ve made a &ldquo;supervised&rdquo; app account managed by your main Google one. Nice! You can set up all your tabs as you want, <del>extensions with any
specific accounts (TweetDeck)</del>, and pinned dashboard tabs, all within a separate context from your primary Chrome profile. <strong>Update:</strong> It appears, after I tried, that SUA&rsquo;s cannot use extensions. There&rsquo;s an <a href="https://code.google.com/p/chromium/issues/detail?id=354178">open issue</a> for it, so hopefully whitelist ability will be added soon.</p>

<p>For example, here&rsquo;s what <a href="http://keeptrackofmygames.com">Keep Track of My Games</a>
looks like in its own Chrome profile:</p>

<p><img src="https://cloud.githubusercontent.com/assets/563819/7749251/1de36eb0-ffcc-11e4-8be9-fa78b45a69da.png" alt="KTOMG profile" /></p>

<p>And the full experience:</p>

<p><img src="https://cloud.githubusercontent.com/assets/563819/7749724/e2d07ed6-ffcf-11e4-93cd-f307718c2c82.png" alt="KTOMG browser" /></p>

<p>When you&rsquo;re the only one managing a bunch of apps, this
is a real productivity booster. You could even go as far as
creating separate profiles for each environment, if you like. Hell, this doesn&rsquo;t have to be for apps, it could be for whatever browsing contexts you want to separate.</p>

<p>Just make sure you have enough RAM because Chrome will
suck it all up.</p>

<p><img src="https://cloud.githubusercontent.com/assets/563819/7749876/db3a810c-ffd0-11e4-8a35-5d96e41b874f.png" alt="Task manager" /></p>

<p>Dumb puny laptop.</p>

<p>Hope this helps! Happy managing.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Extending Knockout Observables to Sync With Address Bar]]></title>
    <link href="http://kamranicus.com/blog/2015/05/11/extending-knockout-with-urlsync/"/>
    <updated>2015-05-11T16:20:00+00:00</updated>
    <id>http://kamranicus.com/blog/2015/05/11/extending-knockout-with-urlsync</id>
    <content type="html"><![CDATA[<p>I made a tiny Knockout extender called <code>urlSync</code> that syncs an observable with the URL.</p>

<!-- More -->


<p>For <a href="http://keeptrackofmygames.com">Keep Track of My Games</a> I&rsquo;ve been adding filtering to the game library.
I&rsquo;m really proud of what I have, here&rsquo;s what it looks like in the UI:</p>

<p><img src="http://kamranicus.com/blog/images/2015-05-11-filtering.png" alt="Filtering UI" /></p>

<p>A modal allows the user to drill down and pick what filters to apply, the modal updates to show what filters are applied and what&rsquo;s available with the current resultset.</p>

<p><img src="http://kamranicus.com/blog/images/2015-05-11-filtering-modal.png" alt="Filtering Modal" /></p>

<p>When you&rsquo;re outside the modal, I show any filters being applied allowing one-click removal or toggling the filtering method between AND/OR.</p>

<p>To make it easy to serialize/deserialize filters, I created a custom filtering expression that is pretty standard around town:</p>

<pre><code>{facetName}:{facetValue},{facetValue},...|...
</code></pre>

<p>For example, representing the screenshot above, the filtering expression would be:</p>

<pre><code>Lists:6|Status:8|My+Platforms:1
</code></pre>

<p>If you muck with the expression, there shouldn&rsquo;t be any issues. Facets are validated against whatever the original unfiltered resultset is, so you cannot add arbitrary expressions&mdash;if you do, they will not show up in the server response. Strings are special because potentially they can include characters used to parse the expression, the simplest way to deal with it is by encoding them and then decoding the value.</p>

<pre><code>Tags:my%20awesome%2ctag,tag2|Status:4
</code></pre>

<p>Now, I wanted to talk about the filtering expression because it makes it really easy to do a bunch of things:</p>

<ol>
<li>Reading/writing from querystring or hash</li>
<li>Create a command textbox that can parse and autocomplete expressions</li>
<li>Allow the user to save &ldquo;views&rdquo; of their games</li>
</ol>


<p>Items 2 and 3 might be on the agenda for some later date but item 1 is required for being able to create pre-filtered routes or create links. Since the library is loaded through Knockout and Web API, we need to be able to pass any filter or parameters when the page is loaded and also keep track of what the current values are for filtering.</p>

<p>To achieve this, I created a really simple <a href="http://knockoutjs.com/documentation/extenders.html">Knockout Extender</a> called <strong>urlSync.</strong> All it does is initially load an observable from the hash (if found) or the querystring (if found). Then it observes the observable and keeps the <code>window.location.hash</code> updated.</p>

<p>This could easily be extended to use <a href="https://developer.mozilla.org/en-US/docs/Web/Guide/API/DOM/Manipulating_the_browser_history">HTML5 <code>pushState</code></a>, if you wished. For now, managing the hash is &ldquo;good enough&rdquo; for my use case.</p>

<p>Here is a Gist of the extender:</p>

<script src="https://gist.github.com/kamranayub/3feba45dd2da3262b872.js"></script>


<p>It depends on <a href="http://medialize.github.io/URI.js">URI.js</a> and the <a href="http://medialize.github.io/URI.js/docs.html#fragment-abuse">URI.fragmentQuery</a> component. It also uses <a href="http://underscorejs.org">Underscore.js</a>, but that&rsquo;s just because I have it in my project already.</p>

<p>It&rsquo;s really simple to use, for example here&rsquo;s a snippet from my collection view model:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>// Flattened facets
</span><span class='line'>ViewModel.facets = ko.observableArray([]);
</span><span class='line'>
</span><span class='line'>// Selected (applied) facets
</span><span class='line'>ViewModel.selectedFacets = ko.observableArray([]).extend({
</span><span class='line'>    urlSync: {
</span><span class='line'>      param: "filterBy",
</span><span class='line'>      read: function(value) {
</span><span class='line'>         return kt.utils.facetsFromString(value, ViewModel.facets);
</span><span class='line'>      },
</span><span class='line'>      write: kt.utils.facetsToString
</span><span class='line'>    }
</span><span class='line'>});
</span><span class='line'>
</span><span class='line'>// Filter AND toggle
</span><span class='line'>ViewModel.filterAnd = ko.observable(false).extend({ urlSync: "filterAnd" });</span></code></pre></td></tr></table></div></figure>


<p>As you can see, the extender allows you to intercept read/write so you can perform any custom transformations (e.g. filtering objects to/from string). Because we&rsquo;re deserializing from a string and because the <code>checkedValue</code> binding is by reference, I pass in the existing facets collection to my utility, in order to preserve object references when required. On initial page load, this isn&rsquo;t required as the games haven&rsquo;t been fetched from the API yet. Once they are, my fetch method updates the observables. I could also modify the way I handle binding the checkboxes but this works.</p>

<p>The <code>urlSync</code> extender will then bind the observable values to the URL like this:</p>

<pre><code>users/kamran.ayub/lists/all#?
    sortBy=Name&amp;
    filterAnd=true&amp;
    filterBy=Status%3A8%7CLists%3A6%7CMy+Platforms%3A1
</code></pre>

<p>Since the extender can also fallback to reading from the querystring, we can create URLs that filter a user&rsquo;s collection:</p>

<pre><code>users/somebody/lists/all?filterBy=Platforms:2,5,40
</code></pre>

<p>Pretty neat and now allows anyone to copy/paste the URL and preserve any needed filtering state!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[101 Ideas for the Microsoft HoloLens]]></title>
    <link href="http://kamranicus.com/blog/2015/04/30/101-ideas-for-the-microsoft-hololens/"/>
    <updated>2015-04-30T20:42:59+00:00</updated>
    <id>http://kamranicus.com/blog/2015/04/30/101-ideas-for-the-microsoft-hololens</id>
    <content type="html"><![CDATA[<p>HoloLens has the potential to change how we live, drastically.</p>

<!-- More -->


<p><a href="http://buildwindows.com/">Microsoft Build</a> is Microsoft&rsquo;s annual developer conference. I attended the conference in 2013 and 2014 for work and had a blast both times. This year I couldn&rsquo;t attend since we have been living in France (a good excuse) but I still wanted to catch the livestream of this year&rsquo;s keynote.</p>

<p>Since we were in Bordeaux during the keynote, I was watching the livestream while sipping on some cheap red wine (no worries, it was night and we were done for the day).</p>

<blockquote class="twitter-tweet" data-partner="tweetdeck"><p lang="en" dir="ltr">Sipping wine in <a href="https://twitter.com/hashtag/Bordeaux?src=hash">#Bordeaux</a> and getting ready to watch <a href="https://twitter.com/hashtag/Build2015?src=hash">#Build2015</a> <a href="https://twitter.com/hashtag/bldwin?src=hash">#bldwin</a> livestream in 20 mins. <a href="http://t.co/cRHfFcI284">pic.twitter.com/cRHfFcI284</a></p>&mdash; Kamran Ayub (@kamranayub) <a href="https://twitter.com/kamranayub/status/593432034137264128">April 29, 2015</a></blockquote>


<script async src="http://kamranicus.com//platform.twitter.com/widgets.js" charset="utf-8"></script>


<p>I was getting pretty excited as things progressed. <a href="http://code.visualstudio.com/">Visual Studio Code</a> was pretty awesome, <a href="http://winsupersite.com/windows-10/windows-10-will-introduce-web-apps-store">adding websites to the Windows Store</a> was pretty awesome (especially for <a href="http://keeptrackofmygames.com">Keep Track of My Games</a>), but more than any of that, the <a href="https://www.microsoft.com/microsoft-hololens/en-us">Microsoft HoloLens</a> announcement and demos <strong>blew my mind</strong>.</p>

<p>If you haven&rsquo;t seen the HoloLens demo from the keynote, it starts around 2:48:30:</p>

<iframe width="560" height="315" src="https://www.youtube.com/embed/W41AVOZpe7w?t=2h48m30s&amp;rel=0" frameborder="0" allowfullscreen></iframe>


<p>Is your mind sufficiently blown? Mine was too. It was <a href="http://en.wikipedia.org/wiki/Clarke%27s_three_laws">indistinguishable from magic</a> (as it <em>is</em> sufficiently advanced).</p>

<p>All at once, like a tidal wave unannounced, a whole slew of ideas ran through my head on what kinds of possibilities could be made possible with HoloLens. Some of them assume certain functionality or environment conditions are there, but there&rsquo;s no use dreaming if you can&rsquo;t dream a little bit ahead of the curve, right?</p>

<p>After the keynote, I was excited but we had to find a place to eat. We settled on Santosha, a local Thai place where all the young &ldquo;hip&rdquo; French people go. During dinner that night, Cassie and I discussed tons of cool uses for Lens and though my lovely wife isn&rsquo;t a developer nor a self-identified &ldquo;techie&rdquo;, I could see her excitement as she thought of things that would be cool and we both exchanged ideas.</p>

<p>I kept having ideas afterward too. Too many! As a mental excercise and to ensure the ideas go down somewhere, I decided I&rsquo;d write a post about it. So here goes: <strong>101 Ideas for the Microsoft HoloLens</strong>. Ideas are cheap, so I&rsquo;m sharing them. Probably, like many ideas, some of these are trash. Others are promising. Others probably are not possible with the current HoloLens technology. Still others may inspire <strong>you</strong> with an idea. Whatever came out of my head, I wrote it down and made no priority or judgement calls.</p>

<h2>The 101 Ideas</h2>

<p>These are not ordered in any specific order, except by stream of conciousness:</p>

<ol>
<li>Allow you to view your videogame character in 3D space and inspect them, or their inventories</li>
<li>Holographic UI to assist in playing a game</li>
<li>Instant board / table-top games with other people using HoloLens</li>
<li>Play virtual sports (real or fake, like Quidditch)</li>
<li>Geo-based holograph reality game (requires 4G/LTE HoloLens)</li>
<li>Insane horror game</li>
<li>Virtual legos/Minecraft in 3D space</li>
<li>Helping kids with autism with a &ldquo;social avatar buddy&rdquo;</li>
<li>To-do list (to-do&rsquo;s all over)</li>
<li>Cooking companion (visualize recipes)</li>
<li>Virtual decorations for your house (&ldquo;Decoration Store&rdquo;)</li>
<li>HoloLens restaurant</li>
<li>Visualize how to decorate your home (&ldquo;Oh the couch would look nice here&rdquo;)</li>
<li>Photos on the wall</li>
<li>Running apps &mdash; rendered zombies or whatever behind you</li>
<li>Inspecting your car (what is this? where is this?)</li>
<li>Car windshields equipped with holo display</li>
<li>HoloContacts &mdash; eventually HoloLens inside a contact lens</li>
<li>Virtual partner</li>
<li>Visualizing clothing or haircut</li>
<li>Google Earth/StreetView for low-cost travel</li>
<li>Wall-sized environments ala Hunger Games wall (forest, lakes, beach, etc.)</li>
<li>Reading a book to your kid (project pages in space/onto wall)</li>
<li>Virtual reading / bookshelf (reach out, take a virtual book, hold and read/flip pages)</li>
<li>Holo Sims game (lonely? get a roommate)</li>
<li>Cortana in person</li>
<li>Virtual window weather app&mdash;so the window reflects what it&rsquo;s like outside</li>
<li>Pin specific types of news stories</li>
<li>Fridge pinning</li>
<li>Virtual pinned calendar for easy planning</li>
<li>Pin your kids&#8217; projects on the fridge (teacher saves through Internet => home)</li>
<li>Rotating posters or /r/aww or awwpets.com on your wall</li>
<li>On your fridge, post what you eat/or say it and view it right there</li>
<li>Object recognition for food in fridge/pantry &mdash;> pantry app, &ldquo;Cortana, what do I need to make Beef Stroganoff?&rdquo;</li>
<li>Pin shows in Netflix near TV so I can tap and watch/resume</li>
<li>Portable screen for playing games (LAN parties anyone?)</li>
<li>Ceiling craziness (skyboxes, night sky)</li>
<li>Live holo concerts</li>
<li>Holo Videos &mdash; videos shot in 3D space (HoloTV, HoloTube, etc.)</li>
<li>New controllers for games</li>
<li>Controlling robots (demo&rsquo;d at keynote)</li>
<li>Holo UI for devices that have no physical UI</li>
<li>Level designer for games / engines (modders or artists or developers) &mdash; Unity: Holo Editor</li>
<li>AI pets</li>
<li>Home automation</li>
<li>Butler &mdash; think Barkley from <em>Modern Family</em> (thanks Cassie!)</li>
<li>Assisted seeing for people with some visual problems or the elderly</li>
<li>Private vs. Shared holographic experiences</li>
<li>Vehicle training</li>
<li>Inspection of literally anything that can be rendered in 3D</li>
<li>Skyrim IRL</li>
<li>&ldquo;Second Space&rdquo; for games</li>
<li>Virtual monitors / screens</li>
<li>Holo UI for phones</li>
<li>Collaboration apps &mdash; tech repair, construction, etc.</li>
<li>Physical tutorials or manuals for a device/object</li>
<li>Watch Dogs style meta information about the world</li>
<li>Museums (tours, virtual guides, audio, etc.)</li>
<li>&ldquo;Anywhere&rdquo; computer with mouse/keyboard (if even)</li>
<li>Modeling, painting, artwork, holo canvas</li>
<li>Holo GPS for walking/driving navigation</li>
<li>Restaurant Lens &mdash; imagine FourSquare laid on top of the world, as you see it</li>
<li>LARPing heaven</li>
<li>Virtual darts (or any other wall game)</li>
<li>Hiking/walking assist (trails)</li>
<li>Immersive livestreaming</li>
<li>Shared first-person experiences (travel, etc.)</li>
<li>Augmented TV (show interaction, show metadata, etc.)</li>
<li>ENHANCE (digital zoom / binoculars)</li>
<li>Home repair assist</li>
<li>Webcam/streams/Dropcam pinned to walls (Security Wall, near bed, etc.)</li>
<li>Night vision (infrared projection + spatial mapping)</li>
<li>Holo lyrics for the song you&rsquo;re listening to (or music video)</li>
<li>Virtual note-taking (take a photo, mark it up, store in notebook)</li>
<li>&ldquo;Copy/paste&rdquo; &mdash; see/map a physical object, clone it into a holograph</li>
<li>Map a physical object, create a game engine 3D mesh/model and texture</li>
<li>Classroom teaching (holo whiteboards, shared whiteboards, shared models, etc.)</li>
<li>Virtual Fighter (or Trainer)</li>
<li>Exercise examples</li>
<li>FitBit/Band + HoloLens = Virtual Holo Data</li>
<li>Virtual bowling</li>
<li>Tattoo design/preview</li>
<li>In-store augmentation &mdash; &ldquo;Target: Where&rsquo;s scissors?&rdquo;, shows a holo GPS navigation in the store</li>
<li>3D/Holo Snapchat &mdash; &ldquo;Help me Obi Wan Kenobi&rdquo;</li>
<li>Holo Celebrities &mdash; &ldquo;Is that James Franco sitting on your couch?&rdquo;</li>
<li>Holo music making (holo guitar, holo drums, etc.)</li>
<li>Anatomy / surgery training for doctors, nurses</li>
<li>Simulations &mdash; physics, games, etc.</li>
<li>Countdown app</li>
<li>Social feed (birthdays, events, etc.) &mdash; pin specific people</li>
<li>Facial recognition &mdash; infinite uses</li>
<li>Shared workspace notes/etc</li>
<li>Holo Coupons &mdash; only people using HoloLens would see promos in-store</li>
<li>Virtual graffiti</li>
<li>City/&ldquo;Space&rdquo; augmentation &mdash; infinite uses, tourism guides, GPS/location based, augment builings, signs, indoor augmentation, etc.</li>
<li>Metro/transit augmentation &mdash; real-time GPS info, visualize upcoming stops, route, etc.</li>
<li>Sex-ed (<em>shudders</em>)</li>
<li>Augmented physical books</li>
<li>Gardening (reminder for watering, seasons, plant timeframes, etc.)</li>
<li> Knitting counter (keeps track of your stitches)</li>
<li> Pet augmentation (when last fed, last walked, any other tracking data for your pet)</li>
</ol>


<p>And so on and so forth.</p>

<h2>I want a HoloLens</h2>

<p>Basically if you can&rsquo;t tell, I would like to be wearing HoloLens <strong>all the time</strong> (in fact, for many of these ideas, you&rsquo;d have to for them to be practical).</p>

<p>There are literally infinite uses for this technology, as virtual space is infinite, the Earth is a large place and we do a lot of things we need help with. I find HoloLens even more compelling than the Oculus Rift because HoloLens doesn&rsquo;t [necessarily] replace the world; it just augments it&mdash;which makes it much more manageable to be wearing all the time.</p>

<p>Let&rsquo;s say in 10-20 years, the technology progresses enough that it can be miniaturized in a contact lens or even glasses (with your prescription). We&rsquo;d all be equipped with a Lens and we&rsquo;d all have shared/private holograph experiences. Would that ever happen? Glasses seems doable. If it&rsquo;s as easy as what I do with my current prescription glasses and it&rsquo;s fashionable, I&rsquo;m sold. As for everyone having one? There are more phones than people in this world and that&rsquo;s happened relatively fast (for humans). Anything is possible. All you need is a killer app.</p>

<h2>Have your own ideas?</h2>

<p>Make a list and share it below (or link to your blog).</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Triggering a Travis Build Programmatically]]></title>
    <link href="http://kamranicus.com/blog/2015/03/29/triggering-a-travis-build-programmatically/"/>
    <updated>2015-03-29T22:45:30+00:00</updated>
    <id>http://kamranicus.com/blog/2015/03/29/triggering-a-travis-build-programmatically</id>
    <content type="html"><![CDATA[<p>For <a href="http://excaliburjs.com">Exalibur.js</a> we wanted to be able to keep our <code>master</code> branch documentation up-to-date on the website. The website is built using <a href="http://assemble.io">Assemble.io</a> and GitHub pages and <a href="http://kamranicus.com/blog/2015/02/26/continuous-deployment-with-travis-ci/">after successfully automating my blog</a>, naturally I turned to <a href="http://travis-ci.org">Travis CI</a> to set up automated documentation generation.</p>

<!-- More -->


<p>Travis normally sets up a hook in your GitHub repository to automatically trigger a build after you push a commit (or pull request). This is real nice but unfortunately that&rsquo;s where it stops. If you want to trigger a build <strong>for another repository</strong>, you have to do it manually.</p>

<p>I asked Travis about this and their response is promising (Twitter can be nice sometimes):</p>

<blockquote class="twitter-tweet" data-partner="tweetdeck"><p><a href="https://twitter.com/kamranayub">@kamranayub</a> it&#39;s on the roadmap, and hopefully landing soon &lt;3</p>&mdash; Travis CI (@travisci) <a href="https://twitter.com/travisci/status/582311038772723713">March 29, 2015</a></blockquote>


<script async src="http://kamranicus.com//platform.twitter.com/widgets.js" charset="utf-8"></script>


<p>Until that time, though, something has to be done.</p>

<p>One approach I saw was a <a href="https://github.com/metaodi/travis-ping">small Ruby script</a> to forge a webhook POST message. This is actually a nice idea but since Excalibur uses Node to build, I needed something else and didn&rsquo;t want to port it over.</p>

<p>Instead I borrowed some code from <a href="https://github.com/patrickkettner/travis-ping">@patrickketner</a> that uses the <a href="https://github.com/pwmckenna/node-travis-ci">node-travis-ci</a> npm package to submit a build through the public API. I modified Patrick&rsquo;s code since I need to use GitHub personal access tokens like I did <a href="http://kamranicus.com/blog/2015/02/26/continuous-deployment-with-travis-ci/">previously</a>.</p>

<p>You still need to follow the same steps to set up the <code>GH_TOKEN</code> environment variable but once you do, all you have to do is execute this Node.js script (changing the <code>repo</code>).</p>

<script src="https://gist.github.com/kamranayub/88f963a9ac3d5bf6114d.js"></script>


<p>So for example, in your <code>.travis.yml</code> file, you just need:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>install:
</span><span class='line'>  - npm install travis-ci
</span><span class='line'>after_success:
</span><span class='line'>  - node trigger-build.js</span></code></pre></td></tr></table></div></figure>


<p>All set. Now when you commit to one repository, you can trigger a build for another one. This allows us to automatically <a href="http://excaliburjs.com/docs/api/edge">keep our docs up-to-date</a> with whatever <code>master</code> has.</p>

<p>You can <a href="https://github.com/excaliburjs/Excalibur/blob/master/deploy-docs.js">reference Excalibur</a> to see how we execute the script. Additionally, you can reference <a href="https://github.com/excaliburjs/excaliburjs.github.io/blob/site/.travis.yml">excaliburjs.com&rsquo;s Travis configuration</a> to see how we use <a href="http://typedoc.io">TypeDoc</a> to generate documentation for the latest version of <code>master</code>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Continuous Deployment With Travis-CI]]></title>
    <link href="http://kamranicus.com/blog/2015/02/26/continuous-deployment-with-travis-ci/"/>
    <updated>2015-02-26T16:18:22+00:00</updated>
    <id>http://kamranicus.com/blog/2015/02/26/continuous-deployment-with-travis-ci</id>
    <content type="html"><![CDATA[<p>One of the fun things we did for <a href="http://playsweepstacks.com">Sweep Stacks</a> (our Ludum Dare entry)
during development was to setup continuous deployment. Since our GitHub
repository was public, we could leverage the excellent Travis CI build tool.</p>

<!-- More -->


<p>This allowed us to work on the game and have our dedicated tester play every new build
hot off the press. It reduced the amount of bugs we shipped with and created a very
fast feedback loop for QA. In the end it allowed us to push a polished game an hour
or so before the deadline hit. After the voting began, it also allowed us to quickly
push bug fixes that were reported by players.</p>

<p>If you&rsquo;re new to Travis CI, you can learn more about what it is and
how to get started by reading <a href="http://tech.pro/tutorial/1749/get-your-ci-on-with-travis-ci">my Tech.pro tutorial</a>.</p>

<p>Once you have your project building, you can then write a little bash script to
deploy it! By &ldquo;deploying&rdquo;, what I really mean is pushing your built code to your production branch on GitHub for final deployment. For example, we use GitHub pages to host Sweep Stacks.</p>

<p>Let&rsquo;s look at the process.</p>

<h2>Customizing Travis Config</h2>

<p>You will need to execute a script to deploy your site, so you will need to
customize your <strong>_travis.yml</strong> file.</p>

<p>Here is what mine looks like for this blog (built using Octopress):</p>

<pre><code>language: ruby
rvm:
  - 1.9.3
branches:
  only:
    - source
env:
  global:
  - GH_REF: github.com/kamranayub/kamranayub.github.io.git
script:
  - bundle exec rake generate
  - chmod ugo+x deploy.sh
  - '[ "${TRAVIS_PULL_REQUEST}" != "false" ] || ./deploy.sh'
</code></pre>

<p>Let&rsquo;s break it down:</p>

<pre><code>language: ruby
</code></pre>

<p>Easy, since I use <a href="http://octopress.org">Octopress</a> (built on Jekyll) for my blog, we need to use Ruby.</p>

<pre><code>rvm:
  - 1.9.3
</code></pre>

<p>The version of Octopress I use requires Ruby 1.9.3.</p>

<pre><code>branches:
  only:
    - source
</code></pre>

<p>We only want Travis to initiate builds for the <code>source</code> branch, since that is where
the source files are for my blog.</p>

<pre><code>env:
  global:
  - GH_REF: github.com/kamranayub/kamranayub.github.io.git
</code></pre>

<p>We will need to be able to clone and push to our repository, so we store it in an
environment variable for easy access. <code>GH_REF</code> will be available to our bash script.</p>

<pre><code>script:
  - bundle exec rake generate
  - chmod ugo+x deploy.sh
  - '[ "${TRAVIS_PULL_REQUEST}" != "false" ] || ./deploy.sh''
</code></pre>

<p>In our Travis script, we build the blog (<code>rake generate</code>). We then mark our <code>deploy.sh</code> file
as executable (since I&rsquo;m on Windows). After that we execute our deploy as long as this isn&rsquo;t
a pull request (don&rsquo;t want to build other people&rsquo;s changes!). Disabling pull request builds
can also be set in your Travis project settings.</p>

<h2>Deploy script</h2>

<p>Here&rsquo;s the script I use to do the deployment:</p>

<script src="https://gist.github.com/kamranayub/ca7b6866ab43771d9da8.js"></script>


<p>As you can see it&rsquo;s fairly simple. One thing to make sure of is hiding your access token (<code>GH_TOKEN</code>),
we use to authenticate which I&rsquo;ll show you how to generate and use.</p>

<h2>The access token</h2>

<p>The whole reason this works is because we are authenticating to GitHub using a <em>Personal
Access Token</em> (stored in <code>GH_TOKEN</code>). This is an OAuth token that you can create when
using Two-Factor Auth to authenticate 3rd party tools like Visual Studio, or in our case, authenticating in a script.</p>

<p>You can generate a token by:</p>

<ol>
<li>Going to <a href="https://github.com/settings/applications">Applications</a> in your Settings</li>
<li>Clicking &ldquo;Generate New Token&rdquo;</li>
<li>Selecting your permissions (for Travis, all you need is <code>public_repo</code>)</li>
<li>Once created, copy the token to your clipboard (you <em>must</em> regenerate it if you lose it)</li>
</ol>


<p>Now we need to configure Travis to expose this token securely to our script.</p>

<ol>
<li>On Travis, go to the Settings of your project (top-right)</li>
<li>Click the &ldquo;Environment Variables&rdquo; tab (and ensure Build Pull Requests is &lsquo;Off&rsquo;)</li>
<li>Create a new environment variable called <code>GH_TOKEN</code></li>
<li>In the Value field, paste in your token, being sure to remove any trailing whitespace</li>
<li>Ensure &ldquo;Display value in build logs&rdquo; is Off</li>
</ol>


<p>Once created, you&rsquo;re all set! <code>GH_TOKEN</code> will now be available to your <strong>deploy.sh</strong> script.</p>

<h2>Testing it out</h2>

<p>You should be ready to test your deployment. Commit any changes you have to your repository
and you should start seeing the build output once it starts. If there are any errors, now
you can fix them until your build passes.</p>

<p>Happy deploying!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Just Released the New Keep Track of My Games Beta]]></title>
    <link href="http://kamranicus.com/blog/2014/11/04/just-released-the-new-keep-track-of-my-games-beta/"/>
    <updated>2014-11-04T00:16:03+00:00</updated>
    <id>http://kamranicus.com/blog/2014/11/04/just-released-the-new-keep-track-of-my-games-beta</id>
    <content type="html"><![CDATA[<p><img src="http://kamranicus.com/blog/images/2014-11-03-ktomg.png" alt="Keep Track of My Games" /></p>

<p>This last weekend I finally released <a href="http://keeptrackofmygames.com">the beta version</a> of the new Keep Track of My Games site. It&rsquo;s been a long time coming but now it actually lets you keep track of your games. The original site only let you track new games and the new version still offers notifications but now you can organize and tag your collection to track games you&rsquo;ve played or haven&rsquo;t played yet (backlog) or new games.</p>

<p>Over the next few months, I want to add social features and more syncing capabilities to services like Steam, Xbox, and PSN. I also want to add deal notifications for any game in your wishlist.</p>

<p>If you use the site, <a href="http://ktomg.uservoice.com">let me know what you think</a> or vote up ideas on the roadmap!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ludum Dare 29 Game Jam Success!]]></title>
    <link href="http://kamranicus.com/blog/2014/05/01/ludum-dare-29-game-jam-success/"/>
    <updated>2014-05-01T13:54:07+00:00</updated>
    <id>http://kamranicus.com/blog/2014/05/01/ludum-dare-29-game-jam-success</id>
    <content type="html"><![CDATA[<p>This last weekend I spent 72 hours working on a game for the <a href="http://ludumdare.com/compo">Ludum Dare 29</a> game jam. LD is a competition where you get a prompt for a game and then have to spend 48 hours (solo) or 72 hours (jam) and bang out a game. The solo competition has strict rules but the game jam has looser rules and allows for team development. It was a caffeine-filled rush and I hope to write a blog post shortly about how it all went down. It was a ton of fun! I worked with my friends <a href="http://erikonarheim.com">Erik Onarheim</a> and <a href="http://twitter.com/joshedeen">Josh Edeen</a>, both primary contributors to the <a href="http://excaliburjs.com">Excalibur.js</a> game engine. I am also a contributor but I haven&rsquo;t done a ton with the engine core, moreso the usability of the API, opening GH issues, and the <a href="http://github.com/excaliburjs/excaliburjs.github.io">website</a>.</p>

<p><img src="http://www.ludumdare.com/compo/wp-content/compo2/342546/34118-shot0.png" alt="Kraken Unchained" /></p>

<p>In the meantime, be sure to check out the fruits of our labor! It&rsquo;s a game where you play as the Kraken and you destroy ships. We originally had a ton of ideas, as you can see in our GitHub repository, but with only 72 hours your scope is pretty narrow. Still, we&rsquo;re very happy with what came out and we&rsquo;re glad that <a href="http://excaliburjs.com">Excalibur.js</a> pulled through!</p>

<p>Play <a href="http://krakenunchained.azurewebsites.net">Kraken Unchained</a>. Vote for it on the <a href="http://www.ludumdare.com/compo/ludum-dare-29/?action=preview&amp;uid=34118">LD site</a>. You can also take a peek at the <a href="http://krakenunchained.azurewebsites.net/post-dare.html">post-LD</a> version which is in on-going development. It does support touch and fixes some issues in IE10/11.</p>

<p>You can also view the entirety of the source code <a href="http://github.com/excaliburjs/ludum-29">on GitHub</a>!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Getting WebSockets to Work on Windows Azure]]></title>
    <link href="http://kamranicus.com/blog/2014/02/09/websockets-on-windows-azure/"/>
    <updated>2014-02-09T03:52:48+00:00</updated>
    <id>http://kamranicus.com/blog/2014/02/09/websockets-on-windows-azure</id>
    <content type="html"><![CDATA[<p>I was banging my head against the wall for the past hour or so wondering why I was falling back to XHR polling when I deployed my Node.js application to Azure. I&rsquo;m using socket.io and everything looks like it&rsquo;s in order, works locally, etc. It was failing with a WebSocket handshake error.</p>

<p>What I saw in the Chrome developer console was something like:</p>

<pre><code>Error during WebSocket handshake: Unexpected response code: 502
</code></pre>

<p>In my Azure Node.js console (<code>azure site log tail SITENAME</code>), I was seeing <code>EPIPE</code> errors.</p>

<p>It turns out, this little tidbit from the <a href="http://blogs.msdn.com/b/windowsazure/archive/2013/11/14/introduction-to-websockets-on-windows-azure-web-sites.aspx">original Windows Azure blog post</a> on Web Sockets did the trick.</p>

<p>Modify your <strong>web.config</strong> and add:</p>

<pre><code>&lt;webSocket enabled="false" /&gt;
</code></pre>

<p>To your <code>system.webServer</code> configuration. Also, another good point in that blog post is to use SSL, since you get SSL for free with a <code>*.azurewebsites.net</code> site.</p>

<p>Hope this helps someone else out there. This should be added to the <a href="http://www.windowsazure.com/en-us/documentation/articles/web-sites-nodejs-chat-app-socketio/">official Azure tutorial</a> on using web sockets with Node.js.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[5 Tips to Improve Your ASP.NET MVC Codebase]]></title>
    <link href="http://kamranicus.com/blog/2014/01/29/5-tips-to-improve-your-mvc-site/"/>
    <updated>2014-01-29T19:16:11+00:00</updated>
    <id>http://kamranicus.com/blog/2014/01/29/5-tips-to-improve-your-mvc-site</id>
    <content type="html"><![CDATA[<p>I have an urge to write a quick list of tips for improving an ASP.NET MVC application because
I just got done reviewing some code for a support ticket at work. It&rsquo;s still fresh
in my mind and I wanted to get some of my thoughts down to share with others. If you
have been doing MVC for a while, I don&rsquo;t think much of this is news. It&rsquo;s more
for those of you that don&rsquo;t do MVC often or are new to MVC.</p>

<!-- More -->


<p>Imagine this: you&rsquo;ve been tasked to figure out why a web application is using 2GB of memory on the
production web servers. You pull down the version that&rsquo;s currently in production and run it locally
to profile and debug.</p>

<p>After looking through the code, doing some profiling, maybe shaking your head a bit, you&rsquo;ve figured
out what the issue is and now you need to give some feedback.</p>

<p>That&rsquo;s exactly what happened to me today and out of that experience, 5 tips you can follow to keep
your ASP.NET MVC codebase working as you&rsquo;d expect.</p>

<h3>1. Understand the queries in your problem domain</h3>

<p>The root cause of the support ticket I received was a simple case of fetching too much
data from the database, causing obscene amounts of memory usage.</p>

<p>It&rsquo;s a common enough issue. You&rsquo;re building a simple blog, it has posts and it has media (images, videos, attachments).
You put a Media array onto your Post domain object. Your Media domain object has all the image
data stored in a byte array. Since you&rsquo;re using an ORM, there&rsquo;s a certain way you need to design your domain model
to play nice; we&rsquo;ve all experienced this.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='c#'><span class='line'><span class="k">public</span> <span class="k">class</span> <span class="nc">BlogPost</span> <span class="p">{</span>
</span><span class='line'>  
</span><span class='line'>  <span class="k">public</span> <span class="n">ICollection</span><span class="p">&lt;</span><span class="n">BlogMedia</span><span class="p">&gt;</span> <span class="n">Media</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">public</span> <span class="k">class</span> <span class="nc">BlogMedia</span> <span class="p">{</span>
</span><span class='line'>  
</span><span class='line'>  <span class="k">public</span> <span class="kt">byte</span><span class="p">[]</span> <span class="n">Data</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">public</span> <span class="kt">string</span> <span class="n">Name</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>There&rsquo;s nothing absolutely wrong with this design. You&rsquo;ve modeled your domain accurately. The problem is, when you
issue a query through your favorite ORM, it eagerly loads all the data associated with your blog post:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='c#'><span class='line'><span class="k">public</span> <span class="n">IList</span><span class="p">&lt;</span><span class="n">BlogPost</span><span class="p">&gt;</span> <span class="n">GetNewestPosts</span><span class="p">(</span><span class="kt">int</span> <span class="n">take</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">_db</span><span class="p">.</span><span class="n">BlogPosts</span><span class="p">.</span><span class="n">OrderByDescending</span><span class="p">(</span><span class="n">p</span> <span class="p">=&gt;</span> <span class="n">p</span><span class="p">.</span><span class="n">PostDate</span><span class="p">).</span><span class="n">Take</span><span class="p">(</span><span class="n">take</span><span class="p">).</span><span class="n">ToList</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>A seemingly innocuous line (unless you&rsquo;ve been bitten), a sneaky monster is lying in wait with big consequences if you haven&rsquo;t disabled
lazy loading or didn&rsquo;t tell your ORM to ignore that big <code>Data</code> property on blog media.</p>

<p>It&rsquo;s important to understand how your ORM queries and maps objects and make sure you only query what you need (for example using projection).</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='c#'><span class='line'><span class="k">public</span> <span class="n">IList</span><span class="p">&lt;</span><span class="n">PostSummary</span><span class="p">&gt;</span> <span class="n">GetNewestPosts</span><span class="p">(</span><span class="kt">int</span> <span class="n">take</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">_db</span><span class="p">.</span><span class="n">BlogPosts</span><span class="p">.</span><span class="n">OrderByDescending</span><span class="p">(</span><span class="n">p</span> <span class="p">=&gt;</span> <span class="n">p</span><span class="p">.</span><span class="n">PostDate</span><span class="p">).</span><span class="n">Take</span><span class="p">(</span><span class="n">take</span><span class="p">).</span><span class="n">Select</span><span class="p">(</span><span class="n">p</span> <span class="p">=&gt;</span> <span class="k">new</span> <span class="n">PostSummary</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">Title</span> <span class="p">=</span> <span class="n">p</span><span class="p">.</span><span class="n">Title</span><span class="p">,</span>
</span><span class='line'>      <span class="n">Id</span> <span class="p">=</span> <span class="n">p</span><span class="p">.</span><span class="n">Id</span>
</span><span class='line'>  <span class="p">}).</span><span class="n">ToList</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>This ensures we only grab the amount of data we really need for the task. If all you&rsquo;re doing is using the title and ID to build a link on the homepage, <em>just ask</em>.</p>

<p>It&rsquo;s OK to have more than 5 methods on a repository; be as granular as you need to be for your UI.</p>

<h3>2. Don&rsquo;t call your repositories from your views</h3>

<p>This one&rsquo;s a little sneaky. Consider this line in an MVC view:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='c#'><span class='line'><span class="n">@foreach</span><span class="p">(</span><span class="kt">var</span> <span class="n">post</span> <span class="k">in</span> <span class="n">Model</span><span class="p">.</span><span class="n">RelatedPosts</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="p">...</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>It <em>seems</em> innocent enough. But if we take a look at what exactly that model property is hiding:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='c#'><span class='line'><span class="k">public</span> <span class="k">class</span> <span class="nc">MyViewModel</span> <span class="p">{</span>
</span><span class='line'>  
</span><span class='line'>  <span class="k">public</span> <span class="n">IList</span><span class="p">&lt;</span><span class="n">BlogPost</span><span class="p">&gt;</span> <span class="n">RelatedPosts</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">get</span> <span class="p">{</span> <span class="k">return</span> <span class="k">new</span> <span class="n">BlogRepository</span><span class="p">().</span><span class="n">GetRelatedPosts</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="n">Tags</span><span class="p">);</span> <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Yikes! Your &ldquo;view model&rdquo; has business logic in it on top of calling a data access method directly. Now you&rsquo;ve introduced data
access code somewhere it doesn&rsquo;t belong and hidden it inside a property. Move that into the controller so you can wrangle it in
and populate the view model conciously.</p>

<p>This is a good opportunity to point out that implementing proper unit tests would uncover issues like this; because you definitely can&rsquo;t intercept calls to something like that and then you&rsquo;d realize injecting a repository into a view model is probably not something you want to be doing.</p>

<h3>3. Use partials and child actions to your advantage</h3>

<p>If you need to perform business logic in a view, that should be a sign you need to revisit your view model and logic.
I don&rsquo;t think it&rsquo;s advisable to do this in your MVC Razor view:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='c#'><span class='line'><span class="err">@</span><span class="p">{</span>
</span><span class='line'>  <span class="kt">var</span> <span class="n">blogController</span> <span class="p">=</span> <span class="k">new</span> <span class="n">BlogController</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">&lt;</span><span class="n">ul</span><span class="p">&gt;</span>
</span><span class='line'><span class="n">@foreach</span><span class="p">(</span><span class="kt">var</span> <span class="n">tag</span> <span class="k">in</span> <span class="n">blogController</span><span class="p">.</span><span class="n">GetTagsForPost</span><span class="p">(</span><span class="n">p</span><span class="p">.</span><span class="n">Id</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>  <span class="p">&lt;</span><span class="n">li</span><span class="p">&gt;</span><span class="n">@tag</span><span class="p">.</span><span class="n">Name</span><span class="p">&lt;/</span><span class="n">li</span><span class="p">&gt;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="p">&lt;/</span><span class="n">ul</span><span class="p">&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Putting business logic in the view is a no-no, but on top of that you&rsquo;re creating a <em>controller</em>! Move that into your action method and use
that view model you made for what it&rsquo;s intended for. You can also move that logic into a separate action method that only gets called inside views
so you can cache it separately if needed.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='c#'><span class='line'><span class="c1">//In the controller:</span>
</span><span class='line'>
</span><span class='line'><span class="na">[ChildActionOnly]</span>
</span><span class='line'><span class="na">[OutputCache(Duration=2000)]</span>
</span><span class='line'><span class="k">public</span> <span class="n">ActionResult</span> <span class="nf">TagsForPost</span><span class="p">(</span><span class="kt">int</span> <span class="n">postId</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="nf">View</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//In the view:</span>
</span><span class='line'>
</span><span class='line'><span class="err">@</span><span class="p">{</span><span class="n">Html</span><span class="p">.</span><span class="n">RenderAction</span><span class="p">(</span><span class="s">&quot;TagsForPost&quot;</span><span class="p">,</span> <span class="k">new</span> <span class="p">{</span> <span class="n">postId</span> <span class="p">=</span> <span class="n">p</span><span class="p">.</span><span class="n">Id</span> <span class="p">});}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Notice the <code>ChildActionOnly</code> attribute. From <a href="http://msdn.microsoft.com/en-us/library/system.web.mvc.childactiononlyattribute(v=vs.118).aspx">MSDN</a>:</p>

<blockquote><p>Any method that is marked with <code>ChildActionOnlyAttribute</code> can be called only with the <code>Action</code> or <code>RenderAction</code> HTML extension methods.</p></blockquote>

<p>This means people can&rsquo;t see your child action by manipulating the URL (if you&rsquo;re using the default route).</p>

<p>Partial views and child actions are useful tools in the MVC arsenal; use them to your advantage!</p>

<h3>4. Cache what matters</h3>

<p>Given the code smells above, what do you think will happen if you only cached your view model?</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='c#'><span class='line'><span class="k">public</span> <span class="n">ActionResult</span> <span class="nf">Index</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="kt">var</span> <span class="n">homepageViewModel</span> <span class="p">=</span> <span class="n">HttpContext</span><span class="p">.</span><span class="n">Current</span><span class="p">.</span><span class="n">Cache</span><span class="p">[</span><span class="s">&quot;homepageModel&quot;</span><span class="p">]</span> <span class="k">as</span> <span class="n">HomepageViewModel</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">homepageViewModel</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">homepageViewModel</span> <span class="p">=</span> <span class="k">new</span> <span class="n">HomepageViewModel</span><span class="p">();</span>
</span><span class='line'>      <span class="n">homepageViewModel</span><span class="p">.</span><span class="n">RecentPosts</span> <span class="p">=</span> <span class="n">_blogRepository</span><span class="p">.</span><span class="n">GetNewestPosts</span><span class="p">(</span><span class="m">5</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">HttpContext</span><span class="p">.</span><span class="n">Current</span><span class="p">.</span><span class="n">Cache</span><span class="p">.</span><span class="n">Add</span><span class="p">(</span><span class="s">&quot;homepageModel&quot;</span><span class="p">,</span> <span class="n">homepageViewModel</span><span class="p">,</span> <span class="p">...);</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="nf">View</span><span class="p">(</span><span class="n">homepageViewModel</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Nothing! There will not be any performance gain because you&rsquo;re accessing the data layer through a controller variable in the view and
through a property in the view model&hellip; caching the view model won&rsquo;t help anything.</p>

<p>Instead, consider caching the <em>output</em> of the MVC action instead:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='c#'><span class='line'><span class="na">[OutputCache(Duration=2000)]</span>
</span><span class='line'><span class="k">public</span> <span class="n">ActionResult</span> <span class="nf">Index</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="kt">var</span> <span class="n">homepageViewModel</span> <span class="p">=</span> <span class="k">new</span> <span class="n">HomepageViewModel</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">homepageViewModel</span><span class="p">.</span><span class="n">RecentPosts</span> <span class="p">=</span> <span class="n">_blogRepository</span><span class="p">.</span><span class="n">GetNewestPosts</span><span class="p">(</span><span class="m">5</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="nf">View</span><span class="p">(</span><span class="n">homepageViewModel</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Notice the handy <code>OutputCache</code> attribute. MVC supports ASP.NET Output Caching; use it to your advantage when it applies. If you are
going to cache the model, your model needs to essentially be a POCO with automatic (and read-only) properties&hellip; not something that calls other
repository methods.</p>

<p>As an added benefit, I haven&rsquo;t ever done this but you can <a href="http://msdn.microsoft.com/en-us/magazine/gg650661.aspx">implement different output caching providers</a> allowing you to cache on
AppFabric/NoSQL/anywhere if you ever needed it. MVC is super extensible.</p>

<h3>5. Don&rsquo;t be afraid to leverage your ORM</h3>

<p>If you&rsquo;re not going to take advantage of your ORM&rsquo;s feature set, you are missing out. In the codebase
I was reviewing, they were using NHibernate but they weren&rsquo;t <em>using</em> it. They were totally missing out on <a href="http://nhforge.org/doc/nh/en/index.html#querycriteria-projection">its advanced projection
capabilities</a> to solve some of these memory issues. Some of this stems from rigidity in using a &ldquo;repository pattern&rdquo; and some of it stems from lack of knowledge.</p>

<p>By taking advantage of EF or NHibernate&rsquo;s features, your repositories can do a lot more than just use basic generic methods. They can shape and
return the data <em>you actually want</em> in your controllers, greatly simplifying your controller logic. Do yourself a favor and read through the ORM&rsquo;s documentation to get a handle on what it can offer.</p>

<p>I think when people adopt the repository pattern, it&rsquo;s almost like they pull down a shade over the bright light shining in from their ORM window. When I started playing with RavenDB, I <strong>got rid</strong> of my repository layer (in fact, my <em>entire data project</em>) and went full-metal using Raven queries in my application service layer with a little bit of extension methods to reuse query logic. I found that <em>a lot</em> of my logic was really context-specific and benefited from simply taking advantage of Raven&rsquo;s extensive features to project, shape, and batch my queries.</p>

<h4>That&rsquo;s just, like, your opinion man&hellip;</h4>

<p>If you think you can abstract your ORM, I challenge you to think about it differently. The ORM <em>is</em> your abstraction and if you believe swapping out your existing ORM with another ORM will be a piece of cake because it&rsquo;s &ldquo;abstracted&rdquo;, you&rsquo;d be surprised. That&rsquo;s what I thought too until I learned the hard way that switching to Raven really changed my entire codebase in ways I didn&rsquo;t expect. Your ORM doesn&rsquo;t only affect data access, it affects the domain and it affects your business logic, it even will have an effect on your UI. By removing the repository abstraction, I actually <em>reduced the overall complexity</em> of my data access code.</p>

<h3>&ldquo;Common sense is not so common&rdquo;</h3>

<p>Or so my dad loves to remind me at times. Sometimes it just takes a good code review to remind oneself that what you thought everyone knew isn&rsquo;t the case; you probably learned it through experience or frantic Googling and just assumed other people already knew it.</p>

<p>I hope this helped someone else out!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Just Released: Have I Been Pwned?]]></title>
    <link href="http://kamranicus.com/blog/2013/12/24/just-released-have-i-been-pwned/"/>
    <updated>2013-12-24T21:33:00+00:00</updated>
    <id>http://kamranicus.com/blog/2013/12/24/just-released-have-i-been-pwned</id>
    <content type="html"><![CDATA[<iframe src="https://skydrive.live.com/embed?cid=0E21D632E0E57AEE&resid=E21D632E0E57AEE%2149403&authkey=AEgpdW0TqRxZH0o" width="192" height="320" frameborder="0" scrolling="no"></iframe>




<iframe src="https://skydrive.live.com/embed?cid=0E21D632E0E57AEE&resid=E21D632E0E57AEE%2149404&authkey=AICb-R354Pi1e38" width="192" height="320" frameborder="0" scrolling="no"></iframe>




<iframe src="https://skydrive.live.com/embed?cid=0E21D632E0E57AEE&resid=E21D632E0E57AEE%2149405&authkey=AOyaP0QJsviTcw4" width="192" height="320" frameborder="0" scrolling="no"></iframe>


<p>I just released <a href="http://www.windowsphone.com/en-us/store/app/have-i-been-pwned/43ca9526-4db2-40ba-9125-60d7abe62b40">Have I Been Pwned?</a> to the Windows Phone store. It&rsquo;s a tiny, tiny app that only took me a couple hours to build. You can find the source code on <a href="https://github.com/kamranayub/HaveIBeenPwned">GitHub</a>.</p>

<p><a href="http://haveibeenpwned.com">HaveIBeenPwned.com</a> is a website created by <a href="http://www.troyhunt.com/">Troy Hunt</a>, a security MVP, that checks to see if your email address appears in a database of all the breached email addresses in prominent hacks like Gawker, Sony, and Adobe. I&rsquo;ve definitely been pwned, so it&rsquo;s a good service to use to quickly see if you need to change your passwords.</p>

<p>I plan to add the background task soon but I wanted the initial release out there so that I can just submit updates to it. If you want to contribute, send me a pull request!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Get Your CI on With Travis CI]]></title>
    <link href="http://kamranicus.com/blog/2013/12/19/get-your-ci-on-with-travis-ci/"/>
    <updated>2013-12-19T05:10:10+00:00</updated>
    <id>http://kamranicus.com/blog/2013/12/19/get-your-ci-on-with-travis-ci</id>
    <content type="html"><![CDATA[<p>I just published an article on Tech.pro that <a href="http://tech.pro/tutorial/1749/get-your-ci-on-with-travis-ci">walks through getting started with Travis CI</a>. We use it for Excalibur.js and that was my first
time configuring it, so I thought I might as well write up a nice tutorial for other people. It&rsquo;s really an awesome service, especially
for open source projects.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Just Released: Bowling Calculator App]]></title>
    <link href="http://kamranicus.com/blog/2013/12/11/just-released-bowling-calculator-app/"/>
    <updated>2013-12-11T03:02:26+00:00</updated>
    <id>http://kamranicus.com/blog/2013/12/11/just-released-bowling-calculator-app</id>
    <content type="html"><![CDATA[<p><img src="http://cdn.marketplaceimages.windowsphone.com/v8/images/4eb4e175-0dd5-4e48-860b-639e6796b01b?rotation=90" alt="Screenshot" /></p>

<p>I just released my second Windows Phone app, <a href="http://www.windowsphone.com/en-us/store/app/bowling-calculator/9287a99a-6068-4ff4-925b-988c8c99dbf6">Bowling Calculator</a>. It&rsquo;s an <a href="http://github.com/kamranayub/wp-bowling">open source app</a> that I created when <a href="http://kamranicus.com/blog/posts/77/tccc15-leveling-up-your-windows-phone-app">I gave my talk at TCCC15</a>.
If you&rsquo;re a fellow developer, feel free to send me a pull request with any bug fixes or enhancements. I want to keep it focused on
the simple use case of scoring a bowling game; I don&rsquo;t need it to track multiple games or keep track of history. It&rsquo;s purpose is to serve
as a production-ready sample app and to also be good at what it aims to do.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MiniProfiler RavenDB Pull Request Accepted]]></title>
    <link href="http://kamranicus.com/blog/2013/12/05/miniprofiler-ravendb-pull-request-accepted/"/>
    <updated>2013-12-05T14:32:08+00:00</updated>
    <id>http://kamranicus.com/blog/2013/12/05/miniprofiler-ravendb-pull-request-accepted</id>
    <content type="html"><![CDATA[<p>I just got a notification that my <a href="https://github.com/MiniProfiler/dotnet/pull/15">pull request</a> for
adding RavenDB support to MiniProfiler went through! It&rsquo;s always really cool to see your contributions
get pulled in. The MiniProfiler guys were really easy-going, <a href="https://github.com/yellis">@yellis</a> was even kind enough to take on
the testing. That kind of acceptance for pull requests is great to see because it makes me feel good
about contributing and is a bit less intimidating.</p>

<!-- More -->


<p>The &ldquo;official&rdquo; MiniProfiler RavenDB plugin does several things:</p>

<ul>
<li>Integrates with all existing MiniProfiler settings</li>
<li>Displays the query duration just like you&rsquo;d expect in a separate raven column

<ul>
<li>This let&rsquo;s you see the raven percentage individually just like SQL</li>
<li>It matches the experience of using EF with MiniProfiler exactly</li>
</ul>
</li>
<li>Allows you to dig into the exact request details ala EF integration</li>
<li>(not included) It&rsquo;s possible to also include the <em>results</em> of the request but in my pull request I don&rsquo;t because it was way too much
overhead to include the full response in the web interface (displaying 50 complex objects in JSON slowed down the UI too much)

<ul>
<li>You can just copy the query to see the results in Raven Studio anyway</li>
<li>Possibly you could just display the query URL and open the request in a new tab</li>
</ul>
</li>
</ul>


<p>I have only just begun my exploration of RavenDB but one of the downsides from moving from EF was
the excellent MiniProfiler integration. I was really surprised to find adding the same level
of support to Raven was pretty straightforward in the latest iteration of MiniProfiler.</p>

<p>There are two packages I found that added profiling to Raven, the <a href="https://github.com/ravendb/ravendb/tree/master/Raven.Client.MvcIntegration">&ldquo;official&rdquo; Raven profiler</a> and another
<a href="http://blog.csainty.com/MvcMiniProfiler.RavenDb/">MiniProfiler plugin</a>, but both of those are lacking. The official one didn&rsquo;t seem to handle AJAX requests
and the other only seemed to add profiling steps; it didn&rsquo;t provide any details about the request.
I wanted <strong>full</strong> integration with MiniProfiler on the same level as EF and I didn&rsquo;t want to enable <em>two</em> profilers at once. I was
already using MiniProfiler to profile my MVC app, I didn&rsquo;t want to enable Raven Profiler and MiniProfiler
at the same time.</p>

<p>There is <a href="https://github.com/ravendb/ravendb.contrib/tree/master/src/Raven.Client.Contrib.Profiling">a RavenDb.Contrib project</a> that added MiniProfiler integration on the level I wanted, but unfortunately it was not integrated
tightly into the MiniProfiler codebase (it was using reflection and other hacks) and it also was not built against the latest version of the codebase
that simplified the steps to create a new custom timing. Still, credit is due, because some of the formatting logic and general direction of my pull
request was taken from that contrib project.</p>

<p>I do not know what the release schedule is like for the next version of MiniProfiler, but I have my
RavenDB-based branch compiled and am using it for my site currently. You can bring down my fork
and compile it yourself too, if you&rsquo;re really interested in using it right now.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Kamranicus: Now With 100% More Octopress]]></title>
    <link href="http://kamranicus.com/blog/2013/12/05/kamranicus-now-with-100-percent-more-octopress/"/>
    <updated>2013-12-05T05:18:28+00:00</updated>
    <id>http://kamranicus.com/blog/2013/12/05/kamranicus-now-with-100-percent-more-octopress</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve just pushed a new version of Kamranicus that is built using the static site generator, <a href="http://octopress.org">Octopress</a>. Octopress uses <a href="http://jekyllrb.com/">Jekyll</a> to generate static sites.</p>

<p>I decided to switch because I can leverage GitHub Pages which are <strong>free</strong> and I can use a custom domain. It&rsquo;s a perfect fit because I can just piggyback on GitHub&rsquo;s cloud hosting for free and not worry about incurring any downtime due to database issues (something that happened more than a few times with the last ASP.NET MVC and SQL-based site).</p>

<p>I really enjoyed setting up Octopress, it was easy to migrate my posts. I highly recommend it! It would be even better to have a .NET/C#-based static site generator that supported all of Jekyll&rsquo;s configuration options, except with Razor-based layouts and templating. Mmmm, that sounds pretty good. Someone get on that.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Just Pushed: Blackjack Sample Game]]></title>
    <link href="http://kamranicus.com/blog/posts/79/just-pushed-blackjack-sample-game"/>
    <updated>2013-12-03T09:09:04+00:00</updated>
    <id>http://kamranicus.com/blog/posts/79/just-pushed-blackjack-sample-game</id>
    <content type="html"><![CDATA[<p>It&rsquo;s finally done! I sat down today and dug through my backups to find my original WPF BlackJack game I wrote way back when WPF was really cool. I converted it to VS 2013, made sure it still ran, organized the solution, and hit deploy. It&rsquo;s now up on GitHub for your learning pleasure. There are no Nuget packages here! This was before Nuget where I had to find code to learn from and, ahem, copy. The deck is also something I found online. If I find the source, I&rsquo;ll be sure to attribute it properly.</p>

<p><strong>Code:</strong> <a href="https://github.com/kamranayub/blackjack/">https://github.com/kamranayub/blackjack/</a></p>

<iframe src="http://kamranicus.com//player.vimeo.com/video/5122176" width="500" height="338" frameborder="0" webkitallowfullscreen mozallowfullscreen allowfullscreen></iframe>


<p>This was a sample game I wrote to learn OO design and WPF. There&rsquo;s some cool animations, sound effects, and a pretty fun Blackjack implementation. It&rsquo;s very &ldquo;simple&rdquo; and should be easy to digest. I never got around to implementing all the cool AI but now that it&rsquo;s on GitHub for all to see, maybe someone will pick it up.</p>

<p>I also think it&rsquo;d be fun to port it to Windows 8 C# and XAML. It could be an app I release on the store, free and open source.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[TCCC15: See You Again in April!]]></title>
    <link href="http://kamranicus.com/blog/posts/78/tccc15-see-you-again-in-april"/>
    <updated>2013-10-21T02:11:30+00:00</updated>
    <id>http://kamranicus.com/blog/posts/78/tccc15-see-you-again-in-april</id>
    <content type="html"><![CDATA[<p>Well, that was a blast. Yesterday was <a href="http://twincitiescodecamp.com">TCCC15</a> and it was great. Many awesome sessions, including several by my fellow co-workers <a href="http://twitter.com/ErikOnarhem">Erik Onarheim</a> and <a href="http://twitter.com/StephenErstad">Stephen Erstad</a>.</p>

<p>Thanks to all who attended <a href="http://kamranicus.com/Blog/Posts/77/tccc15-leveling-up-your-windows-phone-app">my talk</a>! I got +10 votes on the code camp speaker site and 9 llamas, which made me feel pretty good!</p>

<p>Please send me feedback at my email or leave a comment here with your thoughts. The code will be available (soon) at <a href="http://github.com/kamranayub/wp-bowling">http://github.com/kamranayub/wp-bowling</a>. It&rsquo;ll be released under an open license but is meant to be educational. The app will also be available soon in the Windows Phone store.</p>

<p>If you missed my talk, you can still get all the bits once I release the app on GitHub. Sure, there won&rsquo;t be droning voice over the code, but you can still see all the steps I took to enhance it.</p>

<p>There was only one big hiccup where Nuget would not install a package, even when I had it in my local repository (it installed the other ones). I remembered some time ago Scott Hanselman mentioning that Nuget packages were just zip files. I quickly changed my Nuget package extension (because I didn&rsquo;t have Nuget Package Explorer installed), got the DLL, and added it as a project reference to quickly save my skin. Thanks Scott!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[TCCC15: Leveling Up Your Windows Phone App]]></title>
    <link href="http://kamranicus.com/blog/posts/77/tccc15-leveling-up-your-windows-phone-app"/>
    <updated>2013-10-17T20:17:14+00:00</updated>
    <id>http://kamranicus.com/blog/posts/77/tccc15-leveling-up-your-windows-phone-app</id>
    <content type="html"><![CDATA[<p>It&rsquo;s talk time again! I&rsquo;m lucky to be giving yet another talk at Twin Cities Code Camp (my second one!). Last time was a lot of fun! This time, we&rsquo;re <a href="http://kamranicus.com/Blog/Posts/66/about-my-web-api-session-at-twin-cities-code-camp">leaving the Web API pasture</a> and exploring the fun world of Windows Phone development.</p>

<p>TCCC15 is October 19 and I&rsquo;ll be <a href="http://twincitiescodecamp.com/TCCC/Fall2013/Schedule.aspx">speaking in Rapson 45 at 2:15pm</a>, so come say hi!</p>

<h2>Why You Should Attend</h2>

<p>If you&rsquo;re an experienced or even a beginning Windows Phone developer, come. If you&rsquo;re still not sure why Windows Phone is cool, come.</p>

<p>The code I&rsquo;ll be showing will start out at a beginner level and move all the way passed intermediate to advanced. By the end, for example, you&rsquo;ll see how to implement a custom message box that fully supports Caliburn binding, dismissal, and the view lifecycle.</p>

<p>Finally, all the code will be available on GitHub soon after (this weekend?). I just need time to remove any secrets and figure out a license that will let me publish the app and own it while still allowing you all to learn from it.</p>

<h2>What We&rsquo;ll Talk About</h2>

<p>I&rsquo;ll be doing a &ldquo;live coding&rdquo; presentation. In reality, I&rsquo;ll be coding and switching to Git branches that showcase the fully completed code then walk through it. The app I&rsquo;ll be presenting is actually a &ldquo;complete&rdquo; app; meaning that it works fine and does everything I need it to. However, anyone whose done app development can tell you that the work isn&rsquo;t done when your app runs and all your tests pass; there&rsquo;s still plenty of work making it &ldquo;production ready.&rdquo; That&rsquo;s what I&rsquo;ll cover in my session!</p>

<p>Right now, my talk is divided into 5 sections covering MVVM, fast resume, logging, about page, and UX improvement. The sections are designed in a way that will expose you to many different parts of my preferred MVVM framework, Caliburn. Along the way, you&rsquo;ll also learn some great tips &amp; tricks I&rsquo;ve found along my journey designing Windows Phone apps.</p>

<p>I&rsquo;m excited because we&rsquo;ll start with the basic premise of an app (which works) and then take it to a production-ready application. Literally, <strong>by the end of the presentation</strong>, I could publish my app to the store and feel good about it.</p>

<p>I hope to see you on Saturday!</p>
]]></content>
  </entry>
  
</feed>
