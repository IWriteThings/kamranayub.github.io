<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Kamranicus]]></title>
  <link href="http://kamranicus.com/atom.xml" rel="self"/>
  <link href="http://kamranicus.com/"/>
  <updated>2015-03-29T23:22:28+00:00</updated>
  <id>http://kamranicus.com/</id>
  <author>
    <name><![CDATA[Kamran]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Triggering a Travis Build Programmatically]]></title>
    <link href="http://kamranicus.com/blog/2015/03/29/triggering-a-travis-build-programmatically/"/>
    <updated>2015-03-29T22:45:30+00:00</updated>
    <id>http://kamranicus.com/blog/2015/03/29/triggering-a-travis-build-programmatically</id>
    <content type="html"><![CDATA[<p>For <a href="http://excaliburjs.com">Exalibur.js</a> we wanted to be able to keep our <code>master</code> branch documentation up-to-date on the website. The website is built using <a href="http://assemble.io">Assemble.io</a> and GitHub pages and <a href="http://kamranicus.com/blog/2015/02/26/continuous-deployment-with-travis-ci/">after successfully automating my blog</a>, naturally I turned to <a href="http://travis-ci.org">Travis CI</a> to set up automated documentation generation.</p>

<p>Travis normally sets up a hook in your GitHub repository to automatically trigger a build after you push a commit (or pull request). This is real nice but unfortunately that&rsquo;s where it stops. If you want to trigger a build <strong>for another repository</strong>, you have to do it manually.</p>

<p>I asked Travis about this and their response is promising (Twitter can be nice sometimes):</p>

<blockquote class="twitter-tweet" data-partner="tweetdeck"><p><a href="https://twitter.com/kamranayub">@kamranayub</a> it&#39;s on the roadmap, and hopefully landing soon &lt;3</p>&mdash; Travis CI (@travisci) <a href="https://twitter.com/travisci/status/582311038772723713">March 29, 2015</a></blockquote>


<script async src="http://kamranicus.com//platform.twitter.com/widgets.js" charset="utf-8"></script>


<p>Until that time, though, something has to be done.</p>

<p>One approach I saw was a <a href="https://github.com/metaodi/travis-ping">small Ruby script</a> to forge a webhook POST message. This is actually a nice idea but since Excalibur uses Node to build, I needed something else and didn&rsquo;t want to port it over.</p>

<p>Instead I borrowed some code from <a href="https://github.com/patrickkettner/travis-ping">@patrickketner</a> that uses the <a href="https://github.com/pwmckenna/node-travis-ci">node-travis-ci</a> npm package to submit a build through the public API. I modified Patrick&rsquo;s code since I need to use GitHub personal access tokens like I did <a href="http://kamranicus.com/blog/2015/02/26/continuous-deployment-with-travis-ci/">previously</a>.</p>

<p>You still need to follow the same steps to set up the <code>GH_TOKEN</code> environment variable but once you do, all you have to do is execute this Node.js script (changing the <code>repo</code>).</p>

<script src="https://gist.github.com/kamranayub/88f963a9ac3d5bf6114d.js"></script>


<p>So for example, in your <code>.travis.yml</code> file, you just need:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>install:
</span><span class='line'>  - npm install travis-ci
</span><span class='line'>after_success:
</span><span class='line'>  - node trigger-build.js</span></code></pre></td></tr></table></div></figure>


<p>All set. Now when you commit to one repository, you can trigger a build for another one. This allows us to automatically <a href="http://excaliburjs.com/docs/api/edge">keep our docs up-to-date</a> with whatever <code>master</code> has.</p>

<p>You can <a href="https://github.com/excaliburjs/Excalibur/blob/master/deploy-docs.js">reference Excalibur</a> to see how we execute the script. Additionally, you can reference <a href="https://github.com/excaliburjs/excaliburjs.github.io/blob/site/.travis.yml">excaliburjs.com&rsquo;s Travis configuration</a> to see how we use <a href="http://typedoc.io">TypeDoc</a> to generate documentation for the latest version of <code>master</code>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Continuous Deployment With Travis-CI]]></title>
    <link href="http://kamranicus.com/blog/2015/02/26/continuous-deployment-with-travis-ci/"/>
    <updated>2015-02-26T16:18:22+00:00</updated>
    <id>http://kamranicus.com/blog/2015/02/26/continuous-deployment-with-travis-ci</id>
    <content type="html"><![CDATA[<p>One of the fun things we did for <a href="http://playsweepstacks.com">Sweep Stacks</a> (our Ludum Dare entry)
during development was to setup continuous deployment. Since our GitHub
repository was public, we could leverage the excellent Travis CI build tool.</p>

<p>This allowed us to work on the game and have our dedicated tester play every new build
hot off the press. It reduced the amount of bugs we shipped with and created a very
fast feedback loop for QA. In the end it allowed us to push a polished game an hour
or so before the deadline hit. After the voting began, it also allowed us to quickly
push bug fixes that were reported by players.</p>

<p>If you&rsquo;re new to Travis CI, you can learn more about what it is and
how to get started by reading <a href="http://tech.pro/tutorial/1749/get-your-ci-on-with-travis-ci">my Tech.pro tutorial</a>.</p>

<p>Once you have your project building, you can then write a little bash script to
deploy it! By &ldquo;deploying&rdquo;, what I really mean is pushing your built code to your production branch on GitHub for final deployment. For example, we use GitHub pages to host Sweep Stacks.</p>

<p>Let&rsquo;s look at the process.</p>

<h2>Customizing Travis Config</h2>

<p>You will need to execute a script to deploy your site, so you will need to
customize your <strong>_travis.yml</strong> file.</p>

<p>Here is what mine looks like for this blog (built using Octopress):</p>

<pre><code>language: ruby
rvm:
  - 1.9.3
branches:
  only:
    - source
env:
  global:
  - GH_REF: github.com/kamranayub/kamranayub.github.io.git
script:
  - bundle exec rake generate
  - chmod ugo+x deploy.sh
  - '[ "${TRAVIS_PULL_REQUEST}" != "false" ] || ./deploy.sh'
</code></pre>

<p>Let&rsquo;s break it down:</p>

<pre><code>language: ruby
</code></pre>

<p>Easy, since I use <a href="http://octopress.org">Octopress</a> (built on Jekyll) for my blog, we need to use Ruby.</p>

<pre><code>rvm:
  - 1.9.3
</code></pre>

<p>The version of Octopress I use requires Ruby 1.9.3.</p>

<pre><code>branches:
  only:
    - source
</code></pre>

<p>We only want Travis to initiate builds for the <code>source</code> branch, since that is where
the source files are for my blog.</p>

<pre><code>env:
  global:
  - GH_REF: github.com/kamranayub/kamranayub.github.io.git
</code></pre>

<p>We will need to be able to clone and push to our repository, so we store it in an
environment variable for easy access. <code>GH_REF</code> will be available to our bash script.</p>

<pre><code>script:
  - bundle exec rake generate
  - chmod ugo+x deploy.sh
  - '[ "${TRAVIS_PULL_REQUEST}" != "false" ] || ./deploy.sh''
</code></pre>

<p>In our Travis script, we build the blog (<code>rake generate</code>). We then mark our <code>deploy.sh</code> file
as executable (since I&rsquo;m on Windows). After that we execute our deploy as long as this isn&rsquo;t
a pull request (don&rsquo;t want to build other people&rsquo;s changes!). Disabling pull request builds
can also be set in your Travis project settings.</p>

<h2>Deploy script</h2>

<p>Here&rsquo;s the script I use to do the deployment:</p>

<script src="https://gist.github.com/kamranayub/ca7b6866ab43771d9da8.js"></script>


<p>As you can see it&rsquo;s fairly simple. One thing to make sure of is hiding your access token (<code>GH_TOKEN</code>),
we use to authenticate which I&rsquo;ll show you how to generate and use.</p>

<h2>The access token</h2>

<p>The whole reason this works is because we are authenticating to GitHub using a <em>Personal
Access Token</em> (stored in <code>GH_TOKEN</code>). This is an OAuth token that you can create when
using Two-Factor Auth to authenticate 3rd party tools like Visual Studio, or in our case, authenticating in a script.</p>

<p>You can generate a token by:</p>

<ol>
<li>Going to <a href="https://github.com/settings/applications">Applications</a> in your Settings</li>
<li>Clicking &ldquo;Generate New Token&rdquo;</li>
<li>Selecting your permissions (for Travis, all you need is <code>public_repo</code>)</li>
<li>Once created, copy the token to your clipboard (you <em>must</em> regenerate it if you lose it)</li>
</ol>


<p>Now we need to configure Travis to expose this token securely to our script.</p>

<ol>
<li>On Travis, go to the Settings of your project (top-right)</li>
<li>Click the &ldquo;Environment Variables&rdquo; tab (and ensure Build Pull Requests is &lsquo;Off&rsquo;)</li>
<li>Create a new environment variable called <code>GH_TOKEN</code></li>
<li>In the Value field, paste in your token, being sure to remove any trailing whitespace</li>
<li>Ensure &ldquo;Display value in build logs&rdquo; is Off</li>
</ol>


<p>Once created, you&rsquo;re all set! <code>GH_TOKEN</code> will now be available to your <strong>deploy.sh</strong> script.</p>

<h2>Testing it out</h2>

<p>You should be ready to test your deployment. Commit any changes you have to your repository
and you should start seeing the build output once it starts. If there are any errors, now
you can fix them until your build passes.</p>

<p>Happy deploying!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Just Released the New Keep Track of My Games Beta]]></title>
    <link href="http://kamranicus.com/blog/2014/11/04/just-released-the-new-keep-track-of-my-games-beta/"/>
    <updated>2014-11-04T00:16:03+00:00</updated>
    <id>http://kamranicus.com/blog/2014/11/04/just-released-the-new-keep-track-of-my-games-beta</id>
    <content type="html"><![CDATA[<p><img src="http://kamranicus.com/blog/images/2014-11-03-ktomg.png" alt="Keep Track of My Games" /></p>

<p>This last weekend I finally released <a href="http://keeptrackofmygames.com">the beta version</a> of the new Keep Track of My Games site. It&rsquo;s been a long time coming but now it actually lets you keep track of your games. The original site only let you track new games and the new version still offers notifications but now you can organize and tag your collection to track games you&rsquo;ve played or haven&rsquo;t played yet (backlog) or new games.</p>

<p>Over the next few months, I want to add social features and more syncing capabilities to services like Steam, Xbox, and PSN. I also want to add deal notifications for any game in your wishlist.</p>

<p>If you use the site, <a href="http://ktomg.uservoice.com">let me know what you think</a> or vote up ideas on the roadmap!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ludum Dare 29 Game Jam Success!]]></title>
    <link href="http://kamranicus.com/blog/2014/05/01/ludum-dare-29-game-jam-success/"/>
    <updated>2014-05-01T13:54:07+00:00</updated>
    <id>http://kamranicus.com/blog/2014/05/01/ludum-dare-29-game-jam-success</id>
    <content type="html"><![CDATA[<p>This last weekend I spent 72 hours working on a game for the <a href="http://ludumdare.com/compo">Ludum Dare 29</a> game jam. LD is a competition where you get a prompt for a game and then have to spend 48 hours (solo) or 72 hours (jam) and bang out a game. The solo competition has strict rules but the game jam has looser rules and allows for team development. It was a caffeine-filled rush and I hope to write a blog post shortly about how it all went down. It was a ton of fun! I worked with my friends <a href="http://erikonarheim.com">Erik Onarheim</a> and <a href="http://twitter.com/joshedeen">Josh Edeen</a>, both primary contributors to the <a href="http://excaliburjs.com">Excalibur.js</a> game engine. I am also a contributor but I haven&rsquo;t done a ton with the engine core, moreso the usability of the API, opening GH issues, and the <a href="http://github.com/excaliburjs/excaliburjs.github.io">website</a>.</p>

<p><img src="http://www.ludumdare.com/compo/wp-content/compo2/342546/34118-shot0.png" alt="Kraken Unchained" /></p>

<p>In the meantime, be sure to check out the fruits of our labor! It&rsquo;s a game where you play as the Kraken and you destroy ships. We originally had a ton of ideas, as you can see in our GitHub repository, but with only 72 hours your scope is pretty narrow. Still, we&rsquo;re very happy with what came out and we&rsquo;re glad that <a href="http://excaliburjs.com">Excalibur.js</a> pulled through!</p>

<p>Play <a href="http://krakenunchained.azurewebsites.net">Kraken Unchained</a>. Vote for it on the <a href="http://www.ludumdare.com/compo/ludum-dare-29/?action=preview&amp;uid=34118">LD site</a>. You can also take a peek at the <a href="http://krakenunchained.azurewebsites.net/post-dare.html">post-LD</a> version which is in on-going development. It does support touch and fixes some issues in IE10/11.</p>

<p>You can also view the entirety of the source code <a href="http://github.com/excaliburjs/ludum-29">on GitHub</a>!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Getting WebSockets to Work on Windows Azure]]></title>
    <link href="http://kamranicus.com/blog/2014/02/09/websockets-on-windows-azure/"/>
    <updated>2014-02-09T03:52:48+00:00</updated>
    <id>http://kamranicus.com/blog/2014/02/09/websockets-on-windows-azure</id>
    <content type="html"><![CDATA[<p>I was banging my head against the wall for the past hour or so wondering why I was falling back to XHR polling when I deployed my Node.js application to Azure. I&rsquo;m using socket.io and everything looks like it&rsquo;s in order, works locally, etc. It was failing with a WebSocket handshake error.</p>

<p>What I saw in the Chrome developer console was something like:</p>

<pre><code>Error during WebSocket handshake: Unexpected response code: 502
</code></pre>

<p>In my Azure Node.js console (<code>azure site log tail SITENAME</code>), I was seeing <code>EPIPE</code> errors.</p>

<p>It turns out, this little tidbit from the <a href="http://blogs.msdn.com/b/windowsazure/archive/2013/11/14/introduction-to-websockets-on-windows-azure-web-sites.aspx">original Windows Azure blog post</a> on Web Sockets did the trick.</p>

<p>Modify your <strong>web.config</strong> and add:</p>

<pre><code>&lt;webSocket enabled="false" /&gt;
</code></pre>

<p>To your <code>system.webServer</code> configuration. Also, another good point in that blog post is to use SSL, since you get SSL for free with a <code>*.azurewebsites.net</code> site.</p>

<p>Hope this helps someone else out there. This should be added to the <a href="http://www.windowsazure.com/en-us/documentation/articles/web-sites-nodejs-chat-app-socketio/">official Azure tutorial</a> on using web sockets with Node.js.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[5 Tips to Improve Your ASP.NET MVC Codebase]]></title>
    <link href="http://kamranicus.com/blog/2014/01/29/5-tips-to-improve-your-mvc-site/"/>
    <updated>2014-01-29T19:16:11+00:00</updated>
    <id>http://kamranicus.com/blog/2014/01/29/5-tips-to-improve-your-mvc-site</id>
    <content type="html"><![CDATA[<p>I have an urge to write a quick list of tips for improving an ASP.NET MVC application because
I just got done reviewing some code for a support ticket at work. It&rsquo;s still fresh
in my mind and I wanted to get some of my thoughts down to share with others. If you
have been doing MVC for a while, I don&rsquo;t think much of this is news. It&rsquo;s more
for those of you that don&rsquo;t do MVC often or are new to MVC.</p>

<!-- More -->


<p>Imagine this: you&rsquo;ve been tasked to figure out why a web application is using 2GB of memory on the
production web servers. You pull down the version that&rsquo;s currently in production and run it locally
to profile and debug.</p>

<p>After looking through the code, doing some profiling, maybe shaking your head a bit, you&rsquo;ve figured
out what the issue is and now you need to give some feedback.</p>

<p>That&rsquo;s exactly what happened to me today and out of that experience, 5 tips you can follow to keep
your ASP.NET MVC codebase working as you&rsquo;d expect.</p>

<h3>1. Understand the queries in your problem domain</h3>

<p>The root cause of the support ticket I received was a simple case of fetching too much
data from the database, causing obscene amounts of memory usage.</p>

<p>It&rsquo;s a common enough issue. You&rsquo;re building a simple blog, it has posts and it has media (images, videos, attachments).
You put a Media array onto your Post domain object. Your Media domain object has all the image
data stored in a byte array. Since you&rsquo;re using an ORM, there&rsquo;s a certain way you need to design your domain model
to play nice; we&rsquo;ve all experienced this.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='c#'><span class='line'><span class="k">public</span> <span class="k">class</span> <span class="nc">BlogPost</span> <span class="p">{</span>
</span><span class='line'>  
</span><span class='line'>  <span class="k">public</span> <span class="n">ICollection</span><span class="p">&lt;</span><span class="n">BlogMedia</span><span class="p">&gt;</span> <span class="n">Media</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">public</span> <span class="k">class</span> <span class="nc">BlogMedia</span> <span class="p">{</span>
</span><span class='line'>  
</span><span class='line'>  <span class="k">public</span> <span class="kt">byte</span><span class="p">[]</span> <span class="n">Data</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">public</span> <span class="kt">string</span> <span class="n">Name</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>There&rsquo;s nothing absolutely wrong with this design. You&rsquo;ve modeled your domain accurately. The problem is, when you
issue a query through your favorite ORM, it eagerly loads all the data associated with your blog post:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='c#'><span class='line'><span class="k">public</span> <span class="n">IList</span><span class="p">&lt;</span><span class="n">BlogPost</span><span class="p">&gt;</span> <span class="n">GetNewestPosts</span><span class="p">(</span><span class="kt">int</span> <span class="n">take</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">_db</span><span class="p">.</span><span class="n">BlogPosts</span><span class="p">.</span><span class="n">OrderByDescending</span><span class="p">(</span><span class="n">p</span> <span class="p">=&gt;</span> <span class="n">p</span><span class="p">.</span><span class="n">PostDate</span><span class="p">).</span><span class="n">Take</span><span class="p">(</span><span class="n">take</span><span class="p">).</span><span class="n">ToList</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>A seemingly innocuous line (unless you&rsquo;ve been bitten), a sneaky monster is lying in wait with big consequences if you haven&rsquo;t disabled
lazy loading or didn&rsquo;t tell your ORM to ignore that big <code>Data</code> property on blog media.</p>

<p>It&rsquo;s important to understand how your ORM queries and maps objects and make sure you only query what you need (for example using projection).</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='c#'><span class='line'><span class="k">public</span> <span class="n">IList</span><span class="p">&lt;</span><span class="n">PostSummary</span><span class="p">&gt;</span> <span class="n">GetNewestPosts</span><span class="p">(</span><span class="kt">int</span> <span class="n">take</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">_db</span><span class="p">.</span><span class="n">BlogPosts</span><span class="p">.</span><span class="n">OrderByDescending</span><span class="p">(</span><span class="n">p</span> <span class="p">=&gt;</span> <span class="n">p</span><span class="p">.</span><span class="n">PostDate</span><span class="p">).</span><span class="n">Take</span><span class="p">(</span><span class="n">take</span><span class="p">).</span><span class="n">Select</span><span class="p">(</span><span class="n">p</span> <span class="p">=&gt;</span> <span class="k">new</span> <span class="n">PostSummary</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">Title</span> <span class="p">=</span> <span class="n">p</span><span class="p">.</span><span class="n">Title</span><span class="p">,</span>
</span><span class='line'>      <span class="n">Id</span> <span class="p">=</span> <span class="n">p</span><span class="p">.</span><span class="n">Id</span>
</span><span class='line'>  <span class="p">}).</span><span class="n">ToList</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>This ensures we only grab the amount of data we really need for the task. If all you&rsquo;re doing is using the title and ID to build a link on the homepage, <em>just ask</em>.</p>

<p>It&rsquo;s OK to have more than 5 methods on a repository; be as granular as you need to be for your UI.</p>

<h3>2. Don&rsquo;t call your repositories from your views</h3>

<p>This one&rsquo;s a little sneaky. Consider this line in an MVC view:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='c#'><span class='line'><span class="n">@foreach</span><span class="p">(</span><span class="kt">var</span> <span class="n">post</span> <span class="k">in</span> <span class="n">Model</span><span class="p">.</span><span class="n">RelatedPosts</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="p">...</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>It <em>seems</em> innocent enough. But if we take a look at what exactly that model property is hiding:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='c#'><span class='line'><span class="k">public</span> <span class="k">class</span> <span class="nc">MyViewModel</span> <span class="p">{</span>
</span><span class='line'>  
</span><span class='line'>  <span class="k">public</span> <span class="n">IList</span><span class="p">&lt;</span><span class="n">BlogPost</span><span class="p">&gt;</span> <span class="n">RelatedPosts</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">get</span> <span class="p">{</span> <span class="k">return</span> <span class="k">new</span> <span class="n">BlogRepository</span><span class="p">().</span><span class="n">GetRelatedPosts</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="n">Tags</span><span class="p">);</span> <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Yikes! Your &ldquo;view model&rdquo; has business logic in it on top of calling a data access method directly. Now you&rsquo;ve introduced data
access code somewhere it doesn&rsquo;t belong and hidden it inside a property. Move that into the controller so you can wrangle it in
and populate the view model conciously.</p>

<p>This is a good opportunity to point out that implementing proper unit tests would uncover issues like this; because you definitely can&rsquo;t intercept calls to something like that and then you&rsquo;d realize injecting a repository into a view model is probably not something you want to be doing.</p>

<h3>3. Use partials and child actions to your advantage</h3>

<p>If you need to perform business logic in a view, that should be a sign you need to revisit your view model and logic.
I don&rsquo;t think it&rsquo;s advisable to do this in your MVC Razor view:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='c#'><span class='line'><span class="err">@</span><span class="p">{</span>
</span><span class='line'>  <span class="kt">var</span> <span class="n">blogController</span> <span class="p">=</span> <span class="k">new</span> <span class="n">BlogController</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">&lt;</span><span class="n">ul</span><span class="p">&gt;</span>
</span><span class='line'><span class="n">@foreach</span><span class="p">(</span><span class="kt">var</span> <span class="n">tag</span> <span class="k">in</span> <span class="n">blogController</span><span class="p">.</span><span class="n">GetTagsForPost</span><span class="p">(</span><span class="n">p</span><span class="p">.</span><span class="n">Id</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>  <span class="p">&lt;</span><span class="n">li</span><span class="p">&gt;</span><span class="n">@tag</span><span class="p">.</span><span class="n">Name</span><span class="p">&lt;/</span><span class="n">li</span><span class="p">&gt;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="p">&lt;/</span><span class="n">ul</span><span class="p">&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Putting business logic in the view is a no-no, but on top of that you&rsquo;re creating a <em>controller</em>! Move that into your action method and use
that view model you made for what it&rsquo;s intended for. You can also move that logic into a separate action method that only gets called inside views
so you can cache it separately if needed.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='c#'><span class='line'><span class="c1">//In the controller:</span>
</span><span class='line'>
</span><span class='line'><span class="na">[ChildActionOnly]</span>
</span><span class='line'><span class="na">[OutputCache(Duration=2000)]</span>
</span><span class='line'><span class="k">public</span> <span class="n">ActionResult</span> <span class="nf">TagsForPost</span><span class="p">(</span><span class="kt">int</span> <span class="n">postId</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="nf">View</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//In the view:</span>
</span><span class='line'>
</span><span class='line'><span class="err">@</span><span class="p">{</span><span class="n">Html</span><span class="p">.</span><span class="n">RenderAction</span><span class="p">(</span><span class="s">&quot;TagsForPost&quot;</span><span class="p">,</span> <span class="k">new</span> <span class="p">{</span> <span class="n">postId</span> <span class="p">=</span> <span class="n">p</span><span class="p">.</span><span class="n">Id</span> <span class="p">});}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Notice the <code>ChildActionOnly</code> attribute. From <a href="http://msdn.microsoft.com/en-us/library/system.web.mvc.childactiononlyattribute(v=vs.118).aspx">MSDN</a>:</p>

<blockquote><p>Any method that is marked with <code>ChildActionOnlyAttribute</code> can be called only with the <code>Action</code> or <code>RenderAction</code> HTML extension methods.</p></blockquote>

<p>This means people can&rsquo;t see your child action by manipulating the URL (if you&rsquo;re using the default route).</p>

<p>Partial views and child actions are useful tools in the MVC arsenal; use them to your advantage!</p>

<h3>4. Cache what matters</h3>

<p>Given the code smells above, what do you think will happen if you only cached your view model?</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='c#'><span class='line'><span class="k">public</span> <span class="n">ActionResult</span> <span class="nf">Index</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="kt">var</span> <span class="n">homepageViewModel</span> <span class="p">=</span> <span class="n">HttpContext</span><span class="p">.</span><span class="n">Current</span><span class="p">.</span><span class="n">Cache</span><span class="p">[</span><span class="s">&quot;homepageModel&quot;</span><span class="p">]</span> <span class="k">as</span> <span class="n">HomepageViewModel</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">homepageViewModel</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">homepageViewModel</span> <span class="p">=</span> <span class="k">new</span> <span class="n">HomepageViewModel</span><span class="p">();</span>
</span><span class='line'>      <span class="n">homepageViewModel</span><span class="p">.</span><span class="n">RecentPosts</span> <span class="p">=</span> <span class="n">_blogRepository</span><span class="p">.</span><span class="n">GetNewestPosts</span><span class="p">(</span><span class="m">5</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">HttpContext</span><span class="p">.</span><span class="n">Current</span><span class="p">.</span><span class="n">Cache</span><span class="p">.</span><span class="n">Add</span><span class="p">(</span><span class="s">&quot;homepageModel&quot;</span><span class="p">,</span> <span class="n">homepageViewModel</span><span class="p">,</span> <span class="p">...);</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="nf">View</span><span class="p">(</span><span class="n">homepageViewModel</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Nothing! There will not be any performance gain because you&rsquo;re accessing the data layer through a controller variable in the view and
through a property in the view model&hellip; caching the view model won&rsquo;t help anything.</p>

<p>Instead, consider caching the <em>output</em> of the MVC action instead:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='c#'><span class='line'><span class="na">[OutputCache(Duration=2000)]</span>
</span><span class='line'><span class="k">public</span> <span class="n">ActionResult</span> <span class="nf">Index</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="kt">var</span> <span class="n">homepageViewModel</span> <span class="p">=</span> <span class="k">new</span> <span class="n">HomepageViewModel</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">homepageViewModel</span><span class="p">.</span><span class="n">RecentPosts</span> <span class="p">=</span> <span class="n">_blogRepository</span><span class="p">.</span><span class="n">GetNewestPosts</span><span class="p">(</span><span class="m">5</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="nf">View</span><span class="p">(</span><span class="n">homepageViewModel</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Notice the handy <code>OutputCache</code> attribute. MVC supports ASP.NET Output Caching; use it to your advantage when it applies. If you are
going to cache the model, your model needs to essentially be a POCO with automatic (and read-only) properties&hellip; not something that calls other
repository methods.</p>

<p>As an added benefit, I haven&rsquo;t ever done this but you can <a href="http://msdn.microsoft.com/en-us/magazine/gg650661.aspx">implement different output caching providers</a> allowing you to cache on
AppFabric/NoSQL/anywhere if you ever needed it. MVC is super extensible.</p>

<h3>5. Don&rsquo;t be afraid to leverage your ORM</h3>

<p>If you&rsquo;re not going to take advantage of your ORM&rsquo;s feature set, you are missing out. In the codebase
I was reviewing, they were using NHibernate but they weren&rsquo;t <em>using</em> it. They were totally missing out on <a href="http://nhforge.org/doc/nh/en/index.html#querycriteria-projection">its advanced projection
capabilities</a> to solve some of these memory issues. Some of this stems from rigidity in using a &ldquo;repository pattern&rdquo; and some of it stems from lack of knowledge.</p>

<p>By taking advantage of EF or NHibernate&rsquo;s features, your repositories can do a lot more than just use basic generic methods. They can shape and
return the data <em>you actually want</em> in your controllers, greatly simplifying your controller logic. Do yourself a favor and read through the ORM&rsquo;s documentation to get a handle on what it can offer.</p>

<p>I think when people adopt the repository pattern, it&rsquo;s almost like they pull down a shade over the bright light shining in from their ORM window. When I started playing with RavenDB, I <strong>got rid</strong> of my repository layer (in fact, my <em>entire data project</em>) and went full-metal using Raven queries in my application service layer with a little bit of extension methods to reuse query logic. I found that <em>a lot</em> of my logic was really context-specific and benefited from simply taking advantage of Raven&rsquo;s extensive features to project, shape, and batch my queries.</p>

<h4>That&rsquo;s just, like, your opinion man&hellip;</h4>

<p>If you think you can abstract your ORM, I challenge you to think about it differently. The ORM <em>is</em> your abstraction and if you believe swapping out your existing ORM with another ORM will be a piece of cake because it&rsquo;s &ldquo;abstracted&rdquo;, you&rsquo;d be surprised. That&rsquo;s what I thought too until I learned the hard way that switching to Raven really changed my entire codebase in ways I didn&rsquo;t expect. Your ORM doesn&rsquo;t only affect data access, it affects the domain and it affects your business logic, it even will have an effect on your UI. By removing the repository abstraction, I actually <em>reduced the overall complexity</em> of my data access code.</p>

<h3>&ldquo;Common sense is not so common&rdquo;</h3>

<p>Or so my dad loves to remind me at times. Sometimes it just takes a good code review to remind oneself that what you thought everyone knew isn&rsquo;t the case; you probably learned it through experience or frantic Googling and just assumed other people already knew it.</p>

<p>I hope this helped someone else out!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Just Released: Have I Been Pwned?]]></title>
    <link href="http://kamranicus.com/blog/2013/12/24/just-released-have-i-been-pwned/"/>
    <updated>2013-12-24T21:33:00+00:00</updated>
    <id>http://kamranicus.com/blog/2013/12/24/just-released-have-i-been-pwned</id>
    <content type="html"><![CDATA[<iframe src="https://skydrive.live.com/embed?cid=0E21D632E0E57AEE&resid=E21D632E0E57AEE%2149403&authkey=AEgpdW0TqRxZH0o" width="192" height="320" frameborder="0" scrolling="no"></iframe>




<iframe src="https://skydrive.live.com/embed?cid=0E21D632E0E57AEE&resid=E21D632E0E57AEE%2149404&authkey=AICb-R354Pi1e38" width="192" height="320" frameborder="0" scrolling="no"></iframe>




<iframe src="https://skydrive.live.com/embed?cid=0E21D632E0E57AEE&resid=E21D632E0E57AEE%2149405&authkey=AOyaP0QJsviTcw4" width="192" height="320" frameborder="0" scrolling="no"></iframe>


<p>I just released <a href="http://www.windowsphone.com/en-us/store/app/have-i-been-pwned/43ca9526-4db2-40ba-9125-60d7abe62b40">Have I Been Pwned?</a> to the Windows Phone store. It&rsquo;s a tiny, tiny app that only took me a couple hours to build. You can find the source code on <a href="https://github.com/kamranayub/HaveIBeenPwned">GitHub</a>.</p>

<p><a href="http://haveibeenpwned.com">HaveIBeenPwned.com</a> is a website created by <a href="http://www.troyhunt.com/">Troy Hunt</a>, a security MVP, that checks to see if your email address appears in a database of all the breached email addresses in prominent hacks like Gawker, Sony, and Adobe. I&rsquo;ve definitely been pwned, so it&rsquo;s a good service to use to quickly see if you need to change your passwords.</p>

<p>I plan to add the background task soon but I wanted the initial release out there so that I can just submit updates to it. If you want to contribute, send me a pull request!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Get Your CI on With Travis CI]]></title>
    <link href="http://kamranicus.com/blog/2013/12/19/get-your-ci-on-with-travis-ci/"/>
    <updated>2013-12-19T05:10:10+00:00</updated>
    <id>http://kamranicus.com/blog/2013/12/19/get-your-ci-on-with-travis-ci</id>
    <content type="html"><![CDATA[<p>I just published an article on Tech.pro that <a href="http://tech.pro/tutorial/1749/get-your-ci-on-with-travis-ci">walks through getting started with Travis CI</a>. We use it for Excalibur.js and that was my first
time configuring it, so I thought I might as well write up a nice tutorial for other people. It&rsquo;s really an awesome service, especially
for open source projects.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Just Released: Bowling Calculator App]]></title>
    <link href="http://kamranicus.com/blog/2013/12/11/just-released-bowling-calculator-app/"/>
    <updated>2013-12-11T03:02:26+00:00</updated>
    <id>http://kamranicus.com/blog/2013/12/11/just-released-bowling-calculator-app</id>
    <content type="html"><![CDATA[<p><img src="http://cdn.marketplaceimages.windowsphone.com/v8/images/4eb4e175-0dd5-4e48-860b-639e6796b01b?rotation=90" alt="Screenshot" /></p>

<p>I just released my second Windows Phone app, <a href="http://www.windowsphone.com/en-us/store/app/bowling-calculator/9287a99a-6068-4ff4-925b-988c8c99dbf6">Bowling Calculator</a>. It&rsquo;s an <a href="http://github.com/kamranayub/wp-bowling">open source app</a> that I created when <a href="http://kamranicus.com/blog/posts/77/tccc15-leveling-up-your-windows-phone-app">I gave my talk at TCCC15</a>.
If you&rsquo;re a fellow developer, feel free to send me a pull request with any bug fixes or enhancements. I want to keep it focused on
the simple use case of scoring a bowling game; I don&rsquo;t need it to track multiple games or keep track of history. It&rsquo;s purpose is to serve
as a production-ready sample app and to also be good at what it aims to do.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MiniProfiler RavenDB Pull Request Accepted]]></title>
    <link href="http://kamranicus.com/blog/2013/12/05/miniprofiler-ravendb-pull-request-accepted/"/>
    <updated>2013-12-05T14:32:08+00:00</updated>
    <id>http://kamranicus.com/blog/2013/12/05/miniprofiler-ravendb-pull-request-accepted</id>
    <content type="html"><![CDATA[<p>I just got a notification that my <a href="https://github.com/MiniProfiler/dotnet/pull/15">pull request</a> for
adding RavenDB support to MiniProfiler went through! It&rsquo;s always really cool to see your contributions
get pulled in. The MiniProfiler guys were really easy-going, <a href="https://github.com/yellis">@yellis</a> was even kind enough to take on
the testing. That kind of acceptance for pull requests is great to see because it makes me feel good
about contributing and is a bit less intimidating.</p>

<!-- More -->


<p>The &ldquo;official&rdquo; MiniProfiler RavenDB plugin does several things:</p>

<ul>
<li>Integrates with all existing MiniProfiler settings</li>
<li>Displays the query duration just like you&rsquo;d expect in a separate raven column

<ul>
<li>This let&rsquo;s you see the raven percentage individually just like SQL</li>
<li>It matches the experience of using EF with MiniProfiler exactly</li>
</ul>
</li>
<li>Allows you to dig into the exact request details ala EF integration</li>
<li>(not included) It&rsquo;s possible to also include the <em>results</em> of the request but in my pull request I don&rsquo;t because it was way too much
overhead to include the full response in the web interface (displaying 50 complex objects in JSON slowed down the UI too much)

<ul>
<li>You can just copy the query to see the results in Raven Studio anyway</li>
<li>Possibly you could just display the query URL and open the request in a new tab</li>
</ul>
</li>
</ul>


<p>I have only just begun my exploration of RavenDB but one of the downsides from moving from EF was
the excellent MiniProfiler integration. I was really surprised to find adding the same level
of support to Raven was pretty straightforward in the latest iteration of MiniProfiler.</p>

<p>There are two packages I found that added profiling to Raven, the <a href="https://github.com/ravendb/ravendb/tree/master/Raven.Client.MvcIntegration">&ldquo;official&rdquo; Raven profiler</a> and another
<a href="http://blog.csainty.com/MvcMiniProfiler.RavenDb/">MiniProfiler plugin</a>, but both of those are lacking. The official one didn&rsquo;t seem to handle AJAX requests
and the other only seemed to add profiling steps; it didn&rsquo;t provide any details about the request.
I wanted <strong>full</strong> integration with MiniProfiler on the same level as EF and I didn&rsquo;t want to enable <em>two</em> profilers at once. I was
already using MiniProfiler to profile my MVC app, I didn&rsquo;t want to enable Raven Profiler and MiniProfiler
at the same time.</p>

<p>There is <a href="https://github.com/ravendb/ravendb.contrib/tree/master/src/Raven.Client.Contrib.Profiling">a RavenDb.Contrib project</a> that added MiniProfiler integration on the level I wanted, but unfortunately it was not integrated
tightly into the MiniProfiler codebase (it was using reflection and other hacks) and it also was not built against the latest version of the codebase
that simplified the steps to create a new custom timing. Still, credit is due, because some of the formatting logic and general direction of my pull
request was taken from that contrib project.</p>

<p>I do not know what the release schedule is like for the next version of MiniProfiler, but I have my
RavenDB-based branch compiled and am using it for my site currently. You can bring down my fork
and compile it yourself too, if you&rsquo;re really interested in using it right now.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Kamranicus: Now With 100% More Octopress]]></title>
    <link href="http://kamranicus.com/blog/2013/12/05/kamranicus-now-with-100-percent-more-octopress/"/>
    <updated>2013-12-05T05:18:28+00:00</updated>
    <id>http://kamranicus.com/blog/2013/12/05/kamranicus-now-with-100-percent-more-octopress</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve just pushed a new version of Kamranicus that is built using the static site generator, <a href="http://octopress.org">Octopress</a>. Octopress uses <a href="http://jekyllrb.com/">Jekyll</a> to generate static sites.</p>

<p>I decided to switch because I can leverage GitHub Pages which are <strong>free</strong> and I can use a custom domain. It&rsquo;s a perfect fit because I can just piggyback on GitHub&rsquo;s cloud hosting for free and not worry about incurring any downtime due to database issues (something that happened more than a few times with the last ASP.NET MVC and SQL-based site).</p>

<p>I really enjoyed setting up Octopress, it was easy to migrate my posts. I highly recommend it! It would be even better to have a .NET/C#-based static site generator that supported all of Jekyll&rsquo;s configuration options, except with Razor-based layouts and templating. Mmmm, that sounds pretty good. Someone get on that.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Just Pushed: Blackjack Sample Game]]></title>
    <link href="http://kamranicus.com/blog/posts/79/just-pushed-blackjack-sample-game"/>
    <updated>2013-12-03T09:09:04+00:00</updated>
    <id>http://kamranicus.com/blog/posts/79/just-pushed-blackjack-sample-game</id>
    <content type="html"><![CDATA[<p>It&rsquo;s finally done! I sat down today and dug through my backups to find my original WPF BlackJack game I wrote way back when WPF was really cool. I converted it to VS 2013, made sure it still ran, organized the solution, and hit deploy. It&rsquo;s now up on GitHub for your learning pleasure. There are no Nuget packages here! This was before Nuget where I had to find code to learn from and, ahem, copy. The deck is also something I found online. If I find the source, I&rsquo;ll be sure to attribute it properly.</p>

<p><strong>Code:</strong> <a href="https://github.com/kamranayub/blackjack/">https://github.com/kamranayub/blackjack/</a></p>

<iframe src="http://kamranicus.com//player.vimeo.com/video/5122176" width="500" height="338" frameborder="0" webkitallowfullscreen mozallowfullscreen allowfullscreen></iframe>


<p>This was a sample game I wrote to learn OO design and WPF. There&rsquo;s some cool animations, sound effects, and a pretty fun Blackjack implementation. It&rsquo;s very &ldquo;simple&rdquo; and should be easy to digest. I never got around to implementing all the cool AI but now that it&rsquo;s on GitHub for all to see, maybe someone will pick it up.</p>

<p>I also think it&rsquo;d be fun to port it to Windows 8 C# and XAML. It could be an app I release on the store, free and open source.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[TCCC15: See You Again in April!]]></title>
    <link href="http://kamranicus.com/blog/posts/78/tccc15-see-you-again-in-april"/>
    <updated>2013-10-21T02:11:30+00:00</updated>
    <id>http://kamranicus.com/blog/posts/78/tccc15-see-you-again-in-april</id>
    <content type="html"><![CDATA[<p>Well, that was a blast. Yesterday was <a href="http://twincitiescodecamp.com">TCCC15</a> and it was great. Many awesome sessions, including several by my fellow co-workers <a href="http://twitter.com/ErikOnarhem">Erik Onarheim</a> and <a href="http://twitter.com/StephenErstad">Stephen Erstad</a>.</p>

<p>Thanks to all who attended <a href="http://kamranicus.com/Blog/Posts/77/tccc15-leveling-up-your-windows-phone-app">my talk</a>! I got +10 votes on the code camp speaker site and 9 llamas, which made me feel pretty good!</p>

<p>Please send me feedback at my email or leave a comment here with your thoughts. The code will be available (soon) at <a href="http://github.com/kamranayub/wp-bowling">http://github.com/kamranayub/wp-bowling</a>. It&rsquo;ll be released under an open license but is meant to be educational. The app will also be available soon in the Windows Phone store.</p>

<p>If you missed my talk, you can still get all the bits once I release the app on GitHub. Sure, there won&rsquo;t be droning voice over the code, but you can still see all the steps I took to enhance it.</p>

<p>There was only one big hiccup where Nuget would not install a package, even when I had it in my local repository (it installed the other ones). I remembered some time ago Scott Hanselman mentioning that Nuget packages were just zip files. I quickly changed my Nuget package extension (because I didn&rsquo;t have Nuget Package Explorer installed), got the DLL, and added it as a project reference to quickly save my skin. Thanks Scott!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[TCCC15: Leveling Up Your Windows Phone App]]></title>
    <link href="http://kamranicus.com/blog/posts/77/tccc15-leveling-up-your-windows-phone-app"/>
    <updated>2013-10-17T20:17:14+00:00</updated>
    <id>http://kamranicus.com/blog/posts/77/tccc15-leveling-up-your-windows-phone-app</id>
    <content type="html"><![CDATA[<p>It&rsquo;s talk time again! I&rsquo;m lucky to be giving yet another talk at Twin Cities Code Camp (my second one!). Last time was a lot of fun! This time, we&rsquo;re <a href="http://kamranicus.com/Blog/Posts/66/about-my-web-api-session-at-twin-cities-code-camp">leaving the Web API pasture</a> and exploring the fun world of Windows Phone development.</p>

<p>TCCC15 is October 19 and I&rsquo;ll be <a href="http://twincitiescodecamp.com/TCCC/Fall2013/Schedule.aspx">speaking in Rapson 45 at 2:15pm</a>, so come say hi!</p>

<h2>Why You Should Attend</h2>

<p>If you&rsquo;re an experienced or even a beginning Windows Phone developer, come. If you&rsquo;re still not sure why Windows Phone is cool, come.</p>

<p>The code I&rsquo;ll be showing will start out at a beginner level and move all the way passed intermediate to advanced. By the end, for example, you&rsquo;ll see how to implement a custom message box that fully supports Caliburn binding, dismissal, and the view lifecycle.</p>

<p>Finally, all the code will be available on GitHub soon after (this weekend?). I just need time to remove any secrets and figure out a license that will let me publish the app and own it while still allowing you all to learn from it.</p>

<h2>What We&rsquo;ll Talk About</h2>

<p>I&rsquo;ll be doing a &ldquo;live coding&rdquo; presentation. In reality, I&rsquo;ll be coding and switching to Git branches that showcase the fully completed code then walk through it. The app I&rsquo;ll be presenting is actually a &ldquo;complete&rdquo; app; meaning that it works fine and does everything I need it to. However, anyone whose done app development can tell you that the work isn&rsquo;t done when your app runs and all your tests pass; there&rsquo;s still plenty of work making it &ldquo;production ready.&rdquo; That&rsquo;s what I&rsquo;ll cover in my session!</p>

<p>Right now, my talk is divided into 5 sections covering MVVM, fast resume, logging, about page, and UX improvement. The sections are designed in a way that will expose you to many different parts of my preferred MVVM framework, Caliburn. Along the way, you&rsquo;ll also learn some great tips &amp; tricks I&rsquo;ve found along my journey designing Windows Phone apps.</p>

<p>I&rsquo;m excited because we&rsquo;ll start with the basic premise of an app (which works) and then take it to a production-ready application. Literally, <strong>by the end of the presentation</strong>, I could publish my app to the store and feel good about it.</p>

<p>I hope to see you on Saturday!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Minnesota Developer Conference 2013: Connected Apps]]></title>
    <link href="http://kamranicus.com/blog/posts/76/minnesota-developer-conference-2013-connected-apps"/>
    <updated>2013-09-24T23:58:10+00:00</updated>
    <id>http://kamranicus.com/blog/posts/76/minnesota-developer-conference-2013-connected-apps</id>
    <content type="html"><![CDATA[<p><strong>Update:</strong> My session slides are available online at <a href="https://speakerdeck.com/kamranayub/bending-apis-to-your-will-using-windows-phone">SpeakerDeck</a>. If you attended, I hope you enjoyed it!</p>

<p>Will you be attending <a href="http://mdc.ilmservice.com">Minnesota Developer Conference</a>? Come see me at 12:45pm if you want to get jump started with creating connected Windows Phone apps. I&rsquo;ll be talking about how to connect to APIs and useful patterns I&rsquo;ve learned throughout my (limited) development experience. Even if you <em>have</em> developed an app, I hope to share some tips that might help improve your app and it&rsquo;ll definitely provide a jumping off point if you haven&rsquo;t started yet.</p>

<p>My current rehearsals clock in at around a 45 minute presentation which leaves a healthy 30 minutes for questions and seeing any live code, which will be at the audiences&#8217; whim. I&rsquo;ll be walking through a real application I&rsquo;m in the middle of developing so I hope to share some patterns and practices that I&rsquo;ve found useful when developing connected apps like MVVM, Async/Await, offline storage, and more.</p>

<p>See you on Thursday!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Test Retina Images Without a Retina Screen]]></title>
    <link href="http://kamranicus.com/blog/posts/75/test-retina-images-without-a-retina-screen"/>
    <updated>2013-07-26T02:36:22+00:00</updated>
    <id>http://kamranicus.com/blog/posts/75/test-retina-images-without-a-retina-screen</id>
    <content type="html"><![CDATA[<p>This comes directly from a tip <a href="https://coderwall.com/p/engjbw">Mike Zarandona posted on Coderwall</a>, which I&rsquo;m posting here to keep track of it:</p>

<hr />

<p>I was sick of borrowing a friend&rsquo;s retina laptop to test retina images. After a little poking around, I discovered a few options baked right into the most popular browsers.</p>

<p>In Google Chrome:</p>

<ul>
<li>Browse to chrome://flags</li>
<li>Search for and enable Force high DPI mode</li>
</ul>


<p>In FireFox:</p>

<ul>
<li>Browse to about:config</li>
<li>Search for layout.css.devPixelsPerPx</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Debounced After Render Pattern for Knockout.js]]></title>
    <link href="http://kamranicus.com/blog/posts/74/debounced-after-render-pattern-for-knockoutjs"/>
    <updated>2013-06-06T00:18:28+00:00</updated>
    <id>http://kamranicus.com/blog/posts/74/debounced-after-render-pattern-for-knockoutjs</id>
    <content type="html"><![CDATA[<p>When dealing with Knockout-based lists, I think the built-in events/callbacks provided by Knockout leave a bit to be desired. For example, a common case I here people complain about is that the <code>afterRender</code> callback for the <code>foreach/template</code> bindings executes for each item in the array, not after all the elements have been rendered.</p>

<p>There are probably better ways to <em>resolve</em> this using Promises (pun intended), but here&rsquo;s one way to attack it using <a href="http://underscorejs.org/docs/underscore.html#section-65">Underscore.js</a>&rsquo;s <code>debounce</code> method that&rsquo;s easy to understand and use.</p>

<p>The <code>debounce</code> method:</p>

<blockquote><p>Returns a function, that, as long as it continues to be invoked, will not be triggered. The function will be called after it stops being called for N milliseconds. If immediate is passed, trigger the function on the leading edge, instead of the trailing.</p></blockquote>

<p>This is useful for high-octane events like rendering elements, window resizing, or capture mouse events.</p>

<p>Here&rsquo;s a Fiddle that demonstrates a way to execute a callback after all the elements in a list have been rendered (and filters them to only <code>li</code> DOM elements):</p>

<iframe width="100%" height="300" src="http://jsfiddle.net/kamranayub/yEhEt/3/embedded/" allowfullscreen="allowfullscreen" frameborder="0"></iframe>


<p>This can be cleaned up multiple ways, I think a cleaner way to implement this would be through resolving a promise and then overriding the <code>foreach</code> and <code>template</code> binding to support it, for example, <code>afterAllRender</code> or something.</p>

<p>But this gets the job done and is easy to implement!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Slides and Resources for TCCC14 Web API Talk]]></title>
    <link href="http://kamranicus.com/blog/posts/73/slides-and-resources-for-tccc14-web-api-talk"/>
    <updated>2013-04-30T03:39:24+00:00</updated>
    <id>http://kamranicus.com/blog/posts/73/slides-and-resources-for-tccc14-web-api-talk</id>
    <content type="html"><![CDATA[<p>I gave a talk this past weekend at Twin Cities Code Camp; it was my first public talk (hopefully the first of many?). It was a deep dive on selected ASP.NET Web API topics (as voted on by the audience) and you can view it on <a href="https://speakerdeck.com/kamranayub/diving-into-the-deep-wih-asp-dot-net">SpeakerDeck</a>.</p>

<p>You can also <a href="http://sdrv.ms/ZgUuGI">download the notes</a> (i.e. links, comments, resources) from my SkyDrive.</p>

<p>If you were there and saw me present, <a href="http://spkr8.com/t/21961">please rate how I did</a>! It&rsquo;s the only way I really have of getting feedback.</p>

<h3>Thoughts</h3>

<p>I thought it went decent for my first talk. I was pretty nervous; I even forgot to say my name&hellip; but whatever! Hopefully by volunteering to do more talks I&rsquo;ll get the hang of it. All those business leadership classes paid off, my friends said that I didn&rsquo;t appear nervous, I projected my voice, and some folks were kind enough to say they liked it which is all I wanted. I also got the largest room right after lunch and it was probably 200 degrees. The Wi-Fi was deathly slow (&lt; 1Mbps) so that didn&rsquo;t help. Next time I&rsquo;ll plan to either take more screenshots or limit the online interaction.</p>

<p>I also think I had too many topics; I knew we couldn&rsquo;t get through all of them but one of my co-workers suggested to scale it down in order to hit specific topics and spend more time on each. It&rsquo;s so hard because they&rsquo;re all great topics to talk about&hellip; I didn&rsquo;t even list content negotiation or automatic documentation.</p>

<p>Overall I was pleased with the outcome; I said what I wanted to say and it was a lot of fun.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[I Was a UX Expert When I Was 13]]></title>
    <link href="http://kamranicus.com/blog/posts/72/i-was-a-ux-expert-when-i-was-13"/>
    <updated>2013-04-26T07:05:48+00:00</updated>
    <id>http://kamranicus.com/blog/posts/72/i-was-a-ux-expert-when-i-was-13</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve been reading Word documents on my computer that I&rsquo;ve had since I was a teen. I&rsquo;ve been keeping them all through my PC upgrades for no particular reason except for times like these when I need to laugh at myself.</p>

<p>I just found this nugget in some random debate outline, I was 13 when I wrote it (I had just started working in web design):</p>

<blockquote><p>Team work, in my opinion, not only involves working with your teammates, but working with your audience to find out what they want. What company does not ask their audience what they want? I don&rsquo;t think many do.</p></blockquote>

<p>Little did I know.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Anecdote: I Frustrate Easily]]></title>
    <link href="http://kamranicus.com/blog/posts/71/anecdote-i-frustrate-easily"/>
    <updated>2013-04-25T01:59:46+00:00</updated>
    <id>http://kamranicus.com/blog/posts/71/anecdote-i-frustrate-easily</id>
    <content type="html"><![CDATA[<p>When I first started my &ldquo;real job&rdquo; where I&rsquo;m at I was put on an internal site. It was a beast, it had a lot of history, and more importantly, it was <strong>damn ugly and sometimes hard to use</strong>. The site was used by developers and no one on the team had much UI experience. I was frustrated. I couldn&rsquo;t work on this thing and have it be ugly, why should we have a tool that gets used every day that&rsquo;s a bear to use? &ldquo;Because it&rsquo;s always been that way&rdquo; wasn&rsquo;t good enough for me. For about a month I worked outside of work, off the sprint, and I re-tooled the CSS, markup, and UX while still maintaining the overall functionality and behavior. No one asked, I just did it <strong>because I was frustrated.</strong> Sure, at some points, people were sort of wondering what the heck I was doing but in the end, everyone loved the changes and everyone keeps mentioning how great the changes have been since. I believe it was also the start of a bigger push to make things easy to use internally but I suppose correlation does not equal causation :)</p>

<p>I think that&rsquo;s what <a href="http://zachholman.com/">Zach Holman</a> means when he says to <a href="https://speakerdeck.com/holman/keeping-people?slide=31">hire people who frustrate easily</a> and that&rsquo;s what triggered this anecdote.</p>
]]></content>
  </entry>
  
</feed>
