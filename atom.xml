<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Kamranicus]]></title>
  <link href="http://kamranicus.com/atom.xml" rel="self"/>
  <link href="http://kamranicus.com/"/>
  <updated>2016-02-24T02:35:44+00:00</updated>
  <id>http://kamranicus.com/</id>
  <author>
    <name><![CDATA[Kamran]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Securing Secrets Using Azure Key Vault and Config Encryption]]></title>
    <link href="http://kamranicus.com/blog/2016/02/24/azure-key-vault-config-encryption-azure/"/>
    <updated>2016-02-24T02:30:00+00:00</updated>
    <id>http://kamranicus.com/blog/2016/02/24/azure-key-vault-config-encryption-azure</id>
    <content type="html"><![CDATA[<p>Secrets. We all have them. I&rsquo;m talking about secrets like your database connection strings, API keys and encryption keys. Where are you storing yours? Are you storing them&hellip;</p>

<ol>
<li>In your application&rsquo;s source code?</li>
<li>In a config file (<code>appSettings</code> or otherwise) checked into source control?</li>
<li>In a database?</li>
<li>In a managed portal, like Azure?</li>
</ol>


<p>I hope you aren&rsquo;t storing them hardcoded. You&rsquo;re probably doing option 2 or a hybrid of options 2-4. Even if you use an external data source, it&rsquo;s hard to escape the need for secrets in local development unless you force your app to rely on having connectivity which makes it hard to work offline.</p>

<p>In this post I&rsquo;m going to provide some suggestions on how to store your secrets better using Azure Key Vault and config file encryption, specifically in the context of Azure but the concepts apply to any hosting environment.</p>

<!-- More -->


<h2>Why bother?</h2>

<p>Some of you might say, &ldquo;It&rsquo;s okay if my secret is in a config file or an environment variable, only an admin can see that.&rdquo; You&rsquo;d assume so, wouldn&rsquo;t you? But I ran into an exploit last year where you could <strong>ANY</strong> file on the web server using a custom file handler vulnerability (the exploit has since been fixed by the vendor). Just pass in the path you cared about and the handler would helpfully spit out the contents of the file! If your secrets are in cleartext in your configs, are you checking them into source control? Anyone can read those if they have access. If you work in an organization and your code is on the web servers, anyone with access to those servers can see the file system (and therefore, your precious &ldquo;secrets&rdquo;).</p>

<p>You might also (rightfully) say that if an attacker got access to your Azure portal, it&rsquo;s game over anyway. Yes, absolutely. If an app is compromised at the filesystem level where an attacker can upload files, you&rsquo;re pretty much done for. That&rsquo;s why your portal account should have a strong password and have Two-Factor Authentication enabled. If you&rsquo;re using source control integration, that also needs to be protected with the same amount of security to prevent someone from checking in malicious files and having them deployed through automation to the web server&mdash;go and <a href="https://help.github.com/articles/about-two-factor-authentication/">enable TFA for GitHub</a> if you haven&rsquo;t already.  The goal is that we want to avoid storing plaintext secrets on the filesystem and in the portal itself, instead opting to store them in a secure location so that only <strong>our application</strong> has access to them, no one else.</p>

<p>There are more benefits to separating your secrets from your application:</p>

<ul>
<li><strong>Logging</strong> &mdash; Azure Key Vault logs all operations, so if someone did compromise your application, you&rsquo;d have the logs or could monitor them closely for strange actions</li>
<li><strong>Least privilege</strong> &mdash; You can grant a service principal Read-only access so even if the app was compromised, an attacker couldn&rsquo;t change or delete anything (unless they also had access to change the policies in Key Vault)</li>
<li><strong>As-needed access</strong> &mdash; By storing secrets away from your application, you at <em>least</em> guarantee only the application can access secrets whereas anyone with Read access to the portal can see app settings</li>
<li><strong>Defense in depth</strong> &mdash; You&rsquo;re just adding one more layer of security between an attacker and your data</li>
<li><strong>Shared storage</strong> &mdash; If you have multiple apps or services, using a single vault is useful and you can grant access policies at the secret or key level</li>
<li><strong>Encrypted configs</strong> &mdash; Instead of storing secrets in cleartext in source control, I will show you how to encrypt sections of your web.config (and it works in Azure!)</li>
<li><strong>Right thing to do</strong> &mdash; You owe it to your users and to your business to protect their data to the best of your ability</li>
</ul>


<p><a href="http://blogs.msdn.com/b/data_insights_global_practice/archive/2015/09/24/protecting-sensitive-data-with-azure-key-vault.aspx">This article</a> sums it up nicely:</p>

<blockquote><p>One of the key security principals that is implicitly being applied here is to compartmentalize management of privileged data to security domains for which this is appropriate. An instance of Key Vault is used to manage the Twitter keys as a shared resource in the customer&rsquo;s environment, with access granted by whomever manages the Twitter account on an as-needed basis to specific applications and users. Applications are then responsible for managing only their application-specific Key Vault access tokens.</p></blockquote>

<p>With that in mind, let&rsquo;s move on!</p>

<h2>Encryption keys</h2>

<p>The most important secret in your app is probably your <strong>encryption key</strong> (aka &ldquo;keys&rdquo;). This is the skeleton key to your kingdom. If someone got ahold of it, they could unlock your user&rsquo;s data and tarnish your reputation. If your Azure or portal account was compromised (even after Two Factor Auth), would attackers have access to your keys? They would if you stored them in a config or in the portal. So how can you protect this key if none of the options above truly secure it?</p>

<p>Well, what if I told you that <strong>you don&rsquo;t need to know the key</strong>. If nobody knows it, no one can steal it! But how does that work exactly? Magic? Not exactly&hellip;</p>

<h2>Welcome to the vault</h2>

<p>Enter <a href="https://azure.microsoft.com/en-us/services/key-vault/">Azure Key Vault</a>.</p>

<p>Azure Key Vault does two things:</p>

<ul>
<li>It stores encryption &ldquo;keys&rdquo; which <strong>you cannot retrieve</strong> so that you can encrypt and decrypt data, you&rsquo;d use this for user data like PII (Personally Identifiable Information)</li>
<li>It stores &ldquo;secrets&rdquo; which <strong>you can</strong> retrieve, these are things like passwords, API tokens, or other items you pass around</li>
</ul>


<p>A word about how Azure Key Vault stores keys. It&rsquo;s basically the most hardcore thing ever. If you opt for the Premium service tier, your key is stored on <strong>dedicated hardware</strong> called a Hardware Security Module (HSM). I had never heard of these so let me clue you in: they are <strong><a href="https://en.wikipedia.org/wiki/Hardware_security_module">devices</a></strong> where all they do is encrypt and decrypt data and never let the key leave their boundaries. That means, essentially, you present the data you want to encrypt to the device, it encrypts it using a key that <strong>nobody knows</strong>, and spits out the ciphertext for you to store in your system. Azure Key Vault also supports <em>software-protected</em> keys which can operate under the same conditions except they are not stored on a dedicated device. The HSM is validated to be <a href="https://en.wikipedia.org/wiki/FIPS_140-2#Level_2">FIPS 140-2 Level 2</a> compliant (out of 4 levels). What does that mean exactly?</p>

<p>Well, here&rsquo;s Level 1 security:</p>

<blockquote><p>Level 1 provides the lowest level of security. Basic security requirements are specified for a cryptographic module (e.g., at least one Approved algorithm or Approved security function shall be used). No specific physical security mechanisms are required in a Security Level 1 cryptographic module beyond the basic requirement for production-grade components. An example of a Security Level 1 cryptographic module is a personal computer (PC) encryption board.</p></blockquote>

<p>OK, so we&rsquo;re still talking <strong>a dedicated encryption board</strong> to secure keys&hellip; how about Level 2?</p>

<blockquote><p>Security Level 2 improves upon the physical security mechanisms of a Security Level 1 cryptographic module by requiring features that show evidence of tampering, including tamper-evident coatings or seals that must be broken to attain physical access to the plaintext cryptographic keys and critical security parameters (CSPs) within the module, or pick-resistant locks on covers or doors to protect against unauthorized physical access.</p></blockquote>

<p>Jeez. That means there are <em>physical defenses</em> in place on the device to prevent intrusion. We&rsquo;re not even talking intrusion through the network, no, literally these devices are secured so a <strong>human being</strong> cannot access them. Even if it&rsquo;s not Level 4, that&rsquo;s still <em>way</em> more secure than in your App.config or your database or web portal. And even Wikipedia admits that &ldquo;<a href="https://en.wikipedia.org/wiki/Hardware_security_module#Security">very few</a>&rdquo; HSMs are Level 4 validated.</p>

<p>You&rsquo;d think this hardcore security would be pricey right? Not at all. I think the <a href="https://azure.microsoft.com/en-us/pricing/details/key-vault/">$1/key/mo</a> price tag is pretty fair considering the security offered.</p>

<h2>What about secrets?</h2>

<p>OK. So Azure Key Vault is a pretty good solution to our encryption key problem. What about generic secrets, stuff you will need to pass within your application or to external services? Azure Key Vault supports that without any trouble, though they won&rsquo;t be stored on dedicated hardware. They will still be stored separately from your application behind lock and key which is our ultimate goal.</p>

<h2>But even a safe needs a combination, won&rsquo;t the <em>vault</em> require a key?</h2>

<p>Yes! And you are right to point out that it doesn&rsquo;t really solve the secrets problem if the key I need to use to unlock the vault is <em>also</em> stored in my app.config or portal or database. Luckily, there&rsquo;s a way to solve that!</p>

<h2>Certificates to the rescue</h2>

<p>Instead of using the default authentication to Azure AD, a &ldquo;client ID&rdquo; and &ldquo;secret token&rdquo;, we will actually provide a secure X.509 certificate that we&rsquo;ll upload to Azure. Since you can&rsquo;t download the certificate from Azure or access the private key, it will authenticate your application without exposing the key to your vault in a config or portal interface.</p>

<h2>Let&rsquo;s do it!</h2>

<p>I followed these two guides for setting up Key Vault and authenticating using a certificate, so I won&rsquo;t repeat the steps here but I do have several notes below that augment the guides:</p>

<ol>
<li><a href="https://azure.microsoft.com/en-us/documentation/articles/key-vault-get-started/">Getting Started with Azure Key Vault</a></li>
<li><a href="https://azure.microsoft.com/en-us/documentation/articles/key-vault-use-from-web-application">Using Azure Key Vault from a Web Application</a></li>
</ol>


<p>Follow the appendix in guide 2 to generate a certificate to authenticate to Azure AD.</p>

<p>As you work through the guides, reference the notes below.</p>

<h3>PowerShell Cmdlet Changes</h3>

<p>For guide 2, in Azure SDK 2.8+, the cmdlets have changed now:</p>

<ul>
<li><code>New-AzureADApplication</code> is now <code>New-AzureRmADApplication</code></li>
<li><code>New-AzureADServicePrincipal</code> is now <code>New-AzureRmADServicePrincipal</code></li>
</ul>


<p>When executing <code>Set-AzureKeyVaultAccessPolicy</code> make sure to add the switch <code>-PermissionsToSecrets all</code> to grant permissions to manage secrets.</p>

<p><strong>Note:</strong> The article tells you to grant <code>all</code> permissions to both keys and secrets. In reality, for production, you may want to only grant specific rights. See <a href="https://msdn.microsoft.com/en-us/library/dn903607.aspx">this MSDN article</a> for the different access policies.</p>

<h3>Certificates&hellip;?</h3>

<p>If you&rsquo;re like me, you probably find certificates can be confusing. Are you making an SSL cert? Not exactly. <em>Most</em> SSL certs are X.509 certs (not all) but they also can be used to encrypt web traffic. &ldquo;Plain&rdquo; X.509 certs can be used to sign things or encrypt/authenticate, which is what we&rsquo;re doing. If you Google around, you&rsquo;ll see they can be called &ldquo;client certificates&rdquo; or &ldquo;personal&rdquo; certificates. There are two places a cert can be installed (&ldquo;stores&rdquo;), one is the &ldquo;Local Machine&rdquo; store and the other is the &ldquo;Current User&rdquo; store. The machine store can be accessed by <em>any</em> user account, the current user store can only be accessed by the user running the process (usually, you). A &ldquo;cer&rdquo; file is the <strong>public key</strong> for your certificate. You can distribute it to anyone. The &ldquo;pfx&rdquo; file contains <strong>both the private AND public key</strong>. <strong>DO NOT GIVE IT TO ANYONE.</strong> You want the PFX file for yourself only and to import into your PC and into Azure. The PFX file is protected by a password, I recommend a strong one and <em>don&rsquo;t lose it.</em> Rule of thumb: <strong>NEVER let the private key leave your machine. This means don&rsquo;t email it. Yes, this has really happened before.</strong></p>

<h3>Certificate key length</h3>

<p>In guide 2, you create a self-signed certificate. For production should you use a commercially-signed cert? I can&rsquo;t think of a reason why that would add any extra benefit since the <strong>key length</strong> is what matters (if you <em>can</em> think of a reason, I&rsquo;d be interested in hearing it). What I <em>would</em> recommend is generating a certificate with a 4096-bit length key instead of the default 2048 length. In Windows 10 at least, this works:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>makecert -sv mykey.pvk -n "cn=KVWebApp" KVWebApp.cer -b 02/23/2016 -e 02/23/2018 -len 4096 -r</span></code></pre></td></tr></table></div></figure>


<p>If you live in fear, you can buy &ldquo;personal&rdquo; certs from trusted authorities like <a href="https://ssl.comodo.com/personal-authentication.php">Comodo</a> and use that instead.</p>

<h3>Install the certificate</h3>

<p>For guide 2, after generating the certificate you need to install it locally to test Azure Key Vault. If you run your app under IIS and the app pool is <code>ApplicationPoolIdentity</code>, it&rsquo;s best to just <a href="http://www.iis.net/learn/manage/configuring-security/application-pool-identities">change it</a> to run under your account. Trust me, it&rsquo;ll be easier. Since Azure requires the certificate to be in the <code>CurrentUser</code> store, the default app pool runs under a different account (see <a href="http://stackoverflow.com/a/3176253/109458">this StackOverflow post</a>), so you&rsquo;d have to install the cert at the machine level.</p>

<p>In the folder where your cert was generated, right-click the <code>.pfx</code> file and select Install. Enter the password you chose. You can also <a href="http://www.databasemart.com/howto/SQLoverssl/How_To_Import_Personal_Certificate_With_MMC.aspx">follow this guide</a> to do it from the MMC console.</p>

<h2>Alright, so what about local secrets?</h2>

<p>We have the cloud secrets squared away. You <em>could</em> still use Key Vault locally, except you&rsquo;d depend on connectivity (and pay for the usage). Instead, there&rsquo;s something we can do even if we don&rsquo;t end up using Azure Key Vault. We can <strong>encrypt the settings</strong> in the web.config.</p>

<p>I started with <a href="http://eren.ws/2014/02/04/encrypting-the-web-config-file-of-an-azure-cloud-service">this guide</a> to encrypting the configuration sections (but <strong>NOT</strong> <code>appSettings</code>, see below). You <strong>cannot</strong> use the same certificate you generated in the tutorial above (well, maybe you could but you need the <code>-exchange sky</code> switch to <code>makecert</code> and I didn&rsquo;t try that initially so I generated a separate certificate).</p>

<p>There&rsquo;s another thing. You also need to use a different <code>PKCS12ProtectedConfigurationProvider</code>. The one provided <strong>only</strong> searches the <code>LocalMachine</code> certificate store but in Azure, your cert is installed for the current user, so the provider fails to decrypt the config when you try to build your app on Azure because it cannot find the certificate. You need a provider that can specify the <code>StoreLocation</code> of where to load certificates from. For Azure, it must be the <strong>CurrentUser</strong> store.</p>

<p>Here&rsquo;s my modified version:</p>

<script src="https://gist.github.com/kamranayub/eaf4c4e4983ecb2d0b37.js"></script>


<p>I&rsquo;ve also added it to <a href="https://github.com/kamranayub/PKCS12ProtectedConfigurationProvider">GitHub</a>. You can download the DLL directly from <a href="https://github.com/kamranayub/PKCS12ProtectedConfigurationProvider/releases/tag/v1.0.1">GitHub</a>. Once done, you can change the entry in the config to:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;configProtectedData&gt;
</span><span class='line'>    &lt;providers&gt;
</span><span class='line'>        &lt;add name="CustomProvider"
</span><span class='line'>             thumbprint="xxx"
</span><span class='line'>             storeLocation="LocalMachine"
</span><span class='line'>             type="Pkcs12ProtectedConfigurationProvider.Pkcs12ProtectedConfigurationProvider, PKCS12ProtectedConfigurationProvider, Version=1.0.1.0, Culture=neutral, PublicKeyToken=455a6e7bdbdc9023" /&gt;
</span><span class='line'>    &lt;/providers&gt;
</span><span class='line'>&lt;/configProtectedData&gt;</span></code></pre></td></tr></table></div></figure>


<p>A few notes:</p>

<ol>
<li>This <strong>is not</strong> the same certificate you generated for Azure AD and Key Vault. This is a separate RSA certificate for use with configuration encryption. You must <em>also</em> upload the PFX for this to Azure.</li>
<li>You will need to install the PKCS12ProtectedConfigurationProvider.dll to the GAC before running the <code>aspnet_regiis</code> command. Just run <code>gacutil -i PKCS12ProtectedConfigurationProvider.dll</code> beforehand.</li>
<li>You will need to reference the custom compiled DLL instead of the one in the guide</li>
<li>I found <a href="http://stackoverflow.com/questions/17189441/web-config-encryption-for-web-sites">this StackOverflow question</a> which asks about encrypting the web.config for Azure web apps. Using the PKCS12 provider, <strong>it works.</strong></li>
</ol>


<h3>Storing secrets outside <code>&lt;appSettings&gt;</code></h3>

<p>I ran into a major hurdle that caused me some grief. It turns out, <strong>YOU CANNOT ENCRYPT THE <code>&lt;appSettings&gt;</code> SECTION!</strong> See <a href="http://stackoverflow.com/questions/15067759/why-cant-i-encrypt-web-config-appsettings-using-a-custom-configprotectionprovid">this SO question</a>.</p>

<p>Other sections are just fine but for whatever reason, IIS just <strong>requires</strong> you to GAC the config provider for it to work. In Azure web apps, we cannot GAC. So what can we do? We can use our <strong>own</strong> config section!</p>

<p>Here&rsquo;s an implementation example of an <code>ISecretsProvider</code> contract and a <code>ConfigSecretsProvider</code> example implementation. You&rsquo;d also create an <code>AzureKeyVaultSecretsProvider</code> probably to handle getting secrets from Azure Key Vault using the code from the guides above.</p>

<script src="https://gist.github.com/kamranayub/eb6518356ac2b2f1a72a.js"></script>


<p>The <code>ConfigSecretsProvider</code> will use environment variables defined in Azure <em>first</em> then fallback to the config. This mirrors how app settings work in Azure.</p>

<p><strong>Note:</strong> Here I am deciding to use only one provider per environment. You might want an implementation that actually uses both. My Key Vault implementation actually uses the <code>ConfigSecretsProvider</code> to find the URL to load the secret for, so that in Azure, the app settings just specify the Key Vault secret URL to load:</p>

<p><img src="https://cloud.githubusercontent.com/assets/563819/13271735/9a0f600a-da5c-11e5-9ff0-106d5e009464.png" alt="App settings in Azure" /></p>

<p>This way, locally I can use the raw value (encrypted) and then in Azure, reference the URL for the secret.</p>

<p>To encrypt the <code>&lt;appSecrets&gt;</code> section, just run the the command (in the same directory as the web.config and using the Visual Studio Command Prompt):</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>aspnet_regiis -pef appSecrets . -prov CustomProvider</span></code></pre></td></tr></table></div></figure>


<p>And to decrypt:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>aspnet_regiis -pdf appSecrets .</span></code></pre></td></tr></table></div></figure>


<p>Easy peasy!</p>

<h2>So where are we at?</h2>

<p>If you followed all the guides I linked to and followed the notes, you should have the following:</p>

<ol>
<li>An Azure Key Vault set up with a secret to test with</li>
<li>A certificate that authenticates against Azure AD</li>
<li>A certificate that can encrypt/decrypt your web.config</li>
<li>Both certificates uploaded to Azure through the portal</li>
<li>A <code>&lt;appSecrets&gt;</code> section in your config for local secrets that is encrypted</li>
</ol>


<p>Phew! With all this in place, here&rsquo;s what this gets you:</p>

<ol>
<li>Encryption keys are not known, therefore the <strong>most</strong> an attacker could do if they compromised the application is to decrypt every user through Key Vault which is an audited system and slows them down</li>
<li>Your production secrets are not stored anywhere in your application or source control, local secrets and connection strings are encrypted</li>
<li>No cleartext tokens are used to access Key Vault, instead a signed certificate is used</li>
</ol>


<h2>Implementation notes</h2>

<p>The article above for getting started with a web app is a good place to start but I did a few things to make it easy to test and work with locally.</p>

<ol>
<li>I created an <code>ISecretsProvider</code> interface with two implementations: a config provider (see above) and a Key Vault provider. This also lets me mock for testability.</li>
<li>When I bind the <code>ISecretsProvider</code> for dependency injection, I inspect the current environment and use the appropriate provider (config locally, key vault otherwise)</li>
</ol>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="c1">// Ninject example</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Secrets provider</span>
</span><span class='line'><span class="n">kernel</span><span class="p">.</span><span class="n">Bind</span><span class="p">&lt;</span><span class="n">ISecretsProvider</span><span class="p">&gt;().</span><span class="n">ToMethod</span><span class="p">(</span><span class="n">ctx</span> <span class="p">=&gt;</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">switch</span> <span class="p">(</span><span class="n">AppSettings</span><span class="p">.</span><span class="n">RuntimeEnvironment</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">case</span> <span class="n">RuntimeEnvironment</span><span class="p">.</span><span class="n">D</span><span class="p">:</span>
</span><span class='line'>        <span class="k">case</span> <span class="n">RuntimeEnvironment</span><span class="p">.</span><span class="n">P</span><span class="p">:</span>
</span><span class='line'>            <span class="k">return</span> <span class="k">new</span> <span class="nf">AzureKeyVaultSecretsProvider</span><span class="p">();</span>
</span><span class='line'>        <span class="k">default</span><span class="p">:</span>
</span><span class='line'>            <span class="k">return</span> <span class="k">new</span> <span class="nf">ConfigSecretsProvider</span><span class="p">();</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}).</span><span class="n">InSingletonScope</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>Some other thoughts of what you might want to do:</p>

<ul>
<li>Add some logging/telemetry around calls to key vault, such as <a href="https://azure.microsoft.com/en-us/documentation/articles/app-insights-api-custom-events-metrics/#track-dependency">App Insights&#8217; track dependency</a></li>
<li>When the Key Vault client supports returning <code>SecureStrings</code>, you could use that to protect secrets in memory</li>
<li>Rotate encryption keys every so often (store the version of the key used on the entities), though this might be pricey for HSM keys</li>
<li>Encrypt secrets before storing them and then decrypt them at runtime (might be overkill)</li>
</ul>


<h3>A word on storing secrets in-memory</h3>

<p>Ideally you would only access secrets as-needed and not store them in memory. But there are some things to consider:</p>

<ul>
<li>If an attacker has compromised your process memory somehow, they&rsquo;ve owned you anyway.</li>
<li>While $0.13/10,000 operations seems cheap, it would add up if you had to call Key Vault <strong>every</strong> time you needed to use a secret</li>
<li>Calling Azure Key Vault does incur some latency, even if it&rsquo;s minimal&mdash;remember that their SLA is 99.9% within 5 seconds so it&rsquo;s possible latency could be pretty poor</li>
<li>At least with the <em>current</em> KeyVault client, it does <strong>not</strong> return secrets as <code>SecureStrings</code>, so it will be in cleartext in memory <em>anyway</em> so what&rsquo;s the difference? (Maybe <a href="https://github.com/Azure/azure-sdk-for-net/issues/1819">they will fix that</a>.)</li>
</ul>


<p>It&rsquo;s up to you but those are my thoughts.</p>

<h2>Troubleshooting</h2>

<p>I ran into a bunch of problems during the writing of this guide. Hopefully these help:</p>

<h3>When I run my app and try to get a secret from Key Vault I get a &ldquo;Keyset does not exist&rdquo; error</h3>

<p>Your app pool/user running the app does not have access to the private key. Follow my advice above to change the app pool identity to your own user account.</p>

<p>I use an app setting to determine where my app is running.</p>

<h3>When I run my app, I get a &ldquo;Bad Key&rdquo; error from the config encryption provider</h3>

<p>You are trying to use the same cert you made for Azure AD, you can&rsquo;t do this. Follow the guide I linked to above to make a new <code>azureconfig</code> cert and import it the same way you did before (to both certificate stores).</p>

<h3>When I build my app in Azure through Continuous Deployment, it&rsquo;s not able to decrypt the web.config</h3>

<ol>
<li>Ensure you uploaded the config PFX file through the portal</li>
<li>Ensure you restarted the application (or Stop then Start)</li>
<li>You can use the Kudu console to run Powershell to check if your cert is uploaded.</li>
<li><code>PS&gt; Set-Location Cert:\CurrentUser\My</code></li>
<li><code>PS&gt; Get-ChildItem</code></li>
<li>Ensure the <code>storeLocation</code> attribute in the web.config is set to <code>CurrentUser</code></li>
<li>Ensure you <strong>are not</strong> encrypting the <code>&lt;appSettings&gt;</code> config section, it&rsquo;s not supported (use the <code>appSecrets</code> workaround above)</li>
<li>Ensure your <code>thumbprint</code> matches the certificate thumbprint</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Tools of the Trade 2016]]></title>
    <link href="http://kamranicus.com/blog/2016/02/09/tools-of-the-trade/"/>
    <updated>2016-02-09T03:09:00+00:00</updated>
    <id>http://kamranicus.com/blog/2016/02/09/tools-of-the-trade</id>
    <content type="html"><![CDATA[<p>Sometimes you get so caught up in the work you do on a daily basis that you forget what it was like to start your job on day one&mdash;not knowing anything about what tools, extensions, and general utilities you take for granted now, 6 years into your career. It seems like on a monthly basis I find a new extension or utility that is useful to me. I wanted to share my toolbelt, in case it contains something you&rsquo;ve never heard of and causes you to exclaim in excitement about something awesome that you&rsquo;ll start using today.</p>

<!-- More -->


<p>This list is organized by function&mdash;i.e. what the tool contributes to for my work. If I use extensions for a tool, I will list them under the tool. I&rsquo;ve definitely used more things than I list here but I use these on a day-by-day basis typically and are what I would consider essential to my workflow. Share any awesome tools you use that I missed in the comments! If I think of more, I&rsquo;ll add them below.</p>

<h2>Coding</h2>

<p>I work with JavaScript/TypeScript, HTML, CSS, and C# on a daily basis. Here&rsquo;s what I use and for what.</p>

<h3><a href="https://go.microsoft.com/fwlink/?LinkId=691978&amp;clcid=0x409">Visual Studio 2015 Pro/Community</a></h3>

<p>For primary .NET work, web app work, and work-work. I use Community edition at home, it&rsquo;s free!</p>

<p><strong>Extensions</strong></p>

<ul>
<li><a href="https://www.jetbrains.com/resharper/download/">ReSharper 10</a> &ndash; Oodles of time-saving refactoring helpers and code analysis</li>
<li><a href="https://visualstudiogallery.msdn.microsoft.com/3b329021-cd7a-4a01-86fc-714c2d05bb6c">Web Compiler</a> &ndash; for LESS, SASS compiling</li>
<li><a href="https://visualstudiogallery.msdn.microsoft.com/e1d68248-f30e-4a5d-bf18-31399a0bcfa6">Typewriter</a> (see my recent <a href="http://kamranicus.com/blog/2016/02/04/typewriter/">blog post</a>) &ndash; for T4-style TypeScript codegen</li>
<li><a href="https://visualstudiogallery.msdn.microsoft.com/ee6e6d8c-c837-41fb-886a-6b50ae2d06a2">Web Essentials 2015</a> &ndash; for web dev</li>
<li><a href="https://visualstudiogallery.msdn.microsoft.com/1f6ec6ff-e89b-4c47-8e79-d2d68df894ec">Razor Generator</a> &ndash; for Razor templates for emails</li>
<li><a href="https://visualstudiogallery.msdn.microsoft.com/dd1dc8a5-d627-48a2-a19d-df4fe0c47f19">Node.js Tools for Visual Studio</a> &ndash; for Node.js projects</li>
<li><a href="https://visualstudiogallery.msdn.microsoft.com/c9eb3ba8-0c59-4944-9a62-6eee37294597">PowerShell Tools for Visual Studio</a> &ndash; for interactive PowerShell prompt and editing</li>
<li><a href="https://visualstudiogallery.msdn.microsoft.com/410e9b9f-65f3-4495-b68e-15567e543c58">Rebracer</a> &ndash; save formatting settings per solution</li>
</ul>


<h3><a href="http://code.visualstudio.com">Visual Studio Code</a></h3>

<p>For working on lots of my JS/TS-based OSS projects like <a href="http://excaliburjs.com">Excalibur.js</a>. The cross-platform, Git-integrated nature of the IDE is awesome along with per-project user settings to keep everyone in-sync.</p>

<p><strong>Extensions</strong></p>

<ul>
<li>ReStructured Text &ndash; for <a href="http://docs.excaliburjs.com">Excalibur docs</a></li>
<li>PowerShell &ndash; for scripts</li>
</ul>


<h3><a href="https://www.sublimetext.com">Sublime Text 3</a></h3>

<p>I use Sublime for note-taking (auto-save) and quick file editing since it&rsquo;s so fast and has a context-menu shortcut to edit files.</p>

<h3><a href="http://github.com">GitHub</a></h3>

<p>I pay for a plan at GitHub for private source code hosting but I also use it for all my <a href="http://github.com/kamranayub">OSS development</a>. It&rsquo;s a staple of my coding workflow.</p>

<h3><a href="http://desktop.github.com">GitHub Desktop</a></h3>

<p>For working with GitHub projects and local Git repositories, I also like that launches posh-git for the shell.</p>

<h3><a href="http://linqpad.com">Linqpad 5</a></h3>

<p>For quick C# script testing, database queries, etc.</p>

<h3><a href="https://technet.microsoft.com/en-us/scriptcenter/dd742419.aspx">PowerShell &amp; ISE</a></h3>

<p>I recently <a href="http://kamranicus.com/blog/2015/09/17/powershell-html5-offline-manifest/">became a believer</a> in PowerShell, for automation and scripting it&rsquo;s awesome. Just <a href="https://mva.microsoft.com/en-US/training-courses/getting-started-with-powershell-3-0-jump-start-8276">take the few hours</a> and learn it, you won&rsquo;t regret it. ISE is the scripting editor built into Windows.</p>

<h3><a href="https://github.com/dahlbyk/posh-git">posh-git</a></h3>

<p>The default shell for GH Desktop (above), posh-git is a PowerShell prompt with Git integration.</p>

<h2>Multimedia</h2>

<h3><a href="http://www.adobe.com/creativecloud.html">Adobe Creative Cloud</a></h3>

<p>The subscription-based model softens the blow of owning Adobe products and, perhaps, costs more over time but the benefits outweigh the negatives&mdash;namely, I own the full suite of Adobe products (<em>cough</em> legally) and they&rsquo;re <strong>always</strong> up-to-date with new versions so I don&rsquo;t need to pay up-the-nose every year. I also really like TypeKit for syncing new fonts.</p>

<h3><a href="http://www.aseprite.org/">aseprite Editor</a></h3>

<p>This is for pixel graphics and sprites, ASE is great for pixel-perfect drawings and animations.</p>

<h3><a href="http://www.mapeditor.org/">Tiled Map Editor</a></h3>

<p>For creating game maps using the spritesheets and tilesets I made from ASE/Photoshop (or purchased). Tiled also exports to JSON, making it easy to <a href="http://github.com/excaliburjs/excalibur-tiled">integrate with game engines</a>.</p>

<h3><a href="http://www.audacityteam.org/">Audacity</a></h3>

<p>I use Audacity for audio editing since it&rsquo;s easy to use and very lightweight.</p>

<h3><a href="http://www.virtualdub.org/">VirtualDub</a></h3>

<p>Simple video editor and great for transencoding video formats.</p>

<h3><a href="https://obsproject.com/download#mp">Open Broadcasting Studio</a></h3>

<p>For streaming and screen recording, you can&rsquo;t beat the FOSS OBS Studio. The new version is hot stuff and is a total rewrite of the &ldquo;Classic&rdquo; version.</p>

<h2>Productivity</h2>

<h3><a href="http://www.teamviewer.com/en-us/">TeamViewer</a></h3>

<p>I use TeamViewer because it&rsquo;s dead simple to set up and manage remote access to my machines without fiddling with firewalls or port forwarding. They also have native mobile clients for on-the-go RDP.</p>

<h3><a href="https://products.office.com/en-us/office-365-home">OneNote / Office 365</a></h3>

<p>I use OneNote for password-protected information (it&rsquo;s actually encrypted) and for cross-device note syncing. O365 is great for the cross-platform Office and syncing via OneDrive.</p>

<h3><a href="http://onedrive.com">OneDrive</a></h3>

<p>I use OneDrive for its cross-platform syncing (PC/Android/iPhone), cloud storage, and PC Windows-explorer integration. It just works. It also means my OneNote notebooks are available everywhere.</p>

<h3><a href="http://lastpass.com">LastPass</a></h3>

<p>I use LastPass Password Manager for its browser integration, always available cloud vault, and cross-device syncing (to my Android).</p>

<h3><a href="http://trello.com">Trello</a></h3>

<p>My wife and I use Trello to manage our household information&mdash;events, shopping, to-do lists, restaurants to eat at, blog posts to write, etc. My wife loves how she can use it easily on her iPhone and get notifications whenever someone changes/adds something. We both like the flexibility it offers and its ease of use. At work, we use it to manage our tasks and work for the team alongside TFS (because, you know, TFS).</p>

<h3><a href="http://www.powerarchiver.com/">PowerArchiver</a></h3>

<p>Yeah, I pay for an archiving software&hellip; it&rsquo;s awesome, easy to use, unzips anything, has Explorer-integration, etc. It was only $23 and they do free upgrades for the Personal edition.</p>

<h3><a href="https://play.google.com/store/apps/details?id=com.snoggdoggler.android.applications.doggcatcher.v1_0&amp;hl=en">Doggcatcher</a>, <a href="http://audible.com">Audible</a>, <a href="http://iheartradio.com">iHeartRadio</a>, <a href="http://spotify.com">Spotify</a></h3>

<p>You have to listen to something while you work, right? Do you just listen to the local radio on your commutes? Podcasts are invaluable for staying current with tech news and listening to books makes it easy to be &ldquo;literate&rdquo; on the go.</p>

<p><strong>Podcasts</strong></p>

<p>I paid for <a href="https://play.google.com/store/apps/details?id=com.snoggdoggler.android.applications.doggcatcher.v1_0&amp;hl=en">Doggcatcher</a> and it&rsquo;s money well spent. It works flawlessly and I listen to podcasts in the car on the way to and from work everyday. Usually I do one day podcasts, one day book, to keep it sane. I also pick and choose the episodes I listen to.</p>

<ul>
<li><a href="https://www.dotnetrocks.com/">.NET Rocks</a></li>
<li><a href="https://twit.tv/shows/this-week-in-tech">This Week in Tech</a></li>
<li><a href="http://www.polygon.com/minimap">Polygon Minimap</a></li>
<li><a href="http://www.giantbomb.com/podcasts/">Giant Bombcast</a></li>
<li><a href="http://maximumfun.org/shows/my-brother-my-brother-and-me">My Brother, My Brother, and Me</a></li>
<li><a href="http://www.thisamericanlife.org/">This American Life</a></li>
</ul>


<p>I listen to <a href="http://audible.com">Audible</a> for books on commutes. I&rsquo;ve been a member for over 6 years and through it own over 100 books and probably have saved myself hundreds of dollars on books. PS. Check out the <a href="http://www.audible.com/series/ref=a_search_c4_1_1_1srSrs_sa?asin=B0085NK3SS">Matthew Corbett series</a>, Edoardo Ballerini is a fucking awesome narrator.</p>

<p>For radio at home, I hooked up my old Android Moto G to a Bluetooth stereo and use <a href="http://iheartradio.com">iHeartRadio</a>.</p>

<p>For streaming music, I subscribe to <a href="http://spotify.com">Spotify</a> that my wife and I share on our devices. I can also use Spotify/iHeartRadio in the basement on my PS4.</p>

<h3>OK Google</h3>

<p>I use OK Google on my phone (Cortana before, on my Windows Phone) to add reminders and to-dos on-the-go.</p>

<h2>Misc</h2>

<h3>Chrome</h3>

<p>I use <a href="http://kamranicus.com/blog/2015/05/21/chrome-multi-user/">supervised user profiles</a> to keep my work separated.</p>

<h3><a href="https://conemu.github.io/">ConEmu</a></h3>

<p>An awesome multi-tabbed customizable command prompt host&mdash;I use it to create shortcuts for Azure Powershell SDK, Visual Studio CMD prompt, Posh-Git, CMD prompt, etc.</p>

<h3><a href="http://regexr.com/">RegExr</a></h3>

<p>An awesome Regular Expression engine in the browser, my go-to Regex reference/tester.</p>

<h3><a href="http://draeton.github.io/stitches/">Stitches</a></h3>

<p>An HTML5-based sprite sheet generator.</p>

<h3><a href="https://emby.media/">Emby</a></h3>

<p>Not work-related but I use Emby (it&rsquo;s free!) to stream media to my consoles and other devices. It has a great web interface for remote viewing too!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using Typewriter to Strongly-Type Your Client-Side Models and Services]]></title>
    <link href="http://kamranicus.com/blog/2016/02/04/typewriter/"/>
    <updated>2016-02-04T02:08:00+00:00</updated>
    <id>http://kamranicus.com/blog/2016/02/04/typewriter</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve recently discovered <a href="http://frhagn.github.io/Typewriter/index.html">Typewriter for Visual Studio</a>, a T4-style code-generator specifically meant for generating Typescript files. I&rsquo;ve been using it since in all my projects, at work and at home. It&rsquo;s just <strong>so</strong> good. Let me explain what Typewriter does and why it&rsquo;s so awesome.</p>

<!-- more -->


<h2>Setting the stage</h2>

<p>It&rsquo;s 2016. The web app you&rsquo;re working on is a mix of Javascript, C#, and controllers for MVC or Web API. Your solution looks something like this:</p>

<p><img src="https://cloud.githubusercontent.com/assets/563819/12835031/1f2c4cfc-cb72-11e5-8f99-d6b3a4af3e83.png" alt="Folder structure" /></p>

<p>You&rsquo;ve got a standard folder structure with a MVC controller and API controller. You want to leverage a client-side library to make it easier to have a dynamic and responsive interface, let&rsquo;s say <a href="http://knockoutjs.com">Knockout.js</a>. You start creating a Knockout view model and you want to bind it to your view. What do you do now at this point for binding the initial data to your view?</p>

<p>Do you&hellip;</p>

<ol>
<li>Serialize the server model into JSON and pass it into your Knockout view model manually</li>
<li>Don&rsquo;t even bother and fetch the data via AJAX when the page loads</li>
</ol>


<p>In either case, you&rsquo;re left with a realization: <strong>I need to pass in my server model so I can use it in my client-side code.</strong> You&rsquo;re left doing something like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">TaskListViewModel</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">model</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>   <span class="kd">var</span> <span class="nx">vm</span> <span class="o">=</span> <span class="p">{};</span>
</span><span class='line'>
</span><span class='line'>   <span class="nx">vm</span><span class="p">.</span><span class="nx">name</span> <span class="o">=</span> <span class="nx">ko</span><span class="p">.</span><span class="nx">observable</span><span class="p">(</span><span class="nx">model</span><span class="p">.</span><span class="nx">name</span><span class="p">);</span>
</span><span class='line'>   <span class="nx">vm</span><span class="p">.</span><span class="nx">tasks</span> <span class="o">=</span> <span class="nx">ko</span><span class="p">.</span><span class="nx">observableArray</span><span class="p">(</span><span class="nx">model</span><span class="p">.</span><span class="nx">tasks</span><span class="p">.</span><span class="nx">map</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">t</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="nx">TaskViewModel</span><span class="p">(</span><span class="nx">t</span><span class="p">);</span> <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>   <span class="k">return</span> <span class="nx">vm</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="nx">$</span><span class="p">(</span><span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">vm</span> <span class="o">=</span> <span class="nx">TaskListViewModel</span><span class="p">(</span><span class="nb">window</span><span class="p">.</span><span class="nx">model</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">ko</span><span class="p">.</span><span class="nx">applyBindings</span><span class="p">(</span><span class="nx">vm</span><span class="p">);</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>And then passing in your server model, serialized from JSON either via AJAX or embedded in the view:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;script&gt;</span>
</span><span class='line'><span class="nb">window</span><span class="p">.</span><span class="nx">model</span> <span class="o">=</span> <span class="err">@</span><span class="nx">Html</span><span class="p">.</span><span class="nx">Raw</span><span class="p">(</span><span class="nx">JsonConvert</span><span class="p">.</span><span class="nx">SerializeObject</span><span class="p">(</span><span class="nx">Model</span><span class="p">));</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// or</span>
</span><span class='line'>
</span><span class='line'><span class="nx">$</span><span class="p">(</span><span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">$</span><span class="p">.</span><span class="nx">getJSON</span><span class="p">(</span><span class="s1">&#39;/api/tasks&#39;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">tasks</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">vm</span> <span class="o">=</span> <span class="nx">TaskListViewModel</span><span class="p">(</span><span class="nx">tasks</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">ko</span><span class="p">.</span><span class="nx">applyBindings</span><span class="p">(</span><span class="nx">vm</span><span class="p">);</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'><span class="nt">&lt;/script&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>We&rsquo;ve all done something like this because no matter what approach you choose, you have to map the models <em>somewhere</em>. You could use a mapping library like <a href="http://knockoutjs.com/documentation/plugins-mapping.html">ko.mapping</a> to help. But even with help, you still have the same problem:</p>

<blockquote><p>What happens when you change your model in C#?</p></blockquote>

<p>The answer is, &ldquo;I have to go and update all the references in my client-side Javascript.&rdquo; So what do we do? We try to leave it as much alone as we can, preferring not to change things so we can avoid Happy JS Refactoring Funtime.</p>

<h2>Enter Typescript, stage left</h2>

<p>We can address one aspect of this problem using <a href="http://typescriptlang.org">Typescript</a>, the typed superset of Javascript introduced by Microsoft several years ago. My love for Typescript is <a href="http://kamranicus.com/presentations/demystifying-typescript">well-documented</a> and I encourage you to go through that presentation if you haven&rsquo;t already.</p>

<p>Here&rsquo;s one reason why I love it: we can create interfaces that strongly-type our C# models.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kr">interface</span> <span class="nx">TaskListViewModel</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">id</span><span class="o">:</span> <span class="nx">number</span><span class="p">;</span>
</span><span class='line'>  <span class="nx">name</span><span class="o">:</span> <span class="nx">string</span><span class="p">;</span>
</span><span class='line'>  <span class="nx">author</span><span class="o">:</span> <span class="nx">string</span><span class="p">;</span>
</span><span class='line'>  <span class="nx">created</span><span class="o">:</span> <span class="nb">Date</span><span class="p">;</span>
</span><span class='line'>  <span class="nx">tasks</span><span class="o">:</span> <span class="nx">TaskViewModel</span><span class="p">[];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kr">interface</span> <span class="nx">TaskViewModel</span> <span class="p">{</span>
</span><span class='line'>   <span class="nx">order</span><span class="o">:</span> <span class="nx">number</span><span class="p">;</span>
</span><span class='line'>   <span class="nx">canMarkDone</span><span class="o">:</span> <span class="kr">boolean</span><span class="p">;</span>
</span><span class='line'>   <span class="nx">task</span><span class="o">:</span> <span class="nx">Task</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kr">interface</span> <span class="nx">Task</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">text</span><span class="o">:</span> <span class="nx">string</span><span class="p">;</span>
</span><span class='line'>  <span class="nx">done</span><span class="o">:</span> <span class="kr">boolean</span><span class="p">;</span>
</span><span class='line'>  <span class="nx">created</span><span class="o">:</span> <span class="nb">Date</span><span class="p">;</span>
</span><span class='line'>  <span class="nx">modified</span><span class="o">:</span> <span class="nb">Date</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now I&rsquo;ve created an interface that mirrors my serialized C# model representation. So now with Typescript, <strong>anytime</strong> I use a server-side model, I can ensure I never have any problems with misspellings/refactoring or type changes (e.g. &ldquo;author&rdquo; changing from a string to a <code>User</code> model). At compile-time, Typescript will ensure my references are correct.</p>

<p>Using type information, we can strongly type our previous JS view model:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">TaskListViewModel</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">model</span><span class="o">:</span> <span class="nx">TaskListViewModel</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>   <span class="kd">var</span> <span class="nx">vm</span> <span class="o">=</span> <span class="p">{};</span>
</span><span class='line'>
</span><span class='line'>   <span class="nx">vm</span><span class="p">.</span><span class="nx">name</span> <span class="o">=</span> <span class="nx">ko</span><span class="p">.</span><span class="nx">observable</span><span class="o">&lt;</span><span class="nx">string</span><span class="o">&gt;</span><span class="p">(</span><span class="nx">model</span><span class="p">.</span><span class="nx">name</span><span class="p">);</span>
</span><span class='line'>   <span class="nx">vm</span><span class="p">.</span><span class="nx">tasks</span> <span class="o">=</span> <span class="nx">ko</span><span class="p">.</span><span class="nx">observableArray</span><span class="o">&lt;</span><span class="nx">TaskViewModel</span><span class="o">&gt;</span><span class="p">(</span><span class="nx">model</span><span class="p">.</span><span class="nx">tasks</span><span class="p">.</span><span class="nx">map</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">t</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="nx">TaskViewModel</span><span class="p">(</span><span class="nx">t</span><span class="p">);</span> <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>   <span class="k">return</span> <span class="nx">vm</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>But we still have one problem: how can we avoid the headaches when our server model changes? We <em>still</em> need to update our TS models manually.</p>

<h2>Enter Typewriter, stage right</h2>

<p><a href="http://frhagn.github.io/Typewriter/index.html">Typewriter</a> is a Visual Studio extension that does one thing and does it well: it lets you create <strong>Typescript Template</strong> files. These are <em>basically</em> T4 templates but they&rsquo;re abstracted to the point where it&rsquo;s actually <em>easy</em> to use (sorry T4). When you save your C# files, Typewriter reflects over them and will run the template and generate corresponding Typescript files. This lets you do simple things like mirror types to crazy things like&hellip; generate an entire AJAX web service.</p>

<p>So, using Typewriter, what would the template file look like to mirror our models?</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">namespace</span> <span class="nx">TypewriterBlogPost</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">$Classes</span><span class="p">(</span><span class="nx">TypewriterBlogPost</span><span class="p">.</span><span class="nx">Models</span><span class="p">.</span><span class="o">*</span><span class="p">)[</span>
</span><span class='line'>    <span class="cm">/**</span>
</span><span class='line'><span class="cm">     * Interface for: $FullName</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="kr">export</span> <span class="kr">interface</span> <span class="nx">$Name</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">$Properties</span><span class="p">[</span>
</span><span class='line'>        <span class="nx">$name</span><span class="o">:</span> <span class="nx">$Type</span><span class="p">;]</span>
</span><span class='line'>    <span class="p">}]</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The syntax of the template file is pretty straightforward, as <a href="http://frhagn.github.io/Typewriter/pages/getting-started.html">explained in the documentation</a>. Let&rsquo;s walk through it.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">$Classes</span><span class="p">(</span><span class="nx">TypewriterBlogPost</span><span class="p">.</span><span class="nx">Models</span><span class="p">.</span><span class="o">*</span><span class="p">)[</span>
</span></code></pre></td></tr></table></div></figure>


<p>The <code>Classes</code> keyword tells Typewriter to search for all public classes in a file. In parenthesis, you can filter classes by FullName using wildcard syntax. Typewriter also supports Lambda functions to filter by a predicate:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">$Classes</span><span class="p">(</span><span class="nx">x</span> <span class="o">=&gt;</span> <span class="nx">x</span><span class="p">.</span><span class="nx">FullName</span><span class="p">.</span><span class="nx">Length</span> <span class="o">&gt;</span> <span class="mi">50</span><span class="p">)[</span>
</span></code></pre></td></tr></table></div></figure>


<p>The open square bracket indicates a repeated block of code of Typescript. We declare an interface since we want to add type safety, not an implementation (although you could, which you&rsquo;ll see next!). You can append another square pair for a separator string if there are > 1 items that match (i.e. multiple classes in a file, multiple properties, multiple methods).</p>

<p>Next, we list the properties using the same syntax. By the way, Typewriter has full Intellisense for all these keywords and variable names.</p>

<p><img src="https://cloud.githubusercontent.com/assets/563819/12796507/baabed5c-ca84-11e5-99bf-2079d85dabf0.png" alt="Intellisense" /></p>

<h2>Customize Knockout View Models</h2>

<p>Now that we have our models reflected and auto-syncing with our client-side code, we can do some extra fun stuff to <em>automatically generate Knockout view models.</em></p>

<p>The goal here is to auto-generate a base view model that we can then extend with custom methods, properties, and computed observables.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">$</span><span class="p">{</span>
</span><span class='line'>    <span class="nx">string</span> <span class="nx">KnockoutType</span><span class="p">(</span><span class="nx">Property</span> <span class="nx">p</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="nx">p</span><span class="p">.</span><span class="nx">Type</span><span class="p">.</span><span class="nx">IsEnumerable</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="nx">p</span><span class="p">.</span><span class="nx">Type</span><span class="p">.</span><span class="nx">Name</span><span class="p">.</span><span class="nx">TrimEnd</span><span class="p">(</span><span class="s1">&#39;[&#39;</span><span class="p">,</span><span class="s1">&#39;]&#39;</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">return</span> <span class="nx">p</span><span class="p">.</span><span class="nx">Type</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">string</span> <span class="nx">KnockoutValue</span><span class="p">(</span><span class="nx">Property</span> <span class="nx">property</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">type</span> <span class="o">=</span> <span class="nx">KnockoutType</span><span class="p">(</span><span class="nx">property</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="nx">IsEnumerableViewModel</span><span class="p">(</span><span class="nx">property</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="nx">$</span><span class="s2">&quot;ko.observableArray&lt;Knockout{type}&gt;([])&quot;</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="nx">property</span><span class="p">.</span><span class="nx">Type</span><span class="p">.</span><span class="nx">IsEnumerable</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="nx">$</span><span class="s2">&quot;ko.observableArray&lt;{type}&gt;([])&quot;</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">return</span> <span class="nx">$</span><span class="s2">&quot;ko.observable&lt;{type}&gt;()&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">bool</span> <span class="nx">IsEnumerableViewModel</span><span class="p">(</span><span class="nx">Property</span> <span class="nx">p</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">string</span> <span class="nx">type</span> <span class="o">=</span> <span class="nx">KnockoutType</span><span class="p">(</span><span class="nx">p</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">return</span> <span class="nx">p</span><span class="p">.</span><span class="nx">Type</span><span class="p">.</span><span class="nx">IsEnumerable</span> <span class="o">&amp;&amp;</span> <span class="nx">type</span><span class="p">.</span><span class="nx">EndsWith</span><span class="p">(</span><span class="s2">&quot;ViewModel&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="nx">namespace</span> <span class="nx">TypewriterBlogPost</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">$Classes</span><span class="p">(</span><span class="o">*</span><span class="nx">ViewModel</span><span class="p">)[</span>
</span><span class='line'>    <span class="cm">/**</span>
</span><span class='line'><span class="cm">     * Interface for: $FullName</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="kr">export</span> <span class="kr">interface</span> <span class="nx">$Name</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">$Properties</span><span class="p">[</span>
</span><span class='line'>        <span class="nx">$name</span><span class="o">:</span> <span class="nx">$Type</span><span class="p">;]</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/**</span>
</span><span class='line'><span class="cm">     * Knockout base view model for $FullName</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="kr">export</span> <span class="kr">class</span> <span class="nx">Knockout$Name</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">$Properties</span><span class="p">[</span>
</span><span class='line'>        <span class="kr">public</span> <span class="nx">$name</span> <span class="o">=</span> <span class="nx">$KnockoutValue</span><span class="p">;]</span>
</span><span class='line'>
</span><span class='line'>        <span class="nx">constructor</span><span class="p">(</span><span class="nx">model</span><span class="o">:</span> <span class="nx">$Name</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">this</span><span class="p">.</span><span class="nx">map</span><span class="p">(</span><span class="nx">model</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="cm">/**</span>
</span><span class='line'><span class="cm">         * Map $Name model to Knockout view model</span>
</span><span class='line'><span class="cm">         */</span>
</span><span class='line'>        <span class="kr">public</span> <span class="nx">map</span><span class="p">(</span><span class="nx">model</span><span class="o">:</span> <span class="nx">$Name</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">$Properties</span><span class="p">(</span><span class="nx">x</span> <span class="o">=&gt;</span> <span class="o">!</span><span class="nx">IsEnumerableViewModel</span><span class="p">(</span><span class="nx">x</span><span class="p">))[</span>
</span><span class='line'>            <span class="k">this</span><span class="p">.</span><span class="nx">$name</span><span class="p">(</span><span class="nx">model</span><span class="p">.</span><span class="nx">$name</span><span class="p">);]</span>
</span><span class='line'>            <span class="nx">$Properties</span><span class="p">(</span><span class="nx">x</span> <span class="o">=&gt;</span> <span class="nx">IsEnumerableViewModel</span><span class="p">(</span><span class="nx">x</span><span class="p">))[</span>
</span><span class='line'>            <span class="k">this</span><span class="p">.</span><span class="nx">$name</span><span class="p">(</span><span class="nx">model</span><span class="p">.</span><span class="nx">$name</span><span class="p">.</span><span class="nx">map</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">map$Name</span><span class="p">));]</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="nx">$Properties</span><span class="p">(</span><span class="nx">x</span> <span class="o">=&gt;</span> <span class="nx">IsEnumerableViewModel</span><span class="p">(</span><span class="nx">x</span><span class="p">))[</span>
</span><span class='line'>        <span class="cm">/**</span>
</span><span class='line'><span class="cm">         * Map $KnockoutType equivalent Knockout view model. Override to customize.</span>
</span><span class='line'><span class="cm">         */</span>
</span><span class='line'>        <span class="kr">public</span> <span class="nx">map$Name</span><span class="p">(</span><span class="nx">model</span><span class="o">:</span> <span class="nx">$KnockoutType</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="k">new</span> <span class="nx">Knockout$KnockoutType</span><span class="p">(</span><span class="nx">model</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}]</span>
</span><span class='line'>
</span><span class='line'>        <span class="cm">/**</span>
</span><span class='line'><span class="cm">         * Returns a plain JSON object with current model properties</span>
</span><span class='line'><span class="cm">         */</span>
</span><span class='line'>        <span class="kr">public</span> <span class="nx">getModel</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="p">{</span>
</span><span class='line'>                <span class="nx">$Properties</span><span class="p">(</span><span class="nx">x</span> <span class="o">=&gt;</span> <span class="o">!</span><span class="nx">IsEnumerableViewModel</span><span class="p">(</span><span class="nx">x</span><span class="p">))[</span>
</span><span class='line'>                <span class="nx">$name</span><span class="o">:</span> <span class="k">this</span><span class="p">.</span><span class="nx">$name</span><span class="p">(),]</span>
</span><span class='line'>                <span class="nx">$Properties</span><span class="p">(</span><span class="nx">x</span> <span class="o">=&gt;</span> <span class="nx">IsEnumerableViewModel</span><span class="p">(</span><span class="nx">x</span><span class="p">))[</span>
</span><span class='line'>                <span class="nx">$name</span><span class="o">:</span> <span class="k">this</span><span class="p">.</span><span class="nx">$name</span><span class="p">().</span><span class="nx">map</span><span class="p">(</span><span class="nx">x</span> <span class="o">=&gt;</span> <span class="nx">x</span><span class="p">.</span><span class="nx">getModel</span><span class="p">())][,]</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}]</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Oh man! This one&rsquo;s a doozy. All we&rsquo;re really doing is ensuring we recursively map KO view models for collections (we ignore non-ViewModels). We also added a couple convenient helper methods like <code>getModel()</code> that returns a JSON object with the current KO model values. <code>map$Name</code> allows us to customize how we map each collection, for example, to override what view model to use (such as a custom view model).</p>

<p>Typewriter allows you to create &ldquo;helper&rdquo; functions that you can then use in the template. We created ones for parsing out the Knockout types (trimming square brackets).</p>

<p>You might ask why prepend the name with <code>Knockout</code>? So that it won&rsquo;t conflict with the interfaces named after the view models. Since we want to pass in JSON from the server, we still need an interface that represents the server-side view model.</p>

<p>Here&rsquo;s an example of what this template will generate for <code>TaskListViewModel</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">namespace</span> <span class="nx">TypewriterBlogPost</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/**</span>
</span><span class='line'><span class="cm">     * Interface for: TypewriterBlogPost.ViewModels.TaskListViewModel</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="kr">export</span> <span class="kr">interface</span> <span class="nx">TaskListViewModel</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>        <span class="nx">id</span><span class="o">:</span> <span class="nx">number</span><span class="p">;</span>
</span><span class='line'>        <span class="nx">name</span><span class="o">:</span> <span class="nx">string</span><span class="p">;</span>
</span><span class='line'>        <span class="nx">author</span><span class="o">:</span> <span class="nx">string</span><span class="p">;</span>
</span><span class='line'>        <span class="nx">created</span><span class="o">:</span> <span class="nb">Date</span><span class="p">;</span>
</span><span class='line'>        <span class="nx">tasks</span><span class="o">:</span> <span class="nx">TaskViewModel</span><span class="p">[];</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/**</span>
</span><span class='line'><span class="cm">     * Knockout base view model for TypewriterBlogPost.ViewModels.TaskListViewModel</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="kr">export</span> <span class="kr">class</span> <span class="nx">KnockoutTaskListViewModel</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>        <span class="kr">public</span> <span class="nx">id</span> <span class="o">=</span> <span class="nx">ko</span><span class="p">.</span><span class="nx">observable</span><span class="o">&lt;</span><span class="nx">number</span><span class="o">&gt;</span><span class="p">();</span>
</span><span class='line'>        <span class="kr">public</span> <span class="nx">name</span> <span class="o">=</span> <span class="nx">ko</span><span class="p">.</span><span class="nx">observable</span><span class="o">&lt;</span><span class="nx">string</span><span class="o">&gt;</span><span class="p">();</span>
</span><span class='line'>        <span class="kr">public</span> <span class="nx">author</span> <span class="o">=</span> <span class="nx">ko</span><span class="p">.</span><span class="nx">observable</span><span class="o">&lt;</span><span class="nx">string</span><span class="o">&gt;</span><span class="p">();</span>
</span><span class='line'>        <span class="kr">public</span> <span class="nx">created</span> <span class="o">=</span> <span class="nx">ko</span><span class="p">.</span><span class="nx">observable</span><span class="o">&lt;</span><span class="nb">Date</span><span class="o">&gt;</span><span class="p">();</span>
</span><span class='line'>        <span class="kr">public</span> <span class="nx">tasks</span> <span class="o">=</span> <span class="nx">ko</span><span class="p">.</span><span class="nx">observableArray</span><span class="o">&lt;</span><span class="nx">KnockoutTaskViewModel</span><span class="o">&gt;</span><span class="p">([]);</span>
</span><span class='line'>
</span><span class='line'>        <span class="nx">constructor</span><span class="p">(</span><span class="nx">model</span><span class="o">:</span> <span class="nx">TaskListViewModel</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">this</span><span class="p">.</span><span class="nx">map</span><span class="p">(</span><span class="nx">model</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="cm">/**</span>
</span><span class='line'><span class="cm">         * Map TaskListViewModel model to Knockout view model</span>
</span><span class='line'><span class="cm">         */</span>
</span><span class='line'>        <span class="kr">public</span> <span class="nx">map</span><span class="p">(</span><span class="nx">model</span><span class="o">:</span> <span class="nx">TaskListViewModel</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>            <span class="k">this</span><span class="p">.</span><span class="nx">id</span><span class="p">(</span><span class="nx">model</span><span class="p">.</span><span class="nx">id</span><span class="p">);</span>
</span><span class='line'>            <span class="k">this</span><span class="p">.</span><span class="nx">name</span><span class="p">(</span><span class="nx">model</span><span class="p">.</span><span class="nx">name</span><span class="p">);</span>
</span><span class='line'>            <span class="k">this</span><span class="p">.</span><span class="nx">author</span><span class="p">(</span><span class="nx">model</span><span class="p">.</span><span class="nx">author</span><span class="p">);</span>
</span><span class='line'>            <span class="k">this</span><span class="p">.</span><span class="nx">created</span><span class="p">(</span><span class="nx">model</span><span class="p">.</span><span class="nx">created</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>            <span class="k">this</span><span class="p">.</span><span class="nx">tasks</span><span class="p">(</span><span class="nx">model</span><span class="p">.</span><span class="nx">tasks</span><span class="p">.</span><span class="nx">map</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">mapTasks</span><span class="p">));</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>        <span class="cm">/**</span>
</span><span class='line'><span class="cm">         * Map TaskViewModel equivalent Knockout view model. Override to customize.</span>
</span><span class='line'><span class="cm">         */</span>
</span><span class='line'>        <span class="kr">public</span> <span class="nx">mapTasks</span><span class="p">(</span><span class="nx">model</span><span class="o">:</span> <span class="nx">TaskViewModel</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="k">new</span> <span class="nx">KnockoutTaskViewModel</span><span class="p">(</span><span class="nx">model</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="cm">/**</span>
</span><span class='line'><span class="cm">         * Returns a plain JSON object with current model properties</span>
</span><span class='line'><span class="cm">         */</span>
</span><span class='line'>        <span class="kr">public</span> <span class="nx">getModel</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>                <span class="nx">id</span><span class="o">:</span> <span class="k">this</span><span class="p">.</span><span class="nx">id</span><span class="p">(),</span>
</span><span class='line'>                <span class="nx">name</span><span class="o">:</span> <span class="k">this</span><span class="p">.</span><span class="nx">name</span><span class="p">(),</span>
</span><span class='line'>                <span class="nx">author</span><span class="o">:</span> <span class="k">this</span><span class="p">.</span><span class="nx">author</span><span class="p">(),</span>
</span><span class='line'>                <span class="nx">created</span><span class="o">:</span> <span class="k">this</span><span class="p">.</span><span class="nx">created</span><span class="p">(),</span>
</span><span class='line'>
</span><span class='line'>                <span class="nx">tasks</span><span class="o">:</span> <span class="k">this</span><span class="p">.</span><span class="nx">tasks</span><span class="p">().</span><span class="nx">map</span><span class="p">(</span><span class="nx">x</span> <span class="o">=&gt;</span> <span class="nx">x</span><span class="p">.</span><span class="nx">getModel</span><span class="p">())</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Awesome? You bet! So how would I use this in practice? I would just <code>extend</code> the auto-generated code with my custom code!</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">namespace</span> <span class="nx">TypewriterBlogPost</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kr">export</span> <span class="kr">class</span> <span class="nx">ViewModel</span> <span class="kr">extends</span> <span class="nx">KnockoutTaskListViewModel</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>        <span class="nx">constructor</span><span class="p">(</span><span class="nx">model</span><span class="o">:</span> <span class="nx">TaskListViewModel</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="kr">super</span><span class="p">(</span><span class="nx">model</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="nx">addTask</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>            <span class="c1">// todo call service</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// apply KO bindings and use JSON object from server</span>
</span><span class='line'>    <span class="nx">$</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="nx">ko</span><span class="p">.</span><span class="nx">applyBindings</span><span class="p">(</span><span class="k">new</span> <span class="nx">ViewModel</span><span class="p">((</span><span class="o">&lt;</span><span class="nx">any</span><span class="o">&gt;</span><span class="nb">window</span><span class="p">).</span><span class="nx">viewModel</span><span class="p">)));</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Strongly-typing your API controllers</h2>

<p>Now that we&rsquo;ve got our view models squared away, how can we leverage Typewriter to help us with our Web API methods? Well, Typewriter comes with an awesome Web API extension that makes it easy to generate strongly-typed service classes.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">$</span><span class="p">{</span>
</span><span class='line'>    <span class="nx">using</span> <span class="nx">Typewriter</span><span class="p">.</span><span class="nx">Extensions</span><span class="p">.</span><span class="nx">WebApi</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">string</span> <span class="nx">ReturnType</span><span class="p">(</span><span class="nx">Method</span> <span class="nx">m</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">m</span><span class="p">.</span><span class="nx">Type</span><span class="p">.</span><span class="nx">Name</span> <span class="o">==</span> <span class="s2">&quot;IHttpActionResult&quot;</span> <span class="o">?</span> <span class="s2">&quot;void&quot;</span> <span class="o">:</span> <span class="nx">m</span><span class="p">.</span><span class="nx">Type</span><span class="p">.</span><span class="nx">Name</span><span class="p">;</span>
</span><span class='line'>    <span class="nx">string</span> <span class="nx">ServiceName</span><span class="p">(</span><span class="nx">Class</span> <span class="nx">c</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">c</span><span class="p">.</span><span class="nx">Name</span><span class="p">.</span><span class="nx">Replace</span><span class="p">(</span><span class="s2">&quot;Controller&quot;</span><span class="p">,</span> <span class="s2">&quot;Service&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">string</span> <span class="nx">ParentServiceName</span><span class="p">(</span><span class="nx">Method</span> <span class="nx">m</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">ServiceName</span><span class="p">((</span><span class="nx">Class</span><span class="p">)</span><span class="nx">m</span><span class="p">.</span><span class="nx">Parent</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nx">module</span> <span class="nx">TypewriterBlogPost</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">$Classes</span><span class="p">(</span><span class="o">:</span><span class="nx">ApiController</span><span class="p">)[</span>
</span><span class='line'>    <span class="kr">export</span> <span class="kr">class</span> <span class="nx">$ServiceName</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">$Methods</span><span class="p">[</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// $HttpMethod: $Url</span>
</span><span class='line'>        <span class="kr">public</span> <span class="kr">static</span> <span class="nx">Route$Name</span> <span class="o">=</span> <span class="p">(</span><span class="nx">$Parameters</span><span class="p">(</span><span class="nx">p</span> <span class="o">=&gt;</span> <span class="nx">p</span><span class="p">.</span><span class="nx">Type</span><span class="p">.</span><span class="nx">IsPrimitive</span><span class="p">)[</span><span class="nx">$name</span><span class="o">:</span> <span class="nx">$Type</span><span class="p">][,</span> <span class="p">])</span> <span class="o">=&gt;</span> <span class="err">`</span><span class="nx">$Url</span><span class="err">`</span><span class="p">;</span>
</span><span class='line'>        <span class="kr">public</span> <span class="kr">static</span> <span class="nx">$name</span><span class="p">(</span><span class="nx">$Parameters</span><span class="p">[</span><span class="nx">$name</span><span class="o">:</span> <span class="nx">$Type</span><span class="p">][,</span> <span class="p">])</span><span class="o">:</span> <span class="nx">JQueryPromise</span><span class="o">&lt;</span><span class="nx">$ReturnType</span><span class="o">&gt;</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="nx">$</span><span class="p">.</span><span class="nx">ajax</span><span class="p">({</span>
</span><span class='line'>                <span class="nx">url</span><span class="o">:</span> <span class="nx">$ParentServiceName</span><span class="p">.</span><span class="nx">Route$Name</span><span class="p">(</span><span class="nx">$Parameters</span><span class="p">(</span><span class="nx">p</span> <span class="o">=&gt;</span> <span class="nx">p</span><span class="p">.</span><span class="nx">Type</span><span class="p">.</span><span class="nx">IsPrimitive</span><span class="p">)[</span><span class="nx">$name</span><span class="p">][,</span> <span class="p">]),</span>
</span><span class='line'>                <span class="nx">type</span><span class="o">:</span> <span class="s1">&#39;$HttpMethod&#39;</span><span class="p">,</span>
</span><span class='line'>                <span class="nx">data</span><span class="o">:</span> <span class="nx">$RequestData</span>
</span><span class='line'>            <span class="p">});</span>
</span><span class='line'>        <span class="p">}]</span>
</span><span class='line'>    <span class="p">}]</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>So, let&rsquo;s break it down:</p>

<ol>
<li>Include the WebApi extensions</li>
<li>Create some helper methods to rename the controllers and provide the right return type</li>
<li>For all classes that inherit <code>ApiController</code>

<ol>
<li>Create a service class</li>
<li>For each method:

<ol>
<li>Create a route helper function that returns a URL formatted with the right parameters</li>
<li>Create a JQuery AJAX call that sends a request to the right URL and includes the right request information</li>
</ol>
</li>
</ol>
</li>
</ol>


<p>The <code>TasksController</code> we have defined looks like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">using</span> <span class="nn">System</span><span class="p">;</span>
</span><span class='line'><span class="k">using</span> <span class="nn">System.Collections.Generic</span><span class="p">;</span>
</span><span class='line'><span class="k">using</span> <span class="nn">System.Linq</span><span class="p">;</span>
</span><span class='line'><span class="k">using</span> <span class="nn">System.Net</span><span class="p">;</span>
</span><span class='line'><span class="k">using</span> <span class="nn">System.Net.Http</span><span class="p">;</span>
</span><span class='line'><span class="k">using</span> <span class="nn">System.Web.Http</span><span class="p">;</span>
</span><span class='line'><span class="k">using</span> <span class="nn">TypewriterBlogPost.Models</span><span class="p">;</span>
</span><span class='line'><span class="k">using</span> <span class="nn">TypewriterBlogPost.ViewModels</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">namespace</span> <span class="nn">TypewriterBlogPost.Controllers</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">class</span> <span class="nc">TasksController</span> <span class="p">:</span> <span class="n">ApiController</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">private</span> <span class="k">static</span> <span class="n">IList</span><span class="p">&lt;</span><span class="n">TaskListViewModel</span><span class="p">&gt;</span> <span class="n">_taskLists</span> <span class="p">=</span> <span class="k">new</span> <span class="n">List</span><span class="p">&lt;</span><span class="n">TaskListViewModel</span><span class="p">&gt;()</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="k">new</span> <span class="nf">TaskListViewModel</span><span class="p">()</span>
</span><span class='line'>            <span class="p">{</span>
</span><span class='line'>                <span class="n">Name</span> <span class="p">=</span> <span class="s">&quot;Todos&quot;</span><span class="p">,</span>
</span><span class='line'>                <span class="n">Author</span> <span class="p">=</span> <span class="s">&quot;Kamranicus&quot;</span><span class="p">,</span>
</span><span class='line'>                <span class="n">Created</span> <span class="p">=</span> <span class="n">DateTime</span><span class="p">.</span><span class="n">Now</span><span class="p">,</span>
</span><span class='line'>                <span class="n">Id</span> <span class="p">=</span> <span class="m">1</span><span class="p">,</span>
</span><span class='line'>                <span class="n">Tasks</span> <span class="p">=</span>
</span><span class='line'>                <span class="p">{</span>
</span><span class='line'>                    <span class="k">new</span> <span class="nf">TaskViewModel</span><span class="p">()</span> <span class="p">{</span> <span class="n">Task</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Task</span><span class="p">()</span> <span class="p">{</span> <span class="n">Text</span> <span class="p">=</span> <span class="s">&quot;Get milk from store&quot;</span> <span class="p">}</span> <span class="p">},</span>
</span><span class='line'>                    <span class="k">new</span> <span class="nf">TaskViewModel</span><span class="p">()</span> <span class="p">{</span> <span class="n">Task</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Task</span><span class="p">()</span> <span class="p">{</span> <span class="n">Text</span> <span class="p">=</span> <span class="s">&quot;Get deli meat&quot;</span><span class="p">,</span> <span class="n">Done</span> <span class="p">=</span> <span class="k">true</span>  <span class="p">}</span> <span class="p">}</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">public</span> <span class="n">IEnumerable</span><span class="p">&lt;</span><span class="n">TaskListViewModel</span><span class="p">&gt;</span> <span class="n">GetAll</span><span class="p">()</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">_taskLists</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">public</span> <span class="n">TaskListViewModel</span> <span class="nf">GetById</span><span class="p">(</span><span class="kt">int</span> <span class="n">id</span><span class="p">)</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">_taskLists</span><span class="p">.</span><span class="n">First</span><span class="p">(</span><span class="n">t</span> <span class="p">=&gt;</span> <span class="n">t</span><span class="p">.</span><span class="n">Id</span> <span class="p">==</span> <span class="n">id</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">public</span> <span class="k">void</span> <span class="nf">Post</span><span class="p">(</span><span class="kt">int</span> <span class="n">id</span><span class="p">,</span> <span class="n">Task</span> <span class="n">task</span><span class="p">)</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="kt">var</span> <span class="n">t</span> <span class="p">=</span> <span class="n">GetById</span><span class="p">(</span><span class="n">id</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>            <span class="n">t</span><span class="p">.</span><span class="n">Tasks</span><span class="p">.</span><span class="n">Add</span><span class="p">(</span><span class="k">new</span> <span class="n">TaskViewModel</span><span class="p">()</span> <span class="p">{</span> <span class="n">Task</span> <span class="p">=</span> <span class="n">task</span> <span class="p">});</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>A few things to note:</p>

<ol>
<li>To avoid name collisions, I use <code>getAll</code> and <code>getById</code></li>
<li>To use with Typewriter, I return simple types&mdash;using <code>HttpResponseMessage</code> won&rsquo;t allow you to strongly-type the service. However you can still be flexible with errors by throwing <code>HttpExceptions</code> and Web API will serialize your response.</li>
<li>This is terrible code and is for illustrative purposes only</li>
</ol>


<p>What gets generated is what you&rsquo;d expect:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">module</span> <span class="nx">TypewriterBlogPost</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kr">export</span> <span class="kr">class</span> <span class="nx">TasksService</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// get: api/tasks/</span>
</span><span class='line'>        <span class="kr">public</span> <span class="kr">static</span> <span class="nx">RouteGetAll</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="err">`</span><span class="nx">api</span><span class="o">/</span><span class="nx">tasks</span><span class="o">/</span><span class="err">`</span><span class="p">;</span>
</span><span class='line'>        <span class="kr">public</span> <span class="kr">static</span> <span class="nx">getAll</span><span class="p">()</span><span class="o">:</span> <span class="nx">JQueryPromise</span><span class="o">&lt;</span><span class="nx">TaskListViewModel</span><span class="p">[]</span><span class="o">&gt;</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="nx">$</span><span class="p">.</span><span class="nx">ajax</span><span class="p">({</span>
</span><span class='line'>                <span class="nx">url</span><span class="o">:</span> <span class="nx">TasksService</span><span class="p">.</span><span class="nx">RouteGetAll</span><span class="p">(),</span>
</span><span class='line'>                <span class="nx">type</span><span class="o">:</span> <span class="s1">&#39;get&#39;</span><span class="p">,</span>
</span><span class='line'>                <span class="nx">data</span><span class="o">:</span> <span class="kc">null</span>
</span><span class='line'>            <span class="p">});</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// get: api/tasks/${id}</span>
</span><span class='line'>        <span class="kr">public</span> <span class="kr">static</span> <span class="nx">RouteGetById</span> <span class="o">=</span> <span class="p">(</span><span class="nx">id</span><span class="o">:</span> <span class="nx">number</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="err">`</span><span class="nx">api</span><span class="o">/</span><span class="nx">tasks</span><span class="o">/</span><span class="nx">$</span><span class="p">{</span><span class="nx">id</span><span class="p">}</span><span class="err">`</span><span class="p">;</span>
</span><span class='line'>        <span class="kr">public</span> <span class="kr">static</span> <span class="nx">getById</span><span class="p">(</span><span class="nx">id</span><span class="o">:</span> <span class="nx">number</span><span class="p">)</span><span class="o">:</span> <span class="nx">JQueryPromise</span><span class="o">&lt;</span><span class="nx">TaskListViewModel</span><span class="o">&gt;</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="nx">$</span><span class="p">.</span><span class="nx">ajax</span><span class="p">({</span>
</span><span class='line'>                <span class="nx">url</span><span class="o">:</span> <span class="nx">TasksService</span><span class="p">.</span><span class="nx">RouteGetById</span><span class="p">(</span><span class="nx">id</span><span class="p">),</span>
</span><span class='line'>                <span class="nx">type</span><span class="o">:</span> <span class="s1">&#39;get&#39;</span><span class="p">,</span>
</span><span class='line'>                <span class="nx">data</span><span class="o">:</span> <span class="kc">null</span>
</span><span class='line'>            <span class="p">});</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// post: api/tasks/${id}</span>
</span><span class='line'>        <span class="kr">public</span> <span class="kr">static</span> <span class="nx">RoutePost</span> <span class="o">=</span> <span class="p">(</span><span class="nx">id</span><span class="o">:</span> <span class="nx">number</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="err">`</span><span class="nx">api</span><span class="o">/</span><span class="nx">tasks</span><span class="o">/</span><span class="nx">$</span><span class="p">{</span><span class="nx">id</span><span class="p">}</span><span class="err">`</span><span class="p">;</span>
</span><span class='line'>        <span class="kr">public</span> <span class="kr">static</span> <span class="nx">post</span><span class="p">(</span><span class="nx">id</span><span class="o">:</span> <span class="nx">number</span><span class="p">,</span> <span class="nx">task</span><span class="o">:</span> <span class="nx">Task</span><span class="p">)</span><span class="o">:</span> <span class="nx">JQueryPromise</span><span class="o">&lt;</span><span class="k">void</span><span class="o">&gt;</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="nx">$</span><span class="p">.</span><span class="nx">ajax</span><span class="p">({</span>
</span><span class='line'>                <span class="nx">url</span><span class="o">:</span> <span class="nx">TasksService</span><span class="p">.</span><span class="nx">RoutePost</span><span class="p">(</span><span class="nx">id</span><span class="p">),</span>
</span><span class='line'>                <span class="nx">type</span><span class="o">:</span> <span class="s1">&#39;post&#39;</span><span class="p">,</span>
</span><span class='line'>                <span class="nx">data</span><span class="o">:</span> <span class="nx">task</span>
</span><span class='line'>            <span class="p">});</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Man, <em>how sexy is that?</em> Not only have we ensured our models and view models stay in-sync, our API is also reflected on the client-side so we don&rsquo;t need to worry about hard-coding routes!</p>

<p>Now we can implement our view model method properly:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">addTask</span><span class="p">(</span><span class="nx">id</span><span class="o">:</span> <span class="nx">number</span><span class="p">,</span> <span class="nx">task</span><span class="o">:</span> <span class="nx">Task</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">TasksService</span><span class="p">.</span><span class="nx">post</span><span class="p">(</span><span class="nx">id</span><span class="p">,</span> <span class="nx">task</span><span class="p">).</span><span class="nx">then</span><span class="p">(</span>
</span><span class='line'>    <span class="p">()</span> <span class="o">=&gt;</span> <span class="nx">toastr</span><span class="p">.</span><span class="nx">success</span><span class="p">(</span><span class="s2">&quot;Posted new task successfully&quot;</span><span class="p">));</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Obviously there&rsquo;s much more you can do such as automatically handling errors, customizing options, creating Angular services, etc.</p>

<h2>So, that&rsquo;s why Typewriter is awesome</h2>

<p>I&rsquo;ve walked through a simple use case of why Typewriter is super useful&mdash;as a developer I&rsquo;m always interested in ways to make my life easier and not worrying about differences between my client and server is always helpful. That&rsquo;s why I love TypeScript and why I love Typewriter. Hope you found this helpful!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Planet Wars AI Competition With C# and Excalibur.js]]></title>
    <link href="http://kamranicus.com/blog/2016/01/25/planet-wars-ai-competition-excaliburjs-csharp/"/>
    <updated>2016-01-25T18:30:00+00:00</updated>
    <id>http://kamranicus.com/blog/2016/01/25/planet-wars-ai-competition-excaliburjs-csharp</id>
    <content type="html"><![CDATA[<p><img src="https://zippy.gfycat.com/BraveBlushingImpala.gif" alt="Planet Wars" /></p>

<p>This past weekend <a href="http://twitter.com/erikonarheim">Erik</a> and I built out a <a href="https://github.com/eonarheim/planet-wars-competition">Planet Wars</a> server (written in C#) and an <a href="http://excaliburjs.com">Excalibur.js</a>-powered visualization (written in TypeScript). Planet Wars is an AI competition where you build an AI that competes against another player to control a solar system. A map consists of several planets that have different growth rates and an initial number of ships. You have to send out a &ldquo;fleet&rdquo; of ships to colonize other planets and the player who controls the most planets and has destroyed their opponent&rsquo;s ships wins the game.</p>

<p>At work we are hosting our 6th Code Camp and recently we started hosting an AI competition internally. You can find past competition agents for <a href="https://github.com/eonarheim/AntAICompetition">Ants</a> and <a href="https://github.com/eonarheim/BellTowerEscape">Elevators</a>, for example.</p>

<p>The <a href="https://github.com/eonarheim/planet-wars-competition/tree/master/PlanetWars/Scripts/game">visualization for Planet Wars</a> is fairly simple, made even simpler using the power of <a href="http://excaliburjs.com">Excalibur.js</a>, the engine we work on during our spare time. We basically just use an Excalibur timer to query the status of the game state and update the state of all the actors in the game. For moving the fleets, we just use the <a href="http://excaliburjs.com/docs/api/edge/classes/ex.actioncontext.html">Actor Action API</a>.</p>

<p>For the <a href="https://github.com/eonarheim/planet-wars-competition/tree/master/PlanetWars/Server">game server</a>, we are using a <a href="https://github.com/eonarheim/planet-wars-competition/blob/master/PlanetWars/Server/HighFrequencyTimer.cs">HighFrequencyTimer</a> to run a 30fps server and then clients just send commands via HTTP, so any kind of agent will work like Python, Perl, PowerShell, or whatever! Anything that speaks HTTP can be a client. The server runs in the context of a website so we can easily query the state using a singleton <code>GameManager</code>. This wouldn&rsquo;t work in a load-balanced environment but it doesn&rsquo;t matter since people develop agents locally and we run the simulations on one server at high-speed to produce the results. If you backed the server with a data store, you could replay games but right now there&rsquo;s only an in-memory implementation.</p>

<p>To keep the server and client models in-sync, we use <a href="http://frhagn.github.io/Typewriter/index.html">Typewriter for Visual Studio</a> which is <strong>amazing</strong> and super useful not just for syncing client/server but also generating web clients, interfaces, etc. from C# code. I plan to write a separate post on some Typewriter tips for Knockout.js and Web API.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[2015: A Year in Review]]></title>
    <link href="http://kamranicus.com/blog/2016/01/05/year-in-review/"/>
    <updated>2016-01-05T01:30:00+00:00</updated>
    <id>http://kamranicus.com/blog/2016/01/05/year-in-review</id>
    <content type="html"><![CDATA[<p>2015 was a very eventful (and fulfilling) year for me and my wife. Let&rsquo;s break it down, shall we?</p>

<h2>Living abroad for 6 months</h2>

<p><img src="https://d262ilb51hltx0.cloudfront.net/max/2000/1*-h8wTj1iOSrHHtnGMxR60w.jpeg" alt="Bordeaux, France" /></p>

<p>By far the most impressive thing I did last year was to <a href="http://kamranicus.com/blog/2015/05/21/5-things-for-6-months-abroad/">take a 6 month sabbatical</a> and live abroad in France with my wife. Though I&rsquo;ve written about it previously, I left out the entire part where we chronicled our adventure in a series of publications on <a href="http://medium.com">Medium</a>. We kept it anonymous during the trip to avoid any potential issues but now that it&rsquo;s over, I will list the different publications so you can read back through what we did for 6 months (spoiler: we did <em>a lot</em>).</p>

<p>Just to be clear when you&rsquo;re reading, I am <strong>Vincent</strong> and my wife is <strong>Celeste.</strong></p>

<ul>
<li><a href="https://medium.com/visa-vis-a-guide">Visa-Vis: A Guide</a> &ndash; Prologue series of posts on steps to being able to live in France for 6 months</li>
<li><a href="https://medium.com/aix-squared">Aix Squared</a> &ndash; Dec 23, 2015-June 14, 2015 &ndash; General posts on food, cities, and living in France</li>
<li><a href="https://medium.com/aix-squared/rennes-france-d4957bf17d4e">Rennes</a>, <a href="https://medium.com/aix-squared/nantes-france-5c0aa9cf5ff">Nantes</a>, <a href="https://medium.com/aix-squared/bordeaux-france-c66f859826c9">Bordeaux</a> &ndash; April 24-30, 2015 &ndash; A tour of north/western France</li>
<li><a href="https://medium.com/aix-in-amsterdam">Aix in Amsterdam</a> &ndash; February 11-19, 2015</li>
<li><a href="https://medium.com/aix-in-marrakesh">Aix in Marrakesh</a> &ndash; March 10-16, 2015</li>
<li><a href="https://medium.com/aix-in-dublin">Aix in Dublin</a> &ndash; April 5-9, 2015</li>
<li><a href="https://medium.com/aix-in-oslo">Aix in Oslo</a> &ndash; April 9-13, 2015</li>
<li><a href="https://medium.com/aix-in-london">Aix in London</a> &ndash; May 12-16, 2015</li>
<li><a href="https://medium.com/aix-in-florence">Aix in Florence</a> &ndash; June 9-14, 2015</li>
</ul>


<p>It was an experience I&rsquo;ll never forget and one that probably won&rsquo;t be repeated anytime soon. My wife and I both felt it was the right time and that we&rsquo;d probably get little to no chance at doing something so crazy once we had kids and &ldquo;settled down.&rdquo; We still hope to continue traveling once a year or couple years, especially after an experience like that. One of my plans for 2016 is to compile all these posts into a book that we print and keep for us and our future children.</p>

<h2>New House</h2>

<p><img src="https://cloud.githubusercontent.com/assets/563819/12107000/cd7f12cc-b32a-11e5-852e-78b839331383.png" alt="Bay window" /></p>

<p>We weren&rsquo;t in a position to buy a house so soon after a 6 month sabbatical but we still thought it was best to move from apartment living to a real house, especially after living in a 400 sq ft space in France. We found a great place to rent in Minneapolis that&rsquo;s pretty close to both workplaces, friends, and family. We&rsquo;ve done a few things to it to make it more like home and we&rsquo;ve been really enjoying it so far and our landlord is superb. The photo above is our enhancement to the bay window. My brother-in-law built the spanning bench between the bookcases and I built the cushion. I removed the tall blinds that covered the window so we could open up the room and add extra seating. It turned out so good!</p>

<h2>New Dog</h2>

<p><img src="https://cloud.githubusercontent.com/assets/563819/12107029/1b61acac-b32b-11e5-9bee-3325f44374db.png" alt="Dogger" /></p>

<p>My wife has always wanted a dog ever since we moved into an apartment together&mdash;except our apartment complex never let us have dogs. We cat-sat (is that a word?) for 2 years for some friends and then they took her back down to Texas where they bought a house and she happily frolicks outside. In August (Dogust?) we went to the humane society and on pretty-much-a-whim took in a cute dog we named Rennes (after <a href="https://medium.com/aix-squared/rennes-france-d4957bf17d4e">one of our favorite French cities</a> we visited). She&rsquo;s a black lab and border collie mix. She&rsquo;s awesome even though she jumps the fence to chase squirrels (we&rsquo;re working on that). We love her a ton.</p>

<h2>Keep Track of My Games</h2>

<p><img src="http://41.media.tumblr.com/fe33ac3443fbfeab5b2e4da2c6fe170e/tumblr_inline_nyz1izCCVg1qlpzxk_500.png" alt="KTOMG" /></p>

<p>2015 marked the <a href="http://blog.keeptrackofmygames.com/post/124929587854/happy-4th-birthday-to-keep-track-of-my-games">4th year</a> that <a href="http://keeptrackofmygames.com">KTOMG</a> has been around since its humble beginnings and while I was abroad it gave me time to focus and finish a <a href="http://kamranicus.com/blog/2015/05/30/ktomg-update/">major rewrite of the codebase in May</a>. Since then I&rsquo;ve released <a href="http://blog.keeptrackofmygames.com/post/134750555276/updates-for-november-2015">public lists</a> and capping the year off with <a href="http://blog.keeptrackofmygames.com/post/135781123861/updates-for-december-2015">Steam syncing</a>, just to name a few features.</p>

<h2>Speaking</h2>

<iframe width="420" height="315" src="https://www.youtube.com/embed/kb7tvaBJeMs" frameborder="0" allowfullscreen></iframe>


<p>Even though I was abroad for 6 months, I still managed to give a talk this year at Twin Cities Code Camp 19: an update to my popular <a href="http://kamranicus.com/presentations/demystifying-typescript">Demystifying TypeScript</a> presentation. You can also find 2014&rsquo;s version <a href="https://www.youtube.com/watch?v=kb7tvaBJeMs">on YouTube</a>.</p>

<h2>Making Games</h2>

<p><img src="https://cloud.githubusercontent.com/assets/563819/12107063/7b1593c0-b32b-11e5-9148-0470e84acfb4.png" alt="Minotaur" /></p>

<p>In August, I participated in the <a href="http://ludumdare.com/compo/ludum-dare-33/">Ludum Dare 33</a> game jam where some friends and I created a minotaur hack-n-slash game, <a href="http://excaliburjs.com/ludum-33/">Crypt of the Minotaur</a> (<a href="https://github.com/excaliburjs/ludum-33">source</a>). I love participating in game jams and by extension, helping to contribute to the <a href="http://excaliburjs.com">Excalibur.js</a> game engine.</p>

<h2>Playing Games</h2>

<p>Somehow after all that I still managed to log hundreds of hours into my gaming habit. Since I added public lists to KTOMG, why don&rsquo;t you go take a look at my <a href="http://keeptrackofmygames.com/users/kamranicus/lists/11">Top 10 Played Games of 2015</a>? Yes, some of those came out in 2014 but I didn&rsquo;t play or finish them until this year. Being abroad, I managed to bring my laptop, 3DS, and PS4 so I played a lot of <a href="http://keeptrackofmygames.com/games/1931">Destiny</a>, finished the remastered <a href="http://keeptrackofmygames.com/games/394">Grim Fandango</a> and other PS4/3DS games. My laptop wasn&rsquo;t that great but I was able to still enjoy <a href="http://keeptrackofmygames.com/games/1267">Pillars of Eternity</a>, a throwback Baldur&rsquo;s Gate-style RPG. In November, I started playing <a href="http://keeptrackofmygames.com/games/145171">Fallout 4</a> and have since logged over 75 hours in it. It&rsquo;s definitely tough to juggle both hobbies: playing games and developing a site that helps manage those games. During time off, I usually try to mix my time between them to satisfy both needs and sticking to a monthly release cadence helps a lot to prioritize work.</p>

<h2>Work &amp; Friends</h2>

<p>My work has been going swimmingly, after my sabbatical I returned to work on a team with one of my best friends. Speaking of friends, I made more this year, fulfilling a goal I made at the start of 2015&mdash;not only abroad but also at home. Board game nights, Dungeon World sessions, and a Star Wars marathon are just some of the highlights of the fun stuff we&rsquo;ve done with our [awesome] circle of friends.</p>

<h2>Looking towards a new year</h2>

<p>Cheers to 2016, let&rsquo;s hope it&rsquo;s even bigger and better than 2015 and brings more happiness and joy to my life.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Influencing Your Kudu Deployment Through Git Commit Messages]]></title>
    <link href="http://kamranicus.com/blog/2015/12/11/kudu-deployment-flags-in-commit-messages/"/>
    <updated>2015-12-11T01:30:00+00:00</updated>
    <id>http://kamranicus.com/blog/2015/12/11/kudu-deployment-flags-in-commit-messages</id>
    <content type="html"><![CDATA[<p>If you&rsquo;re on Windows Azure and using continuous deployment through Git, you may not know you are using an open source platform called
<a href="https://github.com/projectkudu/kudu">Kudu</a> behind-the-scenes that performs your deployment. If this is the first time you&rsquo;ve heard of Kudu and you&rsquo;ve been
using Azure for awhile, it&rsquo;s time to <a href="https://github.com/projectkudu/kudu">get acquainted</a>. Kudu is amazing. It has a whole REST API that lets you manage
deployments, trigger builds, trigger webjobs, view processes, a command prompt, and a ton more.</p>

<p>You can get to your Kudu console by visiting</p>

<pre><code>https://&lt;yoursite&gt;.scm.azurewebsites.net
</code></pre>

<p>The <strong>.scm.</strong> part is the key, as that is where the Kudu site is hosted.</p>

<h2>Customizing Kudu deployments</h2>

<p>One of the other things it offers is a <a href="https://github.com/projectkudu/kudu/wiki/Custom-Deployment-Script">customized deployment script</a>. I&rsquo;ve customized mine because I have a test
project where I run automated tests during the build. This is useful since it&rsquo;ll fail the build if I make any changes
that break my tests and forces me to keep things up-to-date resulting in a higher quality codebase.</p>

<p>If you want to generate your own script, it&rsquo;s pretty easy. Just follow the steps <a href="https://github.com/projectkudu/kudu/wiki/Custom-Deployment-Script">outlined here</a>. For example, after
customizing my script here&rsquo;s what my section looks like to run my tests:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>:: 3. Build unit tests
</span><span class='line'>call :ExecuteCmd "%MSBUILD_PATH%" "%DEPLOYMENT_SOURCE%\src\Tests\Tests.csproj" /nologo /verbosity:m /t:Build /p:AutoParameterizationWebConfigConnectionStrings=false;Configuration=Release /p:SolutionDir="%DEPLOYMENT_SOURCE%\.\\" %SCM_BUILD_ARGS%
</span><span class='line'>
</span><span class='line'>IF !ERRORLEVEL! NEQ 0 goto error</span></code></pre></td></tr></table></div></figure>


<p>All I really did was copy step 2 in the script that builds my web project and just change the path to my tests project.</p>

<p>Finally, I run the tests using the packaged Nunit test runner (checked into source control):</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>call :ExecuteCmd "%DEPLOYMENT_SOURCE%\tools\nunit\nunit-console.exe" "%DEPLOYMENT_SOURCE%\src\Tests\bin\Release\Tests.dll" /framework:v4.5.1
</span><span class='line'>IF !ERRORLEVEL! NEQ 0 goto error</span></code></pre></td></tr></table></div></figure>


<p>Simple!</p>

<h2>Now the fun part</h2>

<p>One thing you&rsquo;ll notice if you start running tests on your builds is that this starts to slow down your continuous deployment workflow.
For 90% of the time this is acceptable, after all, you can wait a few minutes to see your changes show up on the site. But sometimes,
especially for production hotfixes or trial-and-error config changes, that 3-5 minutes becomes unbearable.</p>

<p>In cases like this, I&rsquo;ve set up a little addition to my script that will read the git commit message and take action depending on what phrases it sees.</p>

<p>For example, let&rsquo;s say I commit a change that is just a config change and I know I don&rsquo;t need to run any tests or I really want the quick build.
This is what my commit message looks like:</p>

<pre><code>[notest] just changing App.config
</code></pre>

<p>That phrase <code>[notest]</code> is something my script looks for at build time and if it&rsquo;s present it will skip running tests!
You can use this same logic to do pretty much anything you want. Here&rsquo;s what it looks like after step 3 in my script:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>:: Above at top of file
</span><span class='line'>
</span><span class='line'>IF NOT DEFINED RUN_TESTS (
</span><span class='line'>   SET RUN_TESTS=1
</span><span class='line'>)
</span><span class='line'>
</span><span class='line'>:: 4. Run unit tests
</span><span class='line'>echo Latest commit ID is "%SCM_COMMIT_ID%"
</span><span class='line'>
</span><span class='line'>call git show -s "%SCM_COMMIT_ID%" --pretty=%%%%s &gt; commitmessage.txt
</span><span class='line'>SET /p COMMIT_MESSAGE=&lt;commitmessage.txt
</span><span class='line'>
</span><span class='line'>echo Latest commit message is "%COMMIT_MESSAGE%"
</span><span class='line'>
</span><span class='line'>IF NOT "x%COMMIT_MESSAGE:[notest]=%"=="x%COMMIT_MESSAGE%" (
</span><span class='line'>   SET RUN_TESTS=0
</span><span class='line'>)
</span><span class='line'>
</span><span class='line'>IF /I "%RUN_TESTS%" NEQ "0" (
</span><span class='line'>  echo Running unit tests
</span><span class='line'>  call :ExecuteCmd "%DEPLOYMENT_SOURCE%\tools\nunit\nunit-console.exe" "%DEPLOYMENT_SOURCE%\src\Tests\bin\Release\Tests.dll" /framework:v4.5.1
</span><span class='line'>  IF !ERRORLEVEL! NEQ 0 goto error
</span><span class='line'>) ELSE (
</span><span class='line'>  echo Not running unit tests because [notest] was present in commit message
</span><span class='line'>)</span></code></pre></td></tr></table></div></figure>


<p>Alright, there&rsquo;s definitely some batch file black magic incantations going on here! So let&rsquo;s break it down.</p>

<pre><code>echo Latest commit ID is "%SCM_COMMIT_ID%"
</code></pre>

<p>Kudu defines several useful <a href="https://github.com/projectkudu/kudu/wiki/Deployment-Environment">environment variables</a> that you have access to, including the current commit ID.
I&rsquo;m just echoing it out so I can debug when viewing the log output.</p>

<pre><code>call git show -s "%SCM_COMMIT_ID%" --pretty=%%%%s &gt; commitmessage.txt
SET /p COMMIT_MESSAGE=&lt;commitmessage.txt
</code></pre>

<p>Alright. This took me some real trial and error. Git lets you <a href="https://git-scm.com/docs/git-show"><code>show</code> any commit message</a> and can format it using a printf format string (<code>--pretty=%s</code>).
However, due to the weird escaping rules of batch files and variables, this requires not one but <strong>four</strong> <code>%</code> signs. Go figure.</p>

<p>Next I pipe it to a file, this is only so I can read the file back and store the message in a batch variable (<code>COMMIT_MESSAGE</code>), on the next line.
<strong>Kudu team:</strong> It would be sweet to add a <code>SCM_COMMIT_MESSAGE</code> environment variable!</p>

<pre><code>IF NOT "x%COMMIT_MESSAGE:[notest]=%"=="x%COMMIT_MESSAGE%" (
   SET RUN_TESTS=0
)
</code></pre>

<p>Okay, what&rsquo;s going on here? I&rsquo;ll <a href="http://stackoverflow.com/questions/7005951/batch-file-find-if-substring-is-in-string-not-in-a-file">let StackOverflow explain</a>. The <code>:[notest]=</code> portion REPLACES the term &ldquo;[notest]&rdquo; in
the preceding variable (<code>COMMIT_MESSAGE</code>) with an empty string. The <code>x</code> prefix character guards against batch file weirdness.
So if <code>[notest]</code> is NOT present, this will return true (the strings match). If it is present, the condition will be false and so we do <code>IF NOT</code>
since we want to execute when that is the case.</p>

<p>If <code>[notest]</code> is present in the message, we set another variable, <code>RUN_TESTS</code> to 0.</p>

<pre><code>IF /I "%RUN_TESTS%" NEQ "0" (
    echo Running unit tests
    call :ExecuteCmd "%DEPLOYMENT_SOURCE%\tools\nunit\nunit-console.exe" "%DEPLOYMENT_SOURCE%\src\Tests\bin\Release\Tests.dll" /framework:v4.5.1
    IF !ERRORLEVEL! NEQ 0 goto error
) ELSE (
    echo Not running unit tests because [notest] was present in commit message
)
</code></pre>

<p>If <code>RUN_TESTS</code> does not evaluate to 0, then we run the tests! Otherwise we echo out an informative message as to why it was skipped.</p>

<p>Phew. So how much time do we save on <code>[notest]</code> builds now?</p>

<p><img src="https://cloud.githubusercontent.com/assets/563819/11734864/9a5e5e10-9f80-11e5-92ff-b93a1d9c994a.png" alt="No test build" /></p>

<p>Compared to a build with tests:</p>

<p><img src="https://cloud.githubusercontent.com/assets/563819/11734880/b874bed0-9f80-11e5-9af2-8e0425a02563.png" alt="Build with tests" /></p>

<p>So that flag cuts the build in half! Nice! There are probably some other ways to improve the time. By the way, if you&rsquo;re wondering what&rsquo;s taking so long
in your build, you can use the Kudu <a href="https://github.com/projectkudu/kudu/wiki/REST-API">REST endpoint</a> to see your deployment logs (<strong>/api/deployments</strong> endoint) which contain full timestamp information!</p>

<p>Happy continuous deployment!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Impersonating a User During Automated Testing Scenarios]]></title>
    <link href="http://kamranicus.com/blog/2015/11/06/impersonating-during-testing/"/>
    <updated>2015-11-06T16:00:00+00:00</updated>
    <id>http://kamranicus.com/blog/2015/11/06/impersonating-during-testing</id>
    <content type="html"><![CDATA[<p>I&rsquo;m starting to introduce privacy controls to <a href="http://keeptrackofmygames.com">Keep Track of My Games</a> and I ran into the following scenario when writing my tests:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Scenario: Anonymous user should be able to view a public custom list
</span><span class='line'>  Given a user has a list
</span><span class='line'>  And a user's list is public
</span><span class='line'>  When I request access to the list
</span><span class='line'>  Then I have read-only access</span></code></pre></td></tr></table></div></figure>


<p>In this context, <strong>I</strong> am the anonymous user. This is the exact <a href="http://www.specflow.org/">SpecFlow</a> scenario I wrote. Do you know why I may have run into issues?</p>

<p>Let&rsquo;s look at the first two steps:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='c#'><span class='line'><span class="na">[Given(@&quot;a user has a list&quot;)]</span>
</span><span class='line'><span class="k">public</span> <span class="k">void</span> <span class="nf">GivenAUserHasAList</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">_listResult</span> <span class="p">=</span> <span class="n">_context</span><span class="p">.</span><span class="n">ListService</span><span class="p">.</span><span class="n">CreateList</span><span class="p">(</span><span class="n">_newList</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="na">[Given(@&quot;a user&#39;s list is public&quot;)]</span>
</span><span class='line'><span class="k">public</span> <span class="k">void</span> <span class="nf">GivenAUsersListIsPublic</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">_privacySettings</span><span class="p">.</span><span class="n">Level</span> <span class="p">=</span> <span class="n">PrivacyLevel</span><span class="p">.</span><span class="n">Public</span><span class="p">;</span>
</span><span class='line'>  <span class="n">_context</span><span class="p">.</span><span class="n">ListService</span><span class="p">.</span><span class="n">UpdateListPrivacy</span><span class="p">(</span><span class="n">_listResult</span><span class="p">.</span><span class="n">Id</span><span class="p">,</span> <span class="n">_privacySettings</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Why would this cause a problem with my given scenario?</p>

<ol>
<li>In the first step, I&rsquo;m creating a new list.</li>
<li>In the second step, I&rsquo;m taking the new list I just made from the first step and updating the privacy settings on it.</li>
</ol>


<p>The problem is that my service assumes the context is an authenticated user and will apply changes to the <strong>current user&rsquo;s</strong> list. Well, since I did not call my login helpers before these two steps, I am in an anonymous context so the service calls fail. That&rsquo;s good! But how can I tell my steps to call a service method <em>on behalf</em> of another user without having <em>every</em> step use the current user context?</p>

<p>You might say I should just create a new method that accepts a username and refactor my methods. I <em>could</em> do that but not only is my entire service designed around the current user context, my service layer is essentially the interface of my public API. I would never allow one user to create a list for another user (unless that was a feature). So the same way I wouldn&rsquo;t expose an API method to do something on behalf of someone, I won&rsquo;t add a public method in my service layer to do the same. I could choose to make the method private or internal and grant access to the assembly for testing&mdash;true, I <em>could</em> but that seems like a workaround where I need to expose special functionality just for testing.</p>

<p>The approach I ended up doing was simpler and more elegant and leveraged an existing pattern I was relying on: injecting an <code>IUserContext</code> into my service layer like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='c#'><span class='line'><span class="k">public</span> <span class="nf">ListService</span><span class="p">(</span><span class="n">IUserContext</span> <span class="n">userContext</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">_userContext</span> <span class="p">=</span> <span class="n">userContext</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>This is using standard dependency injection (Ninject, in my case) to inject a context for the current user. That context gets created and maintained outside this class, so it doesn&rsquo;t care who provided it or where it came from, it just uses it to determine business logic.</p>

<p>So since I&rsquo;m already injecting the current user context and mocking it in my tests, why not simply swap out the context when I need to?</p>

<h2>Creating an impersonation context</h2>

<p>That&rsquo;s what I ended up doing. Here&rsquo;s my implementation of a <code>TestingImpersonationContext</code> (<a href="https://gist.github.com/kamranayub/9654d6581fbcf63cf481">https://gist.github.com/kamranayub/9654d6581fbcf63cf481</a>):</p>

<script src="https://gist.github.com/kamranayub/9654d6581fbcf63cf481.js"></script>


<p>It should be clear what&rsquo;s happening but let me explain further. Specifically in SpecFlow you can inject a context into your testing steps like so:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='c#'><span class='line'><span class="k">public</span> <span class="k">class</span> <span class="nc">StepBase</span> <span class="p">:</span> <span class="n">TechTalk</span><span class="p">.</span><span class="n">SpecFlow</span><span class="p">.</span><span class="n">Steps</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">protected</span> <span class="n">TestingContext</span> <span class="n">_context</span><span class="p">;</span>
</span><span class='line'>    <span class="k">public</span> <span class="nf">StepBase</span><span class="p">(</span><span class="n">TestingContext</span> <span class="n">context</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">_context</span> <span class="p">=</span> <span class="n">context</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>As long as your step classes inherit that <code>StepBase</code>, you have access to a context. All I did was build a method off that context that swapped out my existing dependency that was injected for <code>IUserContext</code> with a temporary context that impersonated the requested user. Once it is disposed, it restores the original context. Easy as pie!</p>

<p>If you are <strong>not</strong> using SpecFlow which is probably the case, don&rsquo;t fret&mdash;all you really need is a class or helper method that you can access in your test classes. However you want to achieve that is up to you. Create a base class, don&rsquo;t even bother with dependency injection, etc. This is entirely doable without DI but since my app relies on it I also leverage it during testing.</p>

<p>Now given we have an impersonation context helper, here&rsquo;s how our two testing steps have changed:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='c#'><span class='line'><span class="na">[Given(@&quot;a user has a list&quot;)]</span>
</span><span class='line'><span class="k">public</span> <span class="k">void</span> <span class="nf">GivenAUserHasAList</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">using</span> <span class="p">(</span><span class="n">_context</span><span class="p">.</span><span class="n">Impersonate</span><span class="p">(</span><span class="s">&quot;user&quot;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">_listResult</span> <span class="p">=</span> <span class="n">_context</span><span class="p">.</span><span class="n">ListService</span><span class="p">.</span><span class="n">CreateList</span><span class="p">(</span><span class="n">_newList</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="na">[Given(@&quot;a user&#39;s list is public&quot;)]</span>
</span><span class='line'><span class="k">public</span> <span class="k">void</span> <span class="nf">GivenAUsersListIsPublic</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">using</span> <span class="p">(</span><span class="n">_context</span><span class="p">.</span><span class="n">Impersonate</span><span class="p">(</span><span class="s">&quot;user&quot;</span><span class="p">))</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">_privacySettings</span><span class="p">.</span><span class="n">Level</span> <span class="p">=</span> <span class="n">PrivacyLevel</span><span class="p">.</span><span class="n">Public</span><span class="p">;</span>
</span><span class='line'>        <span class="n">_context</span><span class="p">.</span><span class="n">ListService</span><span class="p">.</span><span class="n">UpdateListPrivacy</span><span class="p">(</span><span class="n">_listResult</span><span class="p">.</span><span class="n">Id</span><span class="p">,</span> <span class="n">_privacySettings</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>I could even update my scenario to be specific about <strong>who&rsquo;s list</strong> I&rsquo;m accessing (so it&rsquo;s not ambiguous between logged in user vs. another user) but since I only have two users in my testing context, it doesn&rsquo;t really matter.</p>

<p>Now for the test results:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='c#'><span class='line'><span class="n">Given</span> <span class="n">a</span> <span class="n">user</span> <span class="n">has</span> <span class="n">a</span> <span class="n">list</span>
</span><span class='line'><span class="p">-&gt;</span> <span class="n">done</span><span class="p">:</span> <span class="n">ListSteps</span><span class="p">.</span><span class="n">GivenAUserHasAList</span><span class="p">()</span> <span class="p">(</span><span class="m">0.2</span><span class="n">s</span><span class="p">)</span>
</span><span class='line'><span class="n">And</span> <span class="n">a</span> <span class="n">user</span><span class="err">&#39;</span><span class="n">s</span> <span class="n">list</span> <span class="k">is</span> <span class="k">public</span>
</span><span class='line'><span class="p">-&gt;</span> <span class="n">done</span><span class="p">:</span> <span class="n">ListSteps</span><span class="p">.</span><span class="n">GivenAUsersListIsPublic</span><span class="p">()</span> <span class="p">(</span><span class="m">0.0</span><span class="n">s</span><span class="p">)</span>
</span><span class='line'><span class="n">When</span> <span class="n">I</span> <span class="n">request</span> <span class="n">access</span> <span class="n">to</span> <span class="n">the</span> <span class="n">list</span>
</span><span class='line'><span class="p">-&gt;</span> <span class="n">done</span><span class="p">:</span> <span class="n">ListSteps</span><span class="p">.</span><span class="n">WhenIRequestAccessToTheList</span><span class="p">()</span> <span class="p">(</span><span class="m">0.1</span><span class="n">s</span><span class="p">)</span>
</span><span class='line'><span class="n">Then</span> <span class="n">I</span> <span class="n">have</span> <span class="n">read</span><span class="p">-</span><span class="n">only</span> <span class="n">access</span>
</span><span class='line'><span class="p">-&gt;</span> <span class="n">done</span><span class="p">:</span> <span class="n">ListSteps</span><span class="p">.</span><span class="n">ThenIHaveReadAccess</span><span class="p">()</span> <span class="p">(</span><span class="m">0.0</span><span class="n">s</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>The tests are green and now I&rsquo;m a happy coder. By the way, if you aren&rsquo;t using <a href="http://specflow.org">SpecFlow</a> for .NET you should consider it, I love it.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using Azure CDN Origin Pull With Cassette]]></title>
    <link href="http://kamranicus.com/blog/2015/10/10/azure-cdn-cassette/"/>
    <updated>2015-10-10T00:30:00+00:00</updated>
    <id>http://kamranicus.com/blog/2015/10/10/azure-cdn-cassette</id>
    <content type="html"><![CDATA[<p>For the October update for <a href="http://keeptrackofmygames.com">Keep Track of My Games</a> I wanted to offload my web assets to a CDN. Since I&rsquo;m already using <a href="http://azure.com">Microsoft Azure</a> to host the site, I decided to use <a href="https://azure.microsoft.com/en-us/services/cdn/">Azure CDN</a>.</p>

<p>I set it up for &ldquo;Origin Pull&rdquo; which means that instead of uploading my assets to the CDN (Azure Blob storage), you request a file from the CDN and Azure will go and get it from your website and then cache it on their servers.</p>

<p>So as an example:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>User requests http://az888888.vo.msecnd.net/stylesheets/foo.png
</span><span class='line'>|
</span><span class='line'>|
</span><span class='line'>CDN: have I cached "stylesheets/foo.png?"
</span><span class='line'>  Yes: Serve content from edge cache (closest to user)
</span><span class='line'>  No: Request http://yourwebsites.com/stylesheets/foo.png and serve</span></code></pre></td></tr></table></div></figure>


<p>You can read more about <a href="https://azure.microsoft.com/en-us/documentation/articles/cdn-create-new-endpoint/">how to set up origin pull in Azure CDN</a>. In my case, I used &ldquo;Custom Origin&rdquo; of &ldquo;<a href="http://keeptrackofmygames.com">http://keeptrackofmygames.com</a>&rdquo;.</p>

<h2>Using CDN with Cassette</h2>

<p>I use the .NET library <a href="http://getcassette.com">Cassette</a> for bundling &amp; minification for KTOMG&mdash;when I started KTOMG there was no Microsoft provided option and Cassette has been really stable.</p>

<p>It works pretty much as you&rsquo;d expect:</p>

<ul>
<li>Define &ldquo;bundles&rdquo; which are sets of scripts/stylesheets</li>
<li>Render bundles onto page(s)</li>
<li>If debug mode, render individually otherwise minify and concatenate</li>
</ul>


<p>By default, Cassette will render URLs like this in your source code:</p>

<p>In debug mode:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Bundle: ~/Content/core
</span><span class='line'>
</span><span class='line'>- /cassette.axd/asset/Content/bootstrap.css?hash
</span><span class='line'>- /cassette.axd/asset/Content/site.css?hash
</span><span class='line'>- /cassette.axd/asset/Content/app.css?hash</span></code></pre></td></tr></table></div></figure>


<p>And in production:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>/cassette.axd/stylesheet/{hash}/Content/core</span></code></pre></td></tr></table></div></figure>


<p>But if we want to serve assets over the CDN, we need to plug in our special CDN URL prefix&mdash;not only for script/stylesheet references but also references to images <em>in</em> those files.</p>

<p>Luckily, Cassette provides a facility to modify generated URLs by letting you register a <code>IUrlGenerator</code>. Here&rsquo;s my full implementation of this for my CDN:</p>

<script src="https://gist.github.com/kamranayub/2da4ccfec3e7812c8367.js"></script>


<p>As you can see, I register a custom <code>IUrlGenerator</code> and a custom <code>IUrlModifier</code>. The default <code>IUrlModifider</code> is Cassette&rsquo;s <code>VirtualDirectoryPrepender</code> and it just prepends &ldquo;/&rdquo; to the beginning of every URL but in our case we want to conditionally prepend the Azure CDN endpoint in production.</p>

<p>In production, this will produce the following output:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>https://az99999.vo.msecnd.net/cassette.axd/stylesheet/{hash}/Content/core</span></code></pre></td></tr></table></div></figure>


<p>To allow local debugging and CDN in production I just use an app setting in the web.config. In Azure, I also add an application setting (<code>CdnUrl</code>) through the portal in my production slot with the correct CDN URL and voila&mdash;all my assets will now be served over CDN.</p>

<h3>Notes</h3>

<ul>
<li><p>Azure CDN does not yet support HTTPS for custom origin domains. So if you want to serve content over <a href="http://static.yoursite.com">http://static.yoursite.com</a> you can&rsquo;t serve it over HTTPS because Azure doesn&rsquo;t allow you to upload or set a SSL certificate to use and insteads uses their own certificate which is not valid for your domain. <a href="http://feedback.azure.com/forums/169397-cdn/suggestions/1332683-allow-https-for-custom-cdn-domain-names">Vote up the UserVoice issue</a> on this.</p></li>
<li><p>Azure CDN origin pull does not seem to respect <code>Cache-Control: private</code> HTTP header. For example, by default MVC serves pages with private cache control which means browsers won&rsquo;t cache that page and neither <em>should</em> Azure CDN&mdash;but it does anyway. In my case, I really don&rsquo;t want a true mirror of my site, I just wants assets served over CDN and Cassette sets <code>Cache-Control: public</code> on them automatically. <a href="http://feedback.azure.com/forums/169397-cdn/suggestions/10148280-respect-cache-control-private-for-origin-pull">You can upvote my feature request on UserVoice</a>.</p></li>
<li><p>I am choosing <strong>not</strong> to point my entire domain to the CDN. Some folks choose to serve their entire site over the CDN which is definitely something you can do. However, in my case, I didn&rsquo;t want to do that. If you instead chose to point your domain to the CDN endpoint, you don&rsquo;t need to do any of this&mdash;<strong>everything</strong> will be served over the CDN.</p></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PowerShell Script to Generate an HTML5 Offline Manifest]]></title>
    <link href="http://kamranicus.com/blog/2015/09/17/powershell-html5-offline-manifest/"/>
    <updated>2015-09-17T02:40:00+00:00</updated>
    <id>http://kamranicus.com/blog/2015/09/17/powershell-html5-offline-manifest</id>
    <content type="html"><![CDATA[<p>In my new role at work I&rsquo;ve been learning PowerShell to administrate our systems (I&rsquo;m a half developer, half sys admin monster). I&rsquo;ve been a developer for a long time and been living in .NET for about as long&mdash;I still had not really <em>embraced</em> PowerShell as something I could use in my daily development routine. I&rsquo;ve changed my tune. <strong>PowerShell is awesome.</strong> It&rsquo;s also not too hard to pick up once you learn how it works. I recommend you take a serious look at learning it. I recommend <a href="https://www.microsoftvirtualacademy.com/en-us/training-courses/getting-started-with-powershell-3-0-jump-start-8276">following the PowerShell 3 Jumpstart course</a> and trial and error.</p>

<p>Anyway, for some of the games we write as part of <a href="http://excaliburjs.com">Excalibur.js</a> for game jams we would like to run them offline. To do this, you need to create an <a href="http://www.html5rocks.com/en/tutorials/appcache/beginner/">HTML5 Application Manifest file</a>. However, this file is super finicky, as outlined in the linked article. In order to assist, I wrote a small PowerShell script that generates an <code>appcache</code> manifest file with each file&rsquo;s MD5 checksum. Therefore, the manifest file will only change when dependent assets change. I do some more work to disable it locally and only enable for release, but you can run this script as part of your build.</p>

<script src="https://gist.github.com/kamranayub/cc2c4d371a83aec8279e.js"></script>


<p>Modify the script to be specific to your project and it should output an appropriate manifest file. Feel free to change as you see fit.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Use Special Gmail Addresses to Redirect and Filter Incoming Mail or Bypass Unique Email Checks]]></title>
    <link href="http://kamranicus.com/blog/2015/07/29/gmail-special-address/"/>
    <updated>2015-07-29T04:23:00+00:00</updated>
    <id>http://kamranicus.com/blog/2015/07/29/gmail-special-address</id>
    <content type="html"><![CDATA[<p>If you have a Gmail account, there&rsquo;s a sweet feature you might not know about.</p>

<p>Let&rsquo;s say your email is:</p>

<p><code>johndoe@gmail.com</code></p>

<p>First tip: adding dots (.) does not change the email. The following emails are identical to Google and will route email to <code>johndoe@gmail.com</code>:</p>

<ul>
<li><code>john.doe@gmail.com</code></li>
<li><code>john....doe@gmail.com</code></li>
<li>etc.</li>
</ul>


<p>Next tip: you can add a plus sign to the end of your email and then type in whatever you want. It&rsquo;ll <em>still</em> get sent to you. You can use this to your advantage by filtering mail sent to that specific tagged address or you can bypass &ldquo;unique email&rdquo; checks on websites but still get email sent to you:</p>

<ul>
<li><code>johndoe+medium.com@gmail.com</code></li>
<li><code>johndoe+microsoft.com@gmail.com</code></li>
<li><code>johndoe+spam@gmail.com</code></li>
</ul>


<p>So you could filter incoming mail based on those addresses above. This comes in really handy for sites you don&rsquo;t care about but still need at least one email from them&mdash;the rest can be filtered. It can also be useful to identify spam email sources&mdash;who leaked your email? If you saw spam addressed to <code>johndoe+spamsite@gmail.com</code>, you know <code>spamsite</code> was responsible for leaking/sharing your email.</p>

<p>Happy power-Gmailing!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Updated] Install Windows 10 Immediately Before Rollout]]></title>
    <link href="http://kamranicus.com/blog/2015/07/29/install-windows-10-immediately/"/>
    <updated>2015-07-29T02:13:00+00:00</updated>
    <id>http://kamranicus.com/blog/2015/07/29/install-windows-10-immediately</id>
    <content type="html"><![CDATA[<p><strong>Update (8:49pm)</strong>: I adjusted my Windows 8 date/time to tomorrow and the progress of the update jumped and I&rsquo;m completed now. I now see a Restart PC to finish installing updates.</p>

<p><strong>Update (9:00pm)</strong>: Well it looks like it&rsquo;s a bust with Windows 8.1. My friend tested on Windows 7 and it worked but mine refuses to install&mdash;it just says I have it reserved and it&rsquo;s ready. I tried rebooting multiple times and running the /updatenow command again but no go.</p>

<p><img src="https://cloud.githubusercontent.com/assets/563819/8948430/c0f67f0e-356c-11e5-9daf-8cafb3521042.png" alt="image" /></p>

<p><strong>Update (10:00pm CST):</strong> No luck on my other PC, same situation. Guess I&rsquo;ll just have to wait in line like everybody else!</p>

<hr />

<p>This is only applicable for the next few hours until your machine gets Windows 10 rolled out. If you&rsquo;re impatient like me, a friend tipped me off that he was able to install Windows 10 prematurely by simply forcing Windows Update to download Windows 10 and then setting his system time forward a day (BIOS, I&rsquo;m thinking).</p>

<p>It&rsquo;s kind of unbelievable but it&rsquo;s working so far. I&rsquo;m at 95% complete downloading (you can view in Windows Update window).</p>

<p><img src="https://cloud.githubusercontent.com/assets/563819/8948016/ce3997f0-3567-11e5-8e1e-679fd5b54daa.png" alt="Progress" /></p>

<ol>
<li>Hit Windows+R to bring up Run command</li>
<li>Type in <code>wuauclt.exe /updatenow</code> (<strong>Works</strong>)</li>
<li>Wait for the download to finish (Control Panel &ndash;> Windows Update) (<strong>Works</strong>)</li>
<li>When Windows Update says, &ldquo;Preparing for installation&hellip;&rdquo;, set system time forward a day in Windows (<strong>Works</strong>)<br/>
<img src="https://cloud.githubusercontent.com/assets/563819/8948191/fa639e0a-3569-11e5-97c0-2b79d709c8cf.png" alt="image" /></li>
<li>When progress is done, reboot (<strong>Untested</strong>)</li>
<li>Windows 10 should install (<strong>Untested</strong>)</li>
</ol>


<p>I will update this post with any new information.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Behind the Major Update to Keep Track of My Games]]></title>
    <link href="http://kamranicus.com/blog/2015/05/30/ktomg-update/"/>
    <updated>2015-05-30T22:13:00+00:00</updated>
    <id>http://kamranicus.com/blog/2015/05/30/ktomg-update</id>
    <content type="html"><![CDATA[<p><img src="https://cloud.githubusercontent.com/assets/563819/7899619/b3154994-072a-11e5-8da1-b9a9703a8b57.png" alt="My profile" /></p>

<p>Today I just pushed a <strong>major</strong> update to <a href="http://keeptrackofmygames.com">KTOMG</a>. <em>Psst, you should join!</em></p>

<p>You can <a href="http://blog.keeptrackofmygames.com/post/120264549011/updates-for-may-2015">reference the blog post</a> for details on features but on the technical side I&rsquo;m pretty proud because I got to implement a bunch of new tech that I&rsquo;ve been wanting to learn properly.</p>

<!-- More -->


<h2>At a glance</h2>

<p>The site is built using <a href="http://getbootstrap.com">Bootstrap</a>, <a href="http://lesscss.org">LESS</a>, and <a href="http://knockoutjs.com">Knockout.js</a>. It is totally responsive and yes, every feature is available on every view. I don&rsquo;t yet have offline mode or some more app-y things like local storage quite yet but it&rsquo;s on my to-do list. By far the hardest thing to make responsive was the list view but using Flexbox and toolbar configurations, it&rsquo;s manageable. It could always be simpler though, my work is never done.</p>

<h2>CSS3 Flexbox</h2>

<p><img src="https://cloud.githubusercontent.com/assets/563819/7899652/94500830-072c-11e5-8656-59fb097ecf36.png" alt="Lists" /></p>

<p>The list view is using <a href="https://css-tricks.com/snippets/css/a-guide-to-flexbox/">CSS3 Flexbox</a> with <code>display: table</code> fallback w/JavaScript. A Flexbox grid is perfect for a modern responsive app, which KTOMG is. It scales down to mobile fine (and if you don&rsquo;t have Flexbox or if the fallback fails, the worst you get is a stacked list). For different breakpoints I customize the flex basis of the items to create 1-3 column layouts. The homepage will soon use Flexbox as soon as I get to it (right now it&rsquo;s using <code>display: table</code> to maintain equal-height columns). All of the modern browsers support Flexbox and for those that don&rsquo;t, they just get a wrapping grid.</p>

<p>I also use Flexbox for any grid of games using table display as a fallback; this prevents me from needing to have fixed column sizes for different screen sizes so the games will just wrap as they need to.</p>

<p><strong>Aside:</strong> The box art image grid for the list is simply just the first four games in the list (dynamically updated, since the entire page uses Knockout) positioned using <code>background-size</code> and <a href="https://developer.mozilla.org/en-US/docs/Web/Guide/CSS/Using_multiple_backgrounds">multiple backgrounds</a>. It uses a placeholder image repeated 4 times, in case the games are missing artwork and during loading.</p>

<p>Most of the CSS3/HTML5 stuff I have fallbacks by detecting features using <a href="http://modernizr.com/">Modernizr</a>.</p>

<h2>HTML5 Drag and Drop</h2>

<p>The other cool thing Flexbox gives you is some hot drag and drop action by allowing dynamic insertion of flex items:</p>

<p><img src="https://cloud.githubusercontent.com/assets/563819/7899631/1b7db50c-072b-11e5-9977-49c7b6c3b176.gif" alt="Drag and drop" /></p>

<p>I wrote the drag and drop code in vanilla HTML5 Javascript, it wasn&rsquo;t too bad <a href="https://developer.mozilla.org/en-US/docs/Web/Guide/HTML/Drag_and_drop">using MDN as a guide</a>. The fallback if that isn&rsquo;t supported is simply toolbar icons (which really is faster anyway for moving things far).</p>

<p>I admit I haven&rsquo;t tried a browser that <em>doesn&rsquo;t</em> support Flexbox but <em>does</em> support drag/drop, so that case might still need some tweaking.</p>

<h2>Hopscotch Tutorials</h2>

<p><img src="https://cloud.githubusercontent.com/assets/563819/7899658/bda3d91e-072c-11e5-80ea-932d2f309681.png" alt="Tutorials" /></p>

<p>Since lists are pretty powerful, people might need some help remembering all the things they can do.</p>

<p>I use a modified version of <a href="http://linkedin.github.io/hopscotch">Hopscotch</a> for an introduction tutorial. I struggled at first to figure out how I wanted to do tutorials. I ended up just using a string array on every user that I fill in when they finish a tutorial, allowing for an infinite number of tutorials and everyone not seeing them by default. I keep a master list of valid tutorials on the server.</p>

<p>It&rsquo;s a simple solution that will let me add tutorials as I can make them. It took me a little finnagling, but I also got the tour working fine on small screens.</p>

<h2>Stats with Chart.js</h2>

<p><img src="https://cloud.githubusercontent.com/assets/563819/7899666/222e5d5a-072d-11e5-9328-f52ae59c9e76.png" alt="Stats" /></p>

<p>I use <a href="http://www.chartjs.org/">Chart.js</a> for profile and list stats. The API is easy to use and easy to extend, as well as being sufficiently sexy. The stats I show right now are just the tip of the iceberg. I look forward to generating some cool charts later on (especially the Radar ones for comparisons).</p>

<p>Also, I apparently really like Action/Adventure and RPGs. But I knew that already, tell me something I don&rsquo;t know! Like maybe my &ldquo;burndown&rdquo; for finishing my backlog&hellip;</p>

<h2>I&rsquo;m excited</h2>

<p>I worked on this update all month as my wife will attest. I still have <a href="ktomg.uservoice.com/">plenty</a> to do but <a href="http://kamranicus.com/blog/2015/05/21/5-things-for-6-months-abroad/">our vacation</a> is coming to an end. I don&rsquo;t think I&rsquo;ll be able to release such massive updates each month but this one definitely gets me closer to completing the vision I have. I&rsquo;m pretty excited! The updates are just in time for the big gaming conferences, if only I could get public lists out by the end of June&hellip;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Knockout.js Binding Report for Performance Tuning]]></title>
    <link href="http://kamranicus.com/blog/2015/05/25/knockout-binding-report/"/>
    <updated>2015-05-25T10:30:00+00:00</updated>
    <id>http://kamranicus.com/blog/2015/05/25/knockout-binding-report</id>
    <content type="html"><![CDATA[<p>I use a lot of <a href="http://knockoutjs.com">Knockout.js</a> on <a href="http://keeptrackofmygames.com">Keep Track of My Games</a>. I love Knockout but sometimes it makes it difficult to understand what&rsquo;s slowing my page down.</p>

<!-- More -->


<p>For the game list, there&rsquo;s a lot of binding going on because I have to bind not only the list of games but also the toolbar.</p>

<p><img src="http://41.media.tumblr.com/fefa8f95951ed13a2f4d22e758bb807b/tumblr_inline_nonu62Tr1J1qlpzxk_540.png" alt="KTOMG list" /></p>

<p>Before I deploy the newest update (shown above), I&rsquo;d prefer it if the list binding performance was better than it is now. Currently there&rsquo;s a visible block on the UI thread when returning results from the API, about 500-1000ms. <strong>This is unacceptable.</strong></p>

<p>A quick Google search did not yield anything regarding a &ldquo;real&rdquo; performance tool for Knockout. What I would love is an extension that would overlay performance statistics over the UI of my app after binding is complete. This way I could visualize and easily pinpoint what bindings are causing performance issues.</p>

<p>I&rsquo;ve made a small step towards that dream by creating a simple reporting script that outputs a &ldquo;binding report&rdquo; to the Chrome console:</p>

<p><img src="https://cloud.githubusercontent.com/assets/563819/7795861/5a10389a-02d9-11e5-9462-056fa9e4da18.png" alt="Binding report" /></p>

<p>The report displays the total duration of the binding process (which is all bindings that occur after a 500ms wait time) as well as the top binding according to total duration.</p>

<p>It also displays each binding summary in a table (<code>console.table</code>). You can drill-down by expanding the array entries underneath the table (sorted by duration).</p>

<p><img src="https://cloud.githubusercontent.com/assets/563819/7795969/8fb1c828-02da-11e5-8b81-fe88f466812e.png" alt="Drill-down" /></p>

<p>The script works by wrapping all the binding handlers (even custom ones) in a wrapper function that calculates the duration of the call to <code>init</code> or <code>update</code>. You just need to include it after your custom binding handlers and before the <code>applyBindings</code> call.</p>

<p>The script requires <a href="http://underscorejs.org">Underscore</a> and Google Chrome. Here&rsquo;s the gist:</p>

<script src="https://gist.github.com/kamranayub/65399fa247a6c182bc65.js"></script>


<p>As you can see in my own performance report, I have some work to do to fix my <code>if</code> bindings. It doesn&rsquo;t exactly pinpoint the problem binding, but it gets me a step closer to understanding what&rsquo;s going on.</p>

<p><img src="https://cloud.githubusercontent.com/assets/563819/7796086/f407dc76-02db-11e5-90e7-b89613408174.png" alt="Uh oh" /></p>

<p>Now if you&rsquo;ll execuse me, I&rsquo;ve got some work to do.</p>

<p><strong>Update:</strong> Using this little script, I was able to get down to &lt;150ms from 600-900ms (and this is a slow laptop). This is much more acceptable for a release this week!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[5 Things I Learned About Design While Living Abroad for 6 Months]]></title>
    <link href="http://kamranicus.com/blog/2015/05/21/5-things-for-6-months-abroad/"/>
    <updated>2015-05-21T16:48:00+00:00</updated>
    <id>http://kamranicus.com/blog/2015/05/21/5-things-for-6-months-abroad</id>
    <content type="html"><![CDATA[<p>My wife and I have been living abroad in France for the past six months, since December. We had originally planned for me to work during this time (and to stay longer) but sometimes things just don&rsquo;t work out as planned. Still, it was truly a blessing in disguise as we&rsquo;ve been able to travel and I&rsquo;ve been able to observe and learn about how people around the world use technology that has affected the way I think about how I design software and websites.</p>

<p>Here are 5 things I&rsquo;ve learned during my 6 months living abroad.</p>

<!-- More -->


<h2>1. Mobile is well and truly ubiquitous</h2>

<p>We know phones are ubiquitous, right? But I don&rsquo;t think I truly understood until I traveled around and saw it for myself in &ldquo;the wild.&rdquo; When you travel you&rsquo;re reduced to the bare minimum you&rsquo;re willing to take and a phone is a lifeline. When you&rsquo;re trying to pay bills, send PDFs, or figuring out bus routes, you start to appreciate all the connectivity you really have.</p>

<p>When we walked through the <a href="http://www.morocco.com/blog/arsat-moulay-abdeslam-cyber-park">Cyber Park in Marrakech, Morocco</a>, we saw people from all walks of life gathering and sitting around the park. Were they frolicking through the gardens? No, although the gardens <em>were</em> beautiful. The Cyber Park in Marrakech is actually a <strong>fully connected park</strong> and offers free Wi-Fi for anyone that wants to connect. They even have touch kiosks with Chrome installed on them. This was important to us as our Airbnb internet was actually powered by someone&rsquo;s 3G data plan. It was slow as heck. The park&rsquo;s Wi-Fi was pretty decent, good enough to do a video call and more than enough to browse news or check emails. This was a cool idea merging beautiful outdoor environments with technology. United States, let&rsquo;s see some cyber parks!</p>

<p><a href="https://flic.kr/p/auYjGX"><img src="https://cloud.githubusercontent.com/assets/563819/7750838/c4fd5bac-ffd6-11e4-9387-fb59d7aead09.jpg" alt="Cyber Park" /></a></p>

<p>I watched as pre-teens and adults took their phones out (usually Android) to text or surf the web. Not only were they using &ldquo;low-end&rdquo; hardware they were trying to use apps and sites <strong>we build</strong>. Can your site even run on a low-end Android phone? Can <em>mine</em>?! It was an eye-opener. As the community flocks to all-Javascript, all-the-time frameworks like Angular, I sat there wondering if that&rsquo;s really a good idea if you really want to <em>reach</em> people, everyday people, on all these devices.</p>

<p>Even in a modern city like the one in France where we lived, Internet connectivity is available but not optimal. The fastest we can get in the city center is 15Mbps, which is pretty good but nothing like the 40-100Mbps I can get in Minneapolis. Mobile is a bit better, with access to LTE and 4G for most subscribers on the major networks&mdash;I myself used SFR &ldquo;La Carte&rdquo; with 1GB of data for 30 euros per 30-day period. I ended up just switching to the 600MB option for 20 euros since I didn&rsquo;t actually use all that data. Data caps are a thing, folks! Thankfully native apps provide options to prevent them from hogging data on cellular networks but web sites? Nope&mdash;so I avoided surfing the web when on data.</p>

<p>People are using their phones everywhere, way more than they are using laptops (if they even own one). People don&rsquo;t sit outside here on their MacBooks. They browse and consume on their tiny little phones. Teens sit on the stairs of a building in the historic city center of Marseille, their thumbs dancing across the screen of WhatsApp sending emotes to their friends. Adults sit at a cafe, sipping espresso on the canal streets of Amsterdam as they type on their iPad. Commuters stand in the Paris metro, headphones plugged-in playing Candy Crush Saga on their Windows Phones. Business people in suits walk briskly through the streets of central London, phone in hand checking their emails. Merchants in the souks of Marrakech discuss politics over some mint tea while checking Twitter or the news on their phone. Your driver is chatting with his friend in Arabic as you head 200km through the countryside to a village in Morocco. This isn&rsquo;t made up, these are all things I&rsquo;ve observed first-hand.</p>

<p>The truth is, when we design, we typically design for ourselves, in a bubble. I think we&rsquo;re all guilty of it. It&rsquo;s not until you&rsquo;re out there, &ldquo;amongst the people&rdquo;, that you realize that maybe testing your site on the high-end phones and super-fast LAN networks might not be representative of the people using your site. I brought my brother&rsquo;s laptop with me and it really sucks for development. It&rsquo;s slow. Still, it&rsquo;s kind of a good thing, the pain I feel while developing forces me to live through every slow cycle the CPU churns out as Visual Studio pauses between keystrokes, or Chrome chugging on [my] poorly written Javascript. Performance matters but We are Designers and we work on big rigs so we don&rsquo;t feel that pain as much as we should.</p>

<p>I challenge you to pull out that dusty Dell laptop from 2004 or your 1st-gen iPad and try running your site. If it works, you might be reaching way more people across the world than you thought. If it doesn&rsquo;t&hellip; well, it&rsquo;s up to you to decide. From the souks of Marrakech to the canal streets of Amsterdam, it&rsquo;s all the same:  <strong>Mobile. Is. Ubiquitous.</strong> And it is used <strong>everywhere</strong> in <strong>every</strong> setting imaginable.</p>

<h2>2. You can learn about design from transportation networks</h2>

<p>If you want to learn about designing for everyone, you can&rsquo;t do much better than being a tourist and navigating the transportation networks of the world. The variance between cities is astounding.</p>

<p><strong>Amsterdam</strong></p>

<p>Amsterdam has fantastic real-time traffic data for buses, trams, and trains. This data is not only available on Google Maps but is also shown live <strong>on the buses and trams</strong>, making it crazy easy to get around. Their tram system also has an electronic check-in/out system where you check in as you walk into the tram and check out as you go out. This sounds good in writing but in practice it is confusing to tourists (or non-Amsterdam natives) as only <strong>certain</strong> doors can be used to exit. Clearly the designers wanted to help expedite the boarding/off-boarding process but it also makes it very confusing for first-time users expecting to get on and off through the same doors. Furthermore, there are <strong>constant</strong> reminders to check in and out because if you forget to check in, you&rsquo;ll be fined, or if you check out <em>without</em> checking in, the next check-in will cost a lot more than you anticipated since it calculates fare from check in to check out.</p>

<p><strong>Oslo</strong></p>

<p>The Oslo T-Bane is well-designed for the Norwegians who love to ski and do activities. The metro cars are super-wide with plenty of leg/aisle space for skis and equipment. It even goes straight from the city center up into the forest to the ski area. We saw people literally skiing out the doors of the metro into the snow-covered forest.</p>

<p><strong>London</strong></p>

<p>The London Underground offers the easy-to-use Oyster card for checking in and out with pay-as-you-go discounts; it&rsquo;s accessible to tourists moreso than typical travel cards. Instead of the paper ticketing system, you just tap your card on the reader at the entrances and exits of the station. The route maps and overhead signage are also super clear about cardinal direction and major stops along a route. In the Victoria station (and elsewhere), lines run across the floor indicating the path to specific areas of the station (Tube, Gatwick Express, etc.).</p>

<p><strong>Paris</strong></p>

<p>The Paris metro is easy to navigate but not as easy as the London Underground. Unlike the LU, the Paris metro does not have cardinal directions or major stops in the overhead signage, so you need to inspect the route map closely if you can&rsquo;t remember the terminus you need.</p>

<p><a href="https://flic.kr/p/4G7FW4"><img src="https://cloud.githubusercontent.com/assets/563819/7750927/4b5cd15a-ffd7-11e4-82a9-f57c88beb2d3.jpg" alt="Paris metro ticket" /></a></p>

<p>Another difference is the ticketing. Most people use paper tickets, many of whose remains can be seen thrown on the ground and littered across the metro. Not only is the Oyster card more <em>convenient</em>, it&rsquo;s also friendlier to the environment.</p>

<p><a href="https://flic.kr/p/2yqxQ"><img src="https://cloud.githubusercontent.com/assets/563819/7750969/8e3b44ca-ffd7-11e4-9c7d-30e8110863ba.jpg" alt="Metro sign" /></a></p>

<p>There were some things I thought were better designed over the Underground.</p>

<p>One was that the outdoor signs for the Paris metro are easier to see. The Underground signs in London are flat when viewed from the side (so they don&rsquo;t stand out) but the Paris ones have a crazy looking gothic style, making them easier to see through the hustle and bustle of traffic and pedestrians. The Paris metro stops are also easier to stumble across because they go directly down into the ground versus London where station doors are on buildings. Furthermore, the Paris entrances are on both sides of the street whereas the Underground only has specific exits. Sometimes it depends on the stop but in most cases these hold true.</p>

<p>Another thing I liked was that the Paris metro has exit maps that show the local street map with the exits marked clearly so you can orient yourself as soon as you leave the train car. I did not use the Underground enough to see if they offered the same maps but we found the exits easy enough since they listed the attractions.</p>

<p>One more positive the Metro has is the exit signs are green with a little person running to the door. The Underground exit signs just say &ldquo;Way Out &ndash;>&rdquo; without any iconography. Even if you don&rsquo;t know French, a bright green exit sign with the image of a human running to a door is fairly clear, but if you don&rsquo;t know English would you understand the Underground signs?</p>

<p><strong>Trains</strong></p>

<p>Train travel is common in Europe and is operated primarily by SNCF in France. The train stations themselves are designed well, including one feature that was very notable: the presence of a piano. I mean it, every station we&rsquo;ve been in has featured a piano that <em>anyone</em> can play. I&rsquo;m not sure how that would go down in the US, but in France it appeared that only people who knew how to play piano used it and there&rsquo;s just something about waiting at the train station listening to the overture of Pirates of the Carribean or the thumping Game of Thrones theme that puts a smile on your face in a boring or stressful situation. The stations are well-designed to boot, with train diagrams indicating the coach numbers and platform.</p>

<p><img src="https://cloud.githubusercontent.com/assets/563819/7751150/c16f1fdc-ffd8-11e4-83f9-3cb4f01ff3e6.png" alt="Train diagram" /></p>

<h2>3. Designing for tourists is a lesson in tutorials and accessibility</h2>

<p>Did you ever stop to think that when you&rsquo;re a tourist, your experience is really <strong>designed</strong> by the city? Some cities do it well, others do it poorly or not at all. As soon as you arrive in a new city, you <em>might</em> be equipped with a LonelyPlanet guide but that&rsquo;s not enough to prepare you directly for what you experience. Even with a hefty amount of tips from us, our friends still were confused about the differences between the RER A, RER B, and Metro systems in Paris (not to mention the whole Zones 1-5 thing).</p>

<p><strong>Nantes, France</strong></p>

<p>One of the best examples of good tourism design I encountered was in Nantes, France. First, the tram stop is clearly marked and visible from the exit of the train station&mdash;this is not always the case everywhere. Second, throughout <strong>the entire city</strong> is a green painted line on the pavement, on the sidewalk, on the roads, everywhere. If you follow this line, you will be led to most, if not all, of the common tourist stops in Nantes. <strong>GENIUS</strong>. If you were lost, follow the green line back to a landmark. I can&rsquo;t imagine who convinced the city to do this but they should be applauded. Can you imagine someone suggesting painting a green line in NYC? Imagine the red (green?) tape you&rsquo;d wade through.</p>

<p>Along the route of the green line, there turned out to be another set of surprises. Do you recognize this character?</p>

<p><img src="https://cloud.githubusercontent.com/assets/563819/7751097/7f601966-ffd8-11e4-9e16-0f4ce60ee002.png" alt="Mario!" /></p>

<p>Him and his ilk were peppered throughout the city on the sides of buildings along the route of the green line turning our walks into a sort of scavenger hunt. So not only was the green line <em>helpful</em>, it made me want to follow it by discovering all the videogame characters&mdash;it was <strong>fun</strong>. In the end, I found about 10. I have no idea if the characters were intentionally put there by the city but whoever did it was a genius because it made me want to explore the city (and we did). I had to collect them all!</p>

<p>The other excellent piece of design we found in Nantes was this free eating guide, shown below.</p>

<p><img src="https://cloud.githubusercontent.com/assets/563819/7751330/97263818-ffd9-11e4-96a0-cfb416ac2d51.png" alt="Nantes eating guide" /></p>

<p>This was a well-designed guide to all the restaurants and cafes in Nantes. Unlike many other sources, including Foursquare and TripAdvisor, they provided the schedule of the restaurant along with a min/max dish price. It was fantastic for planning on where to go; it was like doing an Advanced Search in a book (&ldquo;OK, what has a price below 15 euros but is also an Editor&rsquo;s Choice and open on Mondays?&rdquo;), you could easily scan the book to answer that question. By the way, the answer is <a href="http://www.shalimar-restaurant-nantes.fr/">Shalimar</a>, a <strong>fantastic</strong> Indian/Pakistani bistro where I had superb beef madras.</p>

<p>Nobody is perfect though. The tram system in Nantes was super confusing at first because the kiosks <strong>did not</strong> explain the difference between the 2-3 types of network tickets you could get (&ldquo;Which one is the TRAM ticket, damn it?!&rdquo;). Instead it only had the <em>name</em> of the network (which did not include the words &ldquo;tram&rdquo; or &ldquo;lightrail&rdquo; or anything indicative of what kind of transport it was). Eventually we saw the network&rsquo;s logo on the tram and bought a ticket for that network (it&rsquo;s <em>Tan</em>, if you were wondering).</p>

<p><strong>Oslo&rsquo;s UseIt</strong></p>

<p>Oslo was another example of some great tourism design. Oslo is known for being one of the most expensive cities in the world and our experience backed that up (<strong>one</strong> small Chipotle-sized taco for $8, uhhhhh). So <em>our</em> primary motivation when visiting Oslo was to spend as little money as possible. Well, a local company called <a href="http://www.use-it.no/">UseIt</a> sources advice and tips from locals to provide a super handy guide to the city including things to do, cheap eats, and really cool walks (like the Art Walk) along with free maps. We found the guide in our Airbnb room but they had an office in the city center near the tourism office. They even let you store your luggage there and use the free Internet&mdash;two things that travelers might desperately need in an emergency or unplanned event. Kudos, UseIt team!</p>

<p><strong>Your app is a city</strong></p>

<p>Tourism design is essentially designing a tutorial or introduction to your city for newcomers. Now think of <strong>your app</strong> as a city. We <em>try</em> to design for FTU (first-time users) on apps and sites but often we leave it until they actually <em>join</em> or use a fancy new feature. We should be providing the information they need <em>immediately</em>, as soon as they arrive in our beautiful city whether by car or foot (&ldquo;Tourism Office &ndash;>&rdquo;) or by train, plane, or bus (free guides at the station!). Great tourism design gets the visitor familiar and provides the information they need to plan their visit and ideally, spend the <em>most</em> of their time (and money) actually <em>doing</em> things in your city. Sometimes visitors planned ahead, sometimes not, for others it might just be a quick stop on the way to another destination; whatever the motivation, make sure you&rsquo;ve given some thought about it.</p>

<p>The introduction starts as soon as people arrive, so take a look at the entrances to your site&mdash;do they give the visitor the information they need to navigate your beautiful city? Have you explained your 3 methods of transport? Or they do they leave frustrated and discontent, ready to move to the next city on their agenda?</p>

<h2>4. There are a lot of people in this world</h2>

<p>This might be a no-brainer, just like saying mobile is ubiquitous. But again, has the <em>magnitude</em> really hit you?</p>

<p>When I design I design English-first. This is all well and good for us native English speakers but when you&rsquo;re living in France, trying to use French-made apps like the local theater app, you curse the designer for not adding an English localization. But can you blame them?! They are just doing what we do, writing in their native tongue. It&rsquo;s the same everywhere. There are SO MANY local apps&mdash;there&rsquo;s RueCentrale for local restaurants, Cinema Aixois for local movies in Aix-en-Provence, there&rsquo;s Capitain Traine, Voyages SNCF, and Ouigo for planning train rides, PACA Mobilite for bus routes <em>solely</em> for southern France, and Marmiton, the AllRecipes of France. Apps are everywhere and you don&rsquo;t even know they exist until you&rsquo;re in the region they&rsquo;re used. On top of that, <em>most</em> of them are not localized. Just take a look at my France folder on my phone:</p>

<p><img src="https://cloud.githubusercontent.com/assets/563819/7751371/e1939666-ffd9-11e4-9d47-85f9f2372bff.png" alt="Phone folder" /></p>

<p>Don&rsquo;t even mention the <a href="http://sfr.fr">SFR</a> portal used to manage my phone and SIM, try learning simple tech terms like log in, log out, etc. in a non-native language. Thank the Lord for Google site translation.</p>

<p><img src="https://cloud.githubusercontent.com/assets/563819/7752401/876d3e70-ffdf-11e4-9e86-1f8fb01b2ce9.png" alt="SFR site" /></p>

<p>What about your apps? What about <em>my</em> apps? I usually don&rsquo;t even stop to think about how things differ between countries like dates (DD/MM/YYYY vs. MM/DD/YYYY), phone number formats (+33 01 02 03 45 06), time (24h vs. 12h format) or how an American living in France can&rsquo;t wrap their head around the metric system when trying to cook or bake. Kudos to AllRecipes for including an automated Metric conversion for recipes so we can use our measuring cups here.</p>

<p><img src="https://cloud.githubusercontent.com/assets/563819/7752589/98d08630-ffe0-11e4-9287-9f277df101c3.png" alt="AllRecipes" /></p>

<p>I don&rsquo;t even know what libraries to use for localizing/globalizing JavaScript apps because I haven&rsquo;t done it! <a href="https://github.com/jquery/globalize">I know they exist</a> but I haven&rsquo;t <em>used</em> any. I&rsquo;ve done localization before in C# (once in French, even) but that&rsquo;s the extent of most of my experience. Why is that? For one, it&rsquo;s just <strong>easier</strong> to write code with strings in English. Anytime you begin to introduce other formatting and cultures, things get more hairy. It shouldn&rsquo;t be that way. Another reason is simply because it&rsquo;s easy to just assume people will speak English but this is a bad assumption. We&rsquo;ve met a ton of French, Moroccans, and to a limited extent even Dutch who don&rsquo;t know any English and they&rsquo;re automatically excluded from using your apps simply due to their language. Even <strong>the English</strong> speak a different language than Americans. Some have jokingly commented that they can&rsquo;t understand us (well, I don&rsquo;t understand you, friends. <em>Bobbies</em>? Really?). We didn&rsquo;t get to travel to any Asian countries but I imagine it&rsquo;s the same everywhere or even more pronounced. <strong>Even</strong> if someone is fluent in English, we use idioms and slang they might not be familiar with. Take a second look at your copy on your apps. Would someone whose second language is English understand what you&rsquo;re even saying?</p>

<p>Living somewhere else for an extended period of time really makes you appreciate when a designer has thought about localization and globalization. We need to do better. <em>I</em> need to do better. The world is a big place and there are a <em>ton</em> of people in it&mdash;are you designing for everyone or just yourself?</p>

<h2>5. If you have the means, see the world</h2>

<p>Finally, get out of your comfort zone if you can. I&rsquo;ve learned a ton just by being a visitor, a tourist, to all these locations.</p>

<p>Make a goal to travel someplace away from your comfortable home sweet home. Maybe it&rsquo;s only a week or maybe, <strong>if</strong> you can do it, save up and take a sabbatical. We are lucky that we had a chance to do this and I understand not everyone can travel, especially for such an extended amount of time. You might have children, you might be in a different phase of life, you might be falling on hard times, there could be any number of things preventing you from traveling. If you have the means, try. At the least, just get out and tour your own city and observe the people in it! You might see things differently when you&rsquo;re the one trying to get around or sitting at a cafe watching people use technology.</p>

<p>After all, what are you working for, if not to better yourself and learn&mdash;living and experiencing new things is a sure way to grow. It has affected the way I think about design and I think it&rsquo;s important to observe things for yourself.</p>

<p>Challenge yourself. I didn&rsquo;t think I&rsquo;d be into going to Morocco but it was <strong>amazing</strong> and I&rsquo;d go back again. Using GPS to navigate the labyrinth of souks while being hassled by shop owners is definitely an experience you won&rsquo;t get anywhere else.</p>

<p><img src="https://cloud.githubusercontent.com/assets/563819/7751434/40bec6b0-ffda-11e4-89cb-1df305332f13.png" alt="Souks" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Use a Separate Chrome Profile to Manage Your Apps]]></title>
    <link href="http://kamranicus.com/blog/2015/05/21/chrome-multi-user/"/>
    <updated>2015-05-21T13:45:00+00:00</updated>
    <id>http://kamranicus.com/blog/2015/05/21/chrome-multi-user</id>
    <content type="html"><![CDATA[<p>If you&rsquo;re an app or site developer, you&rsquo;ve probably got a bunch of
tabs or bookmarks for your dashboards, social network accounts,
blog, and more. For <a href="http://keeptrackofmygames.com">Keep Track of My Games</a>,
I have UserVoice, Azure, RavenDB, social profiles, etc. that I
need to manage and track (haha).</p>

<!-- More -->


<p>It can be a chore to manage all of this easily but I have a tip.
A little while back Chrome <a href="https://support.google.com/chrome/answer/2364824?hl=en">introduced a new feature</a> that lets
you switch between multiple profiles super easily. I use it
for me and my wife, since she has a Google account and goes
to knitting sites and does whatever she likes doing&mdash;I don&rsquo;t want that filth in <em>my</em> Chrome instance! :)</p>

<p><img src="https://cloud.githubusercontent.com/assets/563819/7749041/784a45e2-ffca-11e4-8a5f-ce5d1c445d4e.png" alt="Chrome user switcher is in the corner" /></p>

<p>The user switcher is in the top-right of Chrome, shown above. You can single-click to bring up a modal or right-click to quickly switch.
Chrome profiles are kept separate, with their own settings, extensions,
and bookmarks. This keeps tabs and work separated neatly and creates a
so-called &ldquo;separation of concerns&rdquo; for your browsing.</p>

<p>Here&rsquo;s the rub: A full Chrome user is tied to a Google account. I don&rsquo;t want to create a separate Google account just for KTOMG.
The Google+, YouTube, email, etc. is all linked to my primary Google Account.
The issue is, Chrome will not let more than one
Google account exist on a single PC. So how can we take advantage of the profile separation but still
keep my primary Google account?</p>

<p>The answer is: we&rsquo;ll create a
<a href="https://support.google.com/chrome/answer/3463947">Supervised User Account</a>. Did you notice I said &ldquo;full user&rdquo; before?
A SUA is just a lower privilege profile (meant for children) that you can
control via your primary Google account. BUT, if you <strong>don&rsquo;t restrict anything</strong>,
it&rsquo;ll just be like a &ldquo;full&rdquo; profile!</p>

<p>We&rsquo;ll follow the instructions above in the Google help article:</p>

<ol>
<li>Under your Chrome profile, go to Settings</li>
<li>Scroll down to Users</li>
<li>Click &ldquo;Add User&rdquo; and enter your app&rsquo;s name and avatar for a picture</li>
<li>Click &ldquo;Control and view websites this person visits from [your Google account]&rdquo;</li>
</ol>


<p><img src="https://cloud.githubusercontent.com/assets/563819/7749183/8dd90398-ffcb-11e4-8f8a-095f4a2e4beb.png" alt="Supervised user" /></p>

<p>Now you&rsquo;ve made a &ldquo;supervised&rdquo; app account managed by your main Google one. Nice! You can set up all your tabs as you want, <del>extensions with any
specific accounts (TweetDeck)</del>, and pinned dashboard tabs, all within a separate context from your primary Chrome profile. <strong>Update:</strong> It appears, after I tried, that SUA&rsquo;s cannot use extensions. There&rsquo;s an <a href="https://code.google.com/p/chromium/issues/detail?id=354178">open issue</a> for it, so hopefully whitelist ability will be added soon.</p>

<p>For example, here&rsquo;s what <a href="http://keeptrackofmygames.com">Keep Track of My Games</a>
looks like in its own Chrome profile:</p>

<p><img src="https://cloud.githubusercontent.com/assets/563819/7749251/1de36eb0-ffcc-11e4-8be9-fa78b45a69da.png" alt="KTOMG profile" /></p>

<p>And the full experience:</p>

<p><img src="https://cloud.githubusercontent.com/assets/563819/7749724/e2d07ed6-ffcf-11e4-93cd-f307718c2c82.png" alt="KTOMG browser" /></p>

<p>When you&rsquo;re the only one managing a bunch of apps, this
is a real productivity booster. You could even go as far as
creating separate profiles for each environment, if you like. Hell, this doesn&rsquo;t have to be for apps, it could be for whatever browsing contexts you want to separate.</p>

<p>Just make sure you have enough RAM because Chrome will
suck it all up.</p>

<p><img src="https://cloud.githubusercontent.com/assets/563819/7749876/db3a810c-ffd0-11e4-8a35-5d96e41b874f.png" alt="Task manager" /></p>

<p>Dumb puny laptop.</p>

<p>Hope this helps! Happy managing.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Extending Knockout Observables to Sync With Address Bar]]></title>
    <link href="http://kamranicus.com/blog/2015/05/11/extending-knockout-with-urlsync/"/>
    <updated>2015-05-11T16:20:00+00:00</updated>
    <id>http://kamranicus.com/blog/2015/05/11/extending-knockout-with-urlsync</id>
    <content type="html"><![CDATA[<p>I made a tiny Knockout extender called <code>urlSync</code> that syncs an observable with the URL.</p>

<!-- More -->


<p>For <a href="http://keeptrackofmygames.com">Keep Track of My Games</a> I&rsquo;ve been adding filtering to the game library.
I&rsquo;m really proud of what I have, here&rsquo;s what it looks like in the UI:</p>

<p><img src="http://kamranicus.com/blog/images/2015-05-11-filtering.png" alt="Filtering UI" /></p>

<p>A modal allows the user to drill down and pick what filters to apply, the modal updates to show what filters are applied and what&rsquo;s available with the current resultset.</p>

<p><img src="http://kamranicus.com/blog/images/2015-05-11-filtering-modal.png" alt="Filtering Modal" /></p>

<p>When you&rsquo;re outside the modal, I show any filters being applied allowing one-click removal or toggling the filtering method between AND/OR.</p>

<p>To make it easy to serialize/deserialize filters, I created a custom filtering expression that is pretty standard around town:</p>

<pre><code>{facetName}:{facetValue},{facetValue},...|...
</code></pre>

<p>For example, representing the screenshot above, the filtering expression would be:</p>

<pre><code>Lists:6|Status:8|My+Platforms:1
</code></pre>

<p>If you muck with the expression, there shouldn&rsquo;t be any issues. Facets are validated against whatever the original unfiltered resultset is, so you cannot add arbitrary expressions&mdash;if you do, they will not show up in the server response. Strings are special because potentially they can include characters used to parse the expression, the simplest way to deal with it is by encoding them and then decoding the value.</p>

<pre><code>Tags:my%20awesome%2ctag,tag2|Status:4
</code></pre>

<p>Now, I wanted to talk about the filtering expression because it makes it really easy to do a bunch of things:</p>

<ol>
<li>Reading/writing from querystring or hash</li>
<li>Create a command textbox that can parse and autocomplete expressions</li>
<li>Allow the user to save &ldquo;views&rdquo; of their games</li>
</ol>


<p>Items 2 and 3 might be on the agenda for some later date but item 1 is required for being able to create pre-filtered routes or create links. Since the library is loaded through Knockout and Web API, we need to be able to pass any filter or parameters when the page is loaded and also keep track of what the current values are for filtering.</p>

<p>To achieve this, I created a really simple <a href="http://knockoutjs.com/documentation/extenders.html">Knockout Extender</a> called <strong>urlSync.</strong> All it does is initially load an observable from the hash (if found) or the querystring (if found). Then it observes the observable and keeps the <code>window.location.hash</code> updated.</p>

<p>This could easily be extended to use <a href="https://developer.mozilla.org/en-US/docs/Web/Guide/API/DOM/Manipulating_the_browser_history">HTML5 <code>pushState</code></a>, if you wished. For now, managing the hash is &ldquo;good enough&rdquo; for my use case.</p>

<p>Here is a Gist of the extender:</p>

<script src="https://gist.github.com/kamranayub/3feba45dd2da3262b872.js"></script>


<p>It depends on <a href="http://medialize.github.io/URI.js">URI.js</a> and the <a href="http://medialize.github.io/URI.js/docs.html#fragment-abuse">URI.fragmentQuery</a> component. It also uses <a href="http://underscorejs.org">Underscore.js</a>, but that&rsquo;s just because I have it in my project already.</p>

<p>It&rsquo;s really simple to use, for example here&rsquo;s a snippet from my collection view model:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>// Flattened facets
</span><span class='line'>ViewModel.facets = ko.observableArray([]);
</span><span class='line'>
</span><span class='line'>// Selected (applied) facets
</span><span class='line'>ViewModel.selectedFacets = ko.observableArray([]).extend({
</span><span class='line'>    urlSync: {
</span><span class='line'>      param: "filterBy",
</span><span class='line'>      read: function(value) {
</span><span class='line'>         return kt.utils.facetsFromString(value, ViewModel.facets);
</span><span class='line'>      },
</span><span class='line'>      write: kt.utils.facetsToString
</span><span class='line'>    }
</span><span class='line'>});
</span><span class='line'>
</span><span class='line'>// Filter AND toggle
</span><span class='line'>ViewModel.filterAnd = ko.observable(false).extend({ urlSync: "filterAnd" });</span></code></pre></td></tr></table></div></figure>


<p>As you can see, the extender allows you to intercept read/write so you can perform any custom transformations (e.g. filtering objects to/from string). Because we&rsquo;re deserializing from a string and because the <code>checkedValue</code> binding is by reference, I pass in the existing facets collection to my utility, in order to preserve object references when required. On initial page load, this isn&rsquo;t required as the games haven&rsquo;t been fetched from the API yet. Once they are, my fetch method updates the observables. I could also modify the way I handle binding the checkboxes but this works.</p>

<p>The <code>urlSync</code> extender will then bind the observable values to the URL like this:</p>

<pre><code>users/kamran.ayub/lists/all#?
    sortBy=Name&amp;
    filterAnd=true&amp;
    filterBy=Status%3A8%7CLists%3A6%7CMy+Platforms%3A1
</code></pre>

<p>Since the extender can also fallback to reading from the querystring, we can create URLs that filter a user&rsquo;s collection:</p>

<pre><code>users/somebody/lists/all?filterBy=Platforms:2,5,40
</code></pre>

<p>Pretty neat and now allows anyone to copy/paste the URL and preserve any needed filtering state!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[101 Ideas for the Microsoft HoloLens]]></title>
    <link href="http://kamranicus.com/blog/2015/04/30/101-ideas-for-the-microsoft-hololens/"/>
    <updated>2015-04-30T20:42:59+00:00</updated>
    <id>http://kamranicus.com/blog/2015/04/30/101-ideas-for-the-microsoft-hololens</id>
    <content type="html"><![CDATA[<p>HoloLens has the potential to change how we live, drastically.</p>

<!-- More -->


<p><a href="http://buildwindows.com/">Microsoft Build</a> is Microsoft&rsquo;s annual developer conference. I attended the conference in 2013 and 2014 for work and had a blast both times. This year I couldn&rsquo;t attend since we have been living in France (a good excuse) but I still wanted to catch the livestream of this year&rsquo;s keynote.</p>

<p>Since we were in Bordeaux during the keynote, I was watching the livestream while sipping on some cheap red wine (no worries, it was night and we were done for the day).</p>

<blockquote class="twitter-tweet" data-partner="tweetdeck"><p lang="en" dir="ltr">Sipping wine in <a href="https://twitter.com/hashtag/Bordeaux?src=hash">#Bordeaux</a> and getting ready to watch <a href="https://twitter.com/hashtag/Build2015?src=hash">#Build2015</a> <a href="https://twitter.com/hashtag/bldwin?src=hash">#bldwin</a> livestream in 20 mins. <a href="http://t.co/cRHfFcI284">pic.twitter.com/cRHfFcI284</a></p>&mdash; Kamran Ayub (@kamranayub) <a href="https://twitter.com/kamranayub/status/593432034137264128">April 29, 2015</a></blockquote>


<script async src="http://kamranicus.com//platform.twitter.com/widgets.js" charset="utf-8"></script>


<p>I was getting pretty excited as things progressed. <a href="http://code.visualstudio.com/">Visual Studio Code</a> was pretty awesome, <a href="http://winsupersite.com/windows-10/windows-10-will-introduce-web-apps-store">adding websites to the Windows Store</a> was pretty awesome (especially for <a href="http://keeptrackofmygames.com">Keep Track of My Games</a>), but more than any of that, the <a href="https://www.microsoft.com/microsoft-hololens/en-us">Microsoft HoloLens</a> announcement and demos <strong>blew my mind</strong>.</p>

<p>If you haven&rsquo;t seen the HoloLens demo from the keynote, it starts around 2:48:30:</p>

<iframe width="560" height="315" src="https://www.youtube.com/embed/W41AVOZpe7w?t=2h48m30s&amp;rel=0" frameborder="0" allowfullscreen></iframe>


<p>Is your mind sufficiently blown? Mine was too. It was <a href="http://en.wikipedia.org/wiki/Clarke%27s_three_laws">indistinguishable from magic</a> (as it <em>is</em> sufficiently advanced).</p>

<p>All at once, like a tidal wave unannounced, a whole slew of ideas ran through my head on what kinds of possibilities could be made possible with HoloLens. Some of them assume certain functionality or environment conditions are there, but there&rsquo;s no use dreaming if you can&rsquo;t dream a little bit ahead of the curve, right?</p>

<p>After the keynote, I was excited but we had to find a place to eat. We settled on Santosha, a local Thai place where all the young &ldquo;hip&rdquo; French people go. During dinner that night, Cassie and I discussed tons of cool uses for Lens and though my lovely wife isn&rsquo;t a developer nor a self-identified &ldquo;techie&rdquo;, I could see her excitement as she thought of things that would be cool and we both exchanged ideas.</p>

<p>I kept having ideas afterward too. Too many! As a mental excercise and to ensure the ideas go down somewhere, I decided I&rsquo;d write a post about it. So here goes: <strong>101 Ideas for the Microsoft HoloLens</strong>. Ideas are cheap, so I&rsquo;m sharing them. Probably, like many ideas, some of these are trash. Others are promising. Others probably are not possible with the current HoloLens technology. Still others may inspire <strong>you</strong> with an idea. Whatever came out of my head, I wrote it down and made no priority or judgement calls.</p>

<h2>The 101 Ideas</h2>

<p>These are not ordered in any specific order, except by stream of conciousness:</p>

<ol>
<li>Allow you to view your videogame character in 3D space and inspect them, or their inventories</li>
<li>Holographic UI to assist in playing a game</li>
<li>Instant board / table-top games with other people using HoloLens</li>
<li>Play virtual sports (real or fake, like Quidditch)</li>
<li>Geo-based holograph reality game (requires 4G/LTE HoloLens)</li>
<li>Insane horror game</li>
<li>Virtual legos/Minecraft in 3D space</li>
<li>Helping kids with autism with a &ldquo;social avatar buddy&rdquo;</li>
<li>To-do list (to-do&rsquo;s all over)</li>
<li>Cooking companion (visualize recipes)</li>
<li>Virtual decorations for your house (&ldquo;Decoration Store&rdquo;)</li>
<li>HoloLens restaurant</li>
<li>Visualize how to decorate your home (&ldquo;Oh the couch would look nice here&rdquo;)</li>
<li>Photos on the wall</li>
<li>Running apps &mdash; rendered zombies or whatever behind you</li>
<li>Inspecting your car (what is this? where is this?)</li>
<li>Car windshields equipped with holo display</li>
<li>HoloContacts &mdash; eventually HoloLens inside a contact lens</li>
<li>Virtual partner</li>
<li>Visualizing clothing or haircut</li>
<li>Google Earth/StreetView for low-cost travel</li>
<li>Wall-sized environments ala Hunger Games wall (forest, lakes, beach, etc.)</li>
<li>Reading a book to your kid (project pages in space/onto wall)</li>
<li>Virtual reading / bookshelf (reach out, take a virtual book, hold and read/flip pages)</li>
<li>Holo Sims game (lonely? get a roommate)</li>
<li>Cortana in person</li>
<li>Virtual window weather app&mdash;so the window reflects what it&rsquo;s like outside</li>
<li>Pin specific types of news stories</li>
<li>Fridge pinning</li>
<li>Virtual pinned calendar for easy planning</li>
<li>Pin your kids&#8217; projects on the fridge (teacher saves through Internet => home)</li>
<li>Rotating posters or /r/aww or awwpets.com on your wall</li>
<li>On your fridge, post what you eat/or say it and view it right there</li>
<li>Object recognition for food in fridge/pantry &mdash;> pantry app, &ldquo;Cortana, what do I need to make Beef Stroganoff?&rdquo;</li>
<li>Pin shows in Netflix near TV so I can tap and watch/resume</li>
<li>Portable screen for playing games (LAN parties anyone?)</li>
<li>Ceiling craziness (skyboxes, night sky)</li>
<li>Live holo concerts</li>
<li>Holo Videos &mdash; videos shot in 3D space (HoloTV, HoloTube, etc.)</li>
<li>New controllers for games</li>
<li>Controlling robots (demo&rsquo;d at keynote)</li>
<li>Holo UI for devices that have no physical UI</li>
<li>Level designer for games / engines (modders or artists or developers) &mdash; Unity: Holo Editor</li>
<li>AI pets</li>
<li>Home automation</li>
<li>Butler &mdash; think Barkley from <em>Modern Family</em> (thanks Cassie!)</li>
<li>Assisted seeing for people with some visual problems or the elderly</li>
<li>Private vs. Shared holographic experiences</li>
<li>Vehicle training</li>
<li>Inspection of literally anything that can be rendered in 3D</li>
<li>Skyrim IRL</li>
<li>&ldquo;Second Space&rdquo; for games</li>
<li>Virtual monitors / screens</li>
<li>Holo UI for phones</li>
<li>Collaboration apps &mdash; tech repair, construction, etc.</li>
<li>Physical tutorials or manuals for a device/object</li>
<li>Watch Dogs style meta information about the world</li>
<li>Museums (tours, virtual guides, audio, etc.)</li>
<li>&ldquo;Anywhere&rdquo; computer with mouse/keyboard (if even)</li>
<li>Modeling, painting, artwork, holo canvas</li>
<li>Holo GPS for walking/driving navigation</li>
<li>Restaurant Lens &mdash; imagine FourSquare laid on top of the world, as you see it</li>
<li>LARPing heaven</li>
<li>Virtual darts (or any other wall game)</li>
<li>Hiking/walking assist (trails)</li>
<li>Immersive livestreaming</li>
<li>Shared first-person experiences (travel, etc.)</li>
<li>Augmented TV (show interaction, show metadata, etc.)</li>
<li>ENHANCE (digital zoom / binoculars)</li>
<li>Home repair assist</li>
<li>Webcam/streams/Dropcam pinned to walls (Security Wall, near bed, etc.)</li>
<li>Night vision (infrared projection + spatial mapping)</li>
<li>Holo lyrics for the song you&rsquo;re listening to (or music video)</li>
<li>Virtual note-taking (take a photo, mark it up, store in notebook)</li>
<li>&ldquo;Copy/paste&rdquo; &mdash; see/map a physical object, clone it into a holograph</li>
<li>Map a physical object, create a game engine 3D mesh/model and texture</li>
<li>Classroom teaching (holo whiteboards, shared whiteboards, shared models, etc.)</li>
<li>Virtual Fighter (or Trainer)</li>
<li>Exercise examples</li>
<li>FitBit/Band + HoloLens = Virtual Holo Data</li>
<li>Virtual bowling</li>
<li>Tattoo design/preview</li>
<li>In-store augmentation &mdash; &ldquo;Target: Where&rsquo;s scissors?&rdquo;, shows a holo GPS navigation in the store</li>
<li>3D/Holo Snapchat &mdash; &ldquo;Help me Obi Wan Kenobi&rdquo;</li>
<li>Holo Celebrities &mdash; &ldquo;Is that James Franco sitting on your couch?&rdquo;</li>
<li>Holo music making (holo guitar, holo drums, etc.)</li>
<li>Anatomy / surgery training for doctors, nurses</li>
<li>Simulations &mdash; physics, games, etc.</li>
<li>Countdown app</li>
<li>Social feed (birthdays, events, etc.) &mdash; pin specific people</li>
<li>Facial recognition &mdash; infinite uses</li>
<li>Shared workspace notes/etc</li>
<li>Holo Coupons &mdash; only people using HoloLens would see promos in-store</li>
<li>Virtual graffiti</li>
<li>City/&ldquo;Space&rdquo; augmentation &mdash; infinite uses, tourism guides, GPS/location based, augment builings, signs, indoor augmentation, etc.</li>
<li>Metro/transit augmentation &mdash; real-time GPS info, visualize upcoming stops, route, etc.</li>
<li>Sex-ed (<em>shudders</em>)</li>
<li>Augmented physical books</li>
<li>Gardening (reminder for watering, seasons, plant timeframes, etc.)</li>
<li> Knitting counter (keeps track of your stitches)</li>
<li> Pet augmentation (when last fed, last walked, any other tracking data for your pet)</li>
</ol>


<p>And so on and so forth.</p>

<h2>I want a HoloLens</h2>

<p>Basically if you can&rsquo;t tell, I would like to be wearing HoloLens <strong>all the time</strong> (in fact, for many of these ideas, you&rsquo;d have to for them to be practical).</p>

<p>There are literally infinite uses for this technology, as virtual space is infinite, the Earth is a large place and we do a lot of things we need help with. I find HoloLens even more compelling than the Oculus Rift because HoloLens doesn&rsquo;t [necessarily] replace the world; it just augments it&mdash;which makes it much more manageable to be wearing all the time.</p>

<p>Let&rsquo;s say in 10-20 years, the technology progresses enough that it can be miniaturized in a contact lens or even glasses (with your prescription). We&rsquo;d all be equipped with a Lens and we&rsquo;d all have shared/private holograph experiences. Would that ever happen? Glasses seems doable. If it&rsquo;s as easy as what I do with my current prescription glasses and it&rsquo;s fashionable, I&rsquo;m sold. As for everyone having one? There are more phones than people in this world and that&rsquo;s happened relatively fast (for humans). Anything is possible. All you need is a killer app.</p>

<h2>Have your own ideas?</h2>

<p>Make a list and share it below (or link to your blog).</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Triggering a Travis Build Programmatically]]></title>
    <link href="http://kamranicus.com/blog/2015/03/29/triggering-a-travis-build-programmatically/"/>
    <updated>2015-03-29T22:45:30+00:00</updated>
    <id>http://kamranicus.com/blog/2015/03/29/triggering-a-travis-build-programmatically</id>
    <content type="html"><![CDATA[<p>For <a href="http://excaliburjs.com">Exalibur.js</a> we wanted to be able to keep our <code>master</code> branch documentation up-to-date on the website. The website is built using <a href="http://assemble.io">Assemble.io</a> and GitHub pages and <a href="http://kamranicus.com/blog/2015/02/26/continuous-deployment-with-travis-ci/">after successfully automating my blog</a>, naturally I turned to <a href="http://travis-ci.org">Travis CI</a> to set up automated documentation generation.</p>

<!-- More -->


<p>Travis normally sets up a hook in your GitHub repository to automatically trigger a build after you push a commit (or pull request). This is real nice but unfortunately that&rsquo;s where it stops. If you want to trigger a build <strong>for another repository</strong>, you have to do it manually.</p>

<p>I asked Travis about this and their response is promising (Twitter can be nice sometimes):</p>

<blockquote class="twitter-tweet" data-partner="tweetdeck"><p><a href="https://twitter.com/kamranayub">@kamranayub</a> it&#39;s on the roadmap, and hopefully landing soon &lt;3</p>&mdash; Travis CI (@travisci) <a href="https://twitter.com/travisci/status/582311038772723713">March 29, 2015</a></blockquote>


<script async src="http://kamranicus.com//platform.twitter.com/widgets.js" charset="utf-8"></script>


<p>Until that time, though, something has to be done.</p>

<p>One approach I saw was a <a href="https://github.com/metaodi/travis-ping">small Ruby script</a> to forge a webhook POST message. This is actually a nice idea but since Excalibur uses Node to build, I needed something else and didn&rsquo;t want to port it over.</p>

<p>Instead I borrowed some code from <a href="https://github.com/patrickkettner/travis-ping">@patrickketner</a> that uses the <a href="https://github.com/pwmckenna/node-travis-ci">node-travis-ci</a> npm package to submit a build through the public API. I modified Patrick&rsquo;s code since I need to use GitHub personal access tokens like I did <a href="http://kamranicus.com/blog/2015/02/26/continuous-deployment-with-travis-ci/">previously</a>.</p>

<p>You still need to follow the same steps to set up the <code>GH_TOKEN</code> environment variable but once you do, all you have to do is execute this Node.js script (changing the <code>repo</code>).</p>

<script src="https://gist.github.com/kamranayub/88f963a9ac3d5bf6114d.js"></script>


<p>So for example, in your <code>.travis.yml</code> file, you just need:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>install:
</span><span class='line'>  - npm install travis-ci
</span><span class='line'>after_success:
</span><span class='line'>  - node trigger-build.js</span></code></pre></td></tr></table></div></figure>


<p>All set. Now when you commit to one repository, you can trigger a build for another one. This allows us to automatically <a href="http://excaliburjs.com/docs/api/edge">keep our docs up-to-date</a> with whatever <code>master</code> has.</p>

<p>You can <a href="https://github.com/excaliburjs/Excalibur/blob/master/deploy-docs.js">reference Excalibur</a> to see how we execute the script. Additionally, you can reference <a href="https://github.com/excaliburjs/excaliburjs.github.io/blob/site/.travis.yml">excaliburjs.com&rsquo;s Travis configuration</a> to see how we use <a href="http://typedoc.io">TypeDoc</a> to generate documentation for the latest version of <code>master</code>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Continuous Deployment With Travis-CI]]></title>
    <link href="http://kamranicus.com/blog/2015/02/26/continuous-deployment-with-travis-ci/"/>
    <updated>2015-02-26T16:18:22+00:00</updated>
    <id>http://kamranicus.com/blog/2015/02/26/continuous-deployment-with-travis-ci</id>
    <content type="html"><![CDATA[<p>One of the fun things we did for <a href="http://playsweepstacks.com">Sweep Stacks</a> (our Ludum Dare entry)
during development was to setup continuous deployment. Since our GitHub
repository was public, we could leverage the excellent Travis CI build tool.</p>

<!-- More -->


<p>This allowed us to work on the game and have our dedicated tester play every new build
hot off the press. It reduced the amount of bugs we shipped with and created a very
fast feedback loop for QA. In the end it allowed us to push a polished game an hour
or so before the deadline hit. After the voting began, it also allowed us to quickly
push bug fixes that were reported by players.</p>

<p>If you&rsquo;re new to Travis CI, you can learn more about what it is and
how to get started by reading <a href="http://tech.pro/tutorial/1749/get-your-ci-on-with-travis-ci">my Tech.pro tutorial</a>.</p>

<p>Once you have your project building, you can then write a little bash script to
deploy it! By &ldquo;deploying&rdquo;, what I really mean is pushing your built code to your production branch on GitHub for final deployment. For example, we use GitHub pages to host Sweep Stacks.</p>

<p>Let&rsquo;s look at the process.</p>

<h2>Customizing Travis Config</h2>

<p>You will need to execute a script to deploy your site, so you will need to
customize your <strong>_travis.yml</strong> file.</p>

<p>Here is what mine looks like for this blog (built using Octopress):</p>

<pre><code>language: ruby
rvm:
  - 1.9.3
branches:
  only:
    - source
env:
  global:
  - GH_REF: github.com/kamranayub/kamranayub.github.io.git
script:
  - bundle exec rake generate
  - chmod ugo+x deploy.sh
  - '[ "${TRAVIS_PULL_REQUEST}" != "false" ] || ./deploy.sh'
</code></pre>

<p>Let&rsquo;s break it down:</p>

<pre><code>language: ruby
</code></pre>

<p>Easy, since I use <a href="http://octopress.org">Octopress</a> (built on Jekyll) for my blog, we need to use Ruby.</p>

<pre><code>rvm:
  - 1.9.3
</code></pre>

<p>The version of Octopress I use requires Ruby 1.9.3.</p>

<pre><code>branches:
  only:
    - source
</code></pre>

<p>We only want Travis to initiate builds for the <code>source</code> branch, since that is where
the source files are for my blog.</p>

<pre><code>env:
  global:
  - GH_REF: github.com/kamranayub/kamranayub.github.io.git
</code></pre>

<p>We will need to be able to clone and push to our repository, so we store it in an
environment variable for easy access. <code>GH_REF</code> will be available to our bash script.</p>

<pre><code>script:
  - bundle exec rake generate
  - chmod ugo+x deploy.sh
  - '[ "${TRAVIS_PULL_REQUEST}" != "false" ] || ./deploy.sh''
</code></pre>

<p>In our Travis script, we build the blog (<code>rake generate</code>). We then mark our <code>deploy.sh</code> file
as executable (since I&rsquo;m on Windows). After that we execute our deploy as long as this isn&rsquo;t
a pull request (don&rsquo;t want to build other people&rsquo;s changes!). Disabling pull request builds
can also be set in your Travis project settings.</p>

<h2>Deploy script</h2>

<p>Here&rsquo;s the script I use to do the deployment:</p>

<script src="https://gist.github.com/kamranayub/ca7b6866ab43771d9da8.js"></script>


<p>As you can see it&rsquo;s fairly simple. One thing to make sure of is hiding your access token (<code>GH_TOKEN</code>),
we use to authenticate which I&rsquo;ll show you how to generate and use.</p>

<h2>The access token</h2>

<p>The whole reason this works is because we are authenticating to GitHub using a <em>Personal
Access Token</em> (stored in <code>GH_TOKEN</code>). This is an OAuth token that you can create when
using Two-Factor Auth to authenticate 3rd party tools like Visual Studio, or in our case, authenticating in a script.</p>

<p>You can generate a token by:</p>

<ol>
<li>Going to <a href="https://github.com/settings/applications">Applications</a> in your Settings</li>
<li>Clicking &ldquo;Generate New Token&rdquo;</li>
<li>Selecting your permissions (for Travis, all you need is <code>public_repo</code>)</li>
<li>Once created, copy the token to your clipboard (you <em>must</em> regenerate it if you lose it)</li>
</ol>


<p>Now we need to configure Travis to expose this token securely to our script.</p>

<ol>
<li>On Travis, go to the Settings of your project (top-right)</li>
<li>Click the &ldquo;Environment Variables&rdquo; tab (and ensure Build Pull Requests is &lsquo;Off&rsquo;)</li>
<li>Create a new environment variable called <code>GH_TOKEN</code></li>
<li>In the Value field, paste in your token, being sure to remove any trailing whitespace</li>
<li>Ensure &ldquo;Display value in build logs&rdquo; is Off</li>
</ol>


<p>Once created, you&rsquo;re all set! <code>GH_TOKEN</code> will now be available to your <strong>deploy.sh</strong> script.</p>

<h2>Testing it out</h2>

<p>You should be ready to test your deployment. Commit any changes you have to your repository
and you should start seeing the build output once it starts. If there are any errors, now
you can fix them until your build passes.</p>

<p>Happy deploying!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Just Released the New Keep Track of My Games Beta]]></title>
    <link href="http://kamranicus.com/blog/2014/11/04/just-released-the-new-keep-track-of-my-games-beta/"/>
    <updated>2014-11-04T00:16:03+00:00</updated>
    <id>http://kamranicus.com/blog/2014/11/04/just-released-the-new-keep-track-of-my-games-beta</id>
    <content type="html"><![CDATA[<p><img src="http://kamranicus.com/blog/images/2014-11-03-ktomg.png" alt="Keep Track of My Games" /></p>

<p>This last weekend I finally released <a href="http://keeptrackofmygames.com">the beta version</a> of the new Keep Track of My Games site. It&rsquo;s been a long time coming but now it actually lets you keep track of your games. The original site only let you track new games and the new version still offers notifications but now you can organize and tag your collection to track games you&rsquo;ve played or haven&rsquo;t played yet (backlog) or new games.</p>

<p>Over the next few months, I want to add social features and more syncing capabilities to services like Steam, Xbox, and PSN. I also want to add deal notifications for any game in your wishlist.</p>

<p>If you use the site, <a href="http://ktomg.uservoice.com">let me know what you think</a> or vote up ideas on the roadmap!</p>
]]></content>
  </entry>
  
</feed>
