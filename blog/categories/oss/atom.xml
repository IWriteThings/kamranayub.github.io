<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: OSS | Kamranicus]]></title>
  <link href="http://kamranicus.com/blog/categories/oss/atom.xml" rel="self"/>
  <link href="http://kamranicus.com/"/>
  <updated>2016-08-17T01:42:05+00:00</updated>
  <id>http://kamranicus.com/</id>
  <author>
    <name><![CDATA[Kamran]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Extending PowerShell Pester With Custom Assertions]]></title>
    <link href="http://kamranicus.com/blog/2016/08/17/posh-pester-extend-custom-assertions/"/>
    <updated>2016-08-17T02:10:00+00:00</updated>
    <id>http://kamranicus.com/blog/2016/08/17/posh-pester-extend-custom-assertions</id>
    <content type="html"><![CDATA[<p>After the initial release of <a href="http://kamranicus.com/blog/2016/08/12/posh-openweathermap-powershell-module/">my OpenWeatherMap PowerShell module</a> I decided it might be a good idea to write some tests. This was my first time using <a href="https://github.com/pester/Pester">Pester</a>, a BDD-style testing framework for PowerShell. Coming from <a href="http://jasmine.github.io/">Jasmine</a> Javascript unit testing, I felt right at home.</p>

<!-- More -->


<p>Now because my module deals a lot with dates, I wanted to use an assertion that simplified some of the logic of testing a date. For example, this is what it looks like validating a DateTime:</p>

<p>```powershell
$Result.Time.Year   | Should Be 2015
$Result.Time.Month  | Should Be 8
$Result.Time.Day    | Should Be 15</p>

<p>$Result.Time.Hour   | Should Be 13
$Result.Time.Minute | Should Be 56
$Result.Time.Second | Should Be 32
```</p>

<p>The other way would be to compare formatted date strings:</p>

<p><code>powershell
$Result.Time.ToString("MM/dd/yyyy HH:mm:ss") | Should Be "08/15/2015 13:56:32"
</code></p>

<p>Which is fine. However, using it as a learning opportunity, I wanted to write my own assertion for Pester, <code>BeDate</code> so I could do:</p>

<p><code>powershell
$Result.Time | Should BeDate "08/15/2015 13:56:32"
</code></p>

<p>In C# using NUnit or MSTest, writing custom assertions is pretty straightforward. However, Pester essentially uses a convention where it loads up commands in its module starting with <code>Pester</code> and also having a couple failure message handlers.</p>

<p>So, for example, our <code>BeDate</code> assertion is defined as:</p>

<p>```powershell
Function PesterBeDate($Value, $Expected) {</p>

<pre><code>$Expected = [System.DateTime]::Parse($Expected)

$Value.Year   | Should Be $Expected.Year
$Value.Month  | Should Be $Expected.Month
$Value.Day    | Should Be $Expected.Day

$Value.Hour   | Should Be $Expected.Hour
$Value.Minute | Should Be $Expected.Minute
$Value.Second | Should Be $Expected.Second
</code></pre>

<p>}</p>

<p>Function PesterBeDateFailureMessage($Value, $Expected) {</p>

<pre><code>if (-not (($expected -is [string]) -and ($value -is [System.DateTime])))
{
    return "Expected: {$expected}`nBut was:  {$value}"
}

return "Expected: $Expected\nBut was: $($Value.ToString('MM/dd/YYYY h:mm:ss'))"
</code></pre>

<p>}</p>

<p>Function NotPesterBeDateFailureMessage($Value, $Expected) {</p>

<pre><code>return PesterBeDateFailureMessage -Value $Value -Expected $Expected
</code></pre>

<p>}
```</p>

<p>Now, I don&rsquo;t actually think my <code>PesterBeDateFailureMessage</code> cmdlet ever runs because I&rsquo;m using the basic <code>Be</code> assertion but whatever&mdash;this is the convention.</p>

<p>So, how we do we get Pester to see these functions? Well, like I said, it searches for the assertions <strong>in the scope of the module</strong>. That means if I define these in my own file, it won&rsquo;t see them.</p>

<h2>Defining functions inside a module&rsquo;s scope</h2>

<p>We can use a weird PowerShell &ldquo;hack&rdquo; to actually declare these functions <em>inside the scope of the Pester module</em> if we want.</p>

<p>```powershell
$pesterModule = Import-Module Pester -PassThru</p>

<p>. $pesterModule {</p>

<pre><code>function PesterBeDate { }
# etc
</code></pre>

<p>}
```</p>

<p>This is what Dave Wyatt suggested <a href="https://github.com/pester/Pester/issues/590#issuecomment-239977094">when I asked about it</a>. Cool, we <strong>could</strong> do that but I would prefer if we could keep my custom assertions separated from my tests since I&rsquo;d have to include this in my <strong>.Tests.ps1</strong> files.</p>

<h2>Using local modules and extending Pester</h2>

<p>The  implication the previous solution has is that the caller (user) has Pester installed globally. Over the years, as a programming community we decided that&rsquo;s a sub-optimal outlook on life hence we have package managers like Nuget and NPM. To my knowledge, there&rsquo;s not yet a <code>package.json</code> equivalent to a PowerShell &ldquo;project&rdquo; besides the Module Manifest (psd1). Ideally, I would be able to type <code>Install-Module</code> in the current directory, PowerShellGet would identify the dependencies (perhaps from psd1 manifest?), and download them. Alas, it doesn&rsquo;t so we can do it ourselves.</p>

<p>To achieve maximum contributability (is that a word?) I decided to roll my own little build script that would bring down the Pester module locally to the project and then extend Pester&rsquo;s assertions by manually copying in my own code.</p>

<p>This only takes a few lines of Powershell:</p>

<p>```powershell
$PesterVersion = &lsquo;3.4.2&rsquo;</p>

<h1>Save-module locally</h1>

<p>Save-Module -Name Pester -Path &lsquo;.modules\&rsquo; -RequiredVersion $PesterVersion</p>

<h1>Copy custom assertions</h1>

<p>Copy-Item -Path &lsquo;.\Assertions*.ps1&rsquo; -Destination &ldquo;..modules\Pester\$PesterVersion\Functions\Assertions&rdquo;</p>

<h1>Import local Pester module so we can extend built-in assertions</h1>

<p>Import-Module &ldquo;..modules\Pester\$PesterVersion\Pester.psd1&rdquo;</p>

<h1>Run tests</h1>

<p>Invoke-Pester -Script &ldquo;.\OpenWeatherMap.Tests.ps1&rdquo;
```</p>

<p>So this is fairly straightforward:</p>

<ol>
<li>Use <code>Save-Module</code> cmdlet to unzip and copy the Pester module locally to a <strong>.modules</strong> folder that we&rsquo;ll exclude from source control</li>
<li>Copy my <code>*.ps1</code> assertion files under <em>*Assertions*</em> to the local Pester assertions directory</li>
<li>Import the local Pester module explicitly (this will load our new assertions)</li>
<li>Invoke Pester on our test script (if you don&rsquo;t qualify it, it will run all the tests in the Pester module also!)</li>
</ol>


<p>Now we achieve both desired effects:</p>

<ol>
<li>Our repository is now self-contained and can be contributed to without any global dependencies (besides PowerShell 5)</li>
<li>We can keep our custom assertions separated</li>
</ol>


<p>If you want to see the final product, <a href="https://github.com/kamranayub/posh-openweathermap">give my OpenWeatherMap module a gander</a>!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[OpenWeatherMap PowerShell Module]]></title>
    <link href="http://kamranicus.com/blog/2016/08/12/posh-openweathermap-powershell-module/"/>
    <updated>2016-08-12T00:15:00+00:00</updated>
    <id>http://kamranicus.com/blog/2016/08/12/posh-openweathermap-powershell-module</id>
    <content type="html"><![CDATA[<p>There&rsquo;s no better to way to learn something new than to make a thing. Yesterday I had a strong desire to know what the weather was like from my command prompt. I can&rsquo;t explain it&mdash;I just had to and I thought, &ldquo;Hey, it can&rsquo;t be that bad, right?&rdquo; I decided to try writing and releasing an open-source PowerShell module.</p>

<!-- More -->


<p>It turned out to be very easy, in fact. There&rsquo;s an awesome project called <a href="http://openweathermap.org">OpenWeatherMap</a> where you can sign up for a free API key and go to town on their open data API&mdash;limited to 60 calls a minute which isn&rsquo;t a problem for my pet project.</p>

<p>So, what happens when you combine PowerShell and an open weather API? Weather in your command prompt!</p>

<p><img src="https://cloud.githubusercontent.com/assets/563819/17608181/4a908116-5ff0-11e6-8bb2-396c8f5a998e.png" alt="Weather" /></p>

<p>I&rsquo;ve <a href="https://github.com/kamranayub/posh-openweathermap/">released the module on GitHub</a> and the <a href="http://www.powershellgallery.com/packages/OpenWeatherMap/">PowerShell Gallery</a> for your enjoyment. I&rsquo;ve already added weather symbols (Unicode is cool) and I&rsquo;m adding friendly forecasting next.</p>

<p>You can set up your PowerShell profile to get the weather each time you boot your prompt, <a href="https://github.com/kamranayub/posh-openweathermap/blob/master/profile.example.ps1">following the example on GitHub</a>.</p>

<p>This also sets up an alias for <code>weather</code> so you can ad-hoc get the weather too:</p>

<p><img src="https://cloud.githubusercontent.com/assets/563819/17608247/ba82117e-5ff0-11e6-92c3-b06e7216feb3.png" alt="weather command" /></p>

<p>I plan to add the ability to get a quick forecast, so you can know what to plan for the next morning before you get into work! There&rsquo;s probably more neat stuff we can do with coloring the weather conditions but maybe you want to open a PR then?</p>

<p>One interesting thing I noticed was that the Windows Command Prompt (and PowerShell) does not support some Unicode characters. For example, you can probably see this:</p>

<pre><code>â›±
</code></pre>

<p>But if you try pasting that into command prompt you&rsquo;ll see:</p>

<p><img src="https://cloud.githubusercontent.com/assets/563819/17608313/4e4c8b3c-5ff1-11e6-9300-200bc4604a39.png" alt="no symbols" /></p>

<p>So that was a little disappointing&mdash;it meant I had to stick to the Unicode symbols that worked in the prompt, which is still a good amount but not as a granular as it could potentially be.</p>

<p>I am not sure why Windows doesn&rsquo;t support those characters but maybe in a future Windows 10 update they&rsquo;ll add support!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Adding Subresource Integrity Support to Cassette .NET]]></title>
    <link href="http://kamranicus.com/blog/2016/05/08/cassette-subresource-integrity-sri/"/>
    <updated>2016-05-08T05:13:00+00:00</updated>
    <id>http://kamranicus.com/blog/2016/05/08/cassette-subresource-integrity-sri</id>
    <content type="html"><![CDATA[<p>If you aren&rsquo;t familiar with <a href="https://developer.mozilla.org/en-US/docs/Web/Security/Subresource_Integrity">Subresource Integrity</a>, it&rsquo;s a browser-based security measure to protect embedded content like scripts and stylesheets using a file content hash to help protect against XSS attacks.</p>

<p>For example, let&rsquo;s say you&rsquo;re including a script from a CDN:</p>

<pre><code>&lt;script src="https://mycdn.com/jquery/1.0/jquery.js"&gt;&lt;/script&gt;
</code></pre>

<p>Then let&rsquo;s say the CDN is compromised and instead of returning jquery, the script returns some malicious code that could compromise your site. Even if you&rsquo;re using Content Security Policy (CSP), you won&rsquo;t be protected because you whitelisted the CDN.</p>

<p>Subresource Integrity allows you to put a hash of the file&rsquo;s contents in an attribute of the tag. The browser will then hash the contents of the response from the CDN and compare it against the attribute provided. If the hashes don&rsquo;t match, the browser won&rsquo;t include the response and will throw an error.</p>

<pre><code>&lt;script src="https://mycdn.com/jquery/1.0/jquery.js" integrity="sha256-hfhsh02929fhgh303yg"&gt;&lt;/script&gt;
</code></pre>

<h2>Integrating with Cassette</h2>

<p>I use <a href="http://getcassette.net">Cassette</a> to perform my bundling/minification and I also <a href="http://kamranicus.com/blog/2015/10/10/azure-cdn-cassette/">host my assets on a CDN</a>. Even though they are my own assets, I still want to ensure they are served securely and take advantage of SRI.</p>

<p>For third-party scripts, it is fairly easy to take advantage of SRI by <a href="https://srihash.org/">hashing the contents online</a> and customizing the CDN reference in Cassette:</p>

<pre><code>bundles.AddUrl("http://mycdn.com/jquery/1.0/jquery.js", bundle =&gt;
    bundle.HtmlAttributes.Add("integrity", "sha256-jquerysfilehash"));
</code></pre>

<p>But since my <em>own</em> files are dynamic, how can we still leverage Cassette <em>and</em> automatically hash the file contents when outputting to the page?</p>

<p>Luckily, Cassette is pretty extensible and includes a way to <a href="http://getcassette.net/documentation/v2/bundle-pipelines">customize the bundle pipeline</a>. So what we can do is essentially override the rendering of the HTML and add the <code>integrity</code> tag to the output.</p>

<p>To make this easy, I&rsquo;ve created an open source Nuget package called <a href="https://github.com/kamranayub/cassette-sri">Cassette.SubresourceIntegrity</a>. All you do is install the package and <strong>that&rsquo;s it.</strong> Since Cassette automatically scans for bundle customizations, all I did was implement a class <code>InsertIntoPipelineSubresourceIntegrity</code> and modify the pipeline to replace a couple parts with SRI-aware code.</p>

<p>The meat of the change is this code here:</p>

<pre><code>string integrity;

using (var stream = asset.OpenStream())
{
    using (var sha256 = SHA256.Create())
    {
        integrity = $"integrity=\"sha256-{Convert.ToBase64String(sha256.ComputeHash(stream))}\"";
    }
}

return $"&lt;script src=\"{_urlGenerator.CreateAssetUrl(asset)}\" " +
       $"type=\"text/javascript\" " +
       $"{integrity}{bundle.HtmlAttributes.ToAttributeString()}&gt;&lt;/script&gt;";
</code></pre>

<p>I am just getting the asset stream and hashing the contents using SHA256, then adding the attribute to the output. You&rsquo;ll notice that the <strong>URLs are not changed</strong>, so Cassette will continue to use SHA1 hashes internally. It&rsquo;s <em>only when rendering</em> we use SHA256 because that&rsquo;s the only place we need it.</p>

<p>While the code is interesting, it&rsquo;s nothing too crazy&mdash;in fact, most of the code required is because Cassette doesn&rsquo;t expose certain needed classes used in the rendering pipeline so I had to basically copy/paste a lot of the helper classes.</p>

<h2>The end result</h2>

<p>Now Cassette will automatically include SRI hashes for individual assets:</p>

<pre><code>&lt;link href="cassette.axd/asset/Content/bootstrap/bootstrap-ext.css?cabc6264a89106c4b9021c293cfa5c2cae7a0549" 
    integrity="sha256-sNfA6O5zvZPmMJ474pm2w6UyZbz5tfukxTEZXrsLm7Q=" type="text/css" rel="stylesheet"/&gt;
&lt;link href="cassette.axd/asset/Content/modules/typeahead.css?00581b47ff3848da273d91c31adb8270e9ef8707" 
    integrity="sha256-W6JAiwRw2ER1QoXjXL/YxsY/On1Y7MhW4TtoWY0XuH8=" type="text/css" rel="stylesheet"/&gt;
&lt;link href="cassette.axd/asset/Content/modules/toastr.css?32e90a136e05728ac23995ff8fe33077df9f50ca" 
    integrity="sha256-JT6UwDlczdRDx+9mnMCzvxwABJP0cSDgNLmT+WumJrQ=" type="text/css" rel="stylesheet"/&gt;
&lt;link href="cassette.axd/asset/Content/hopscotch/hopscotch.css?58ea04e54df958c33cf9e6bfed9f39a166354e9c" 
    integrity="sha256-Bq06LI6L0XMhxF+CoJo+4L12w2Orsbh2oRjOZ+fpmWc=" type="text/css" rel="stylesheet"/&gt;
&lt;link href="cassette.axd/asset/Content/core.css?a3b4fcb8b7d9b0e8465a4fea29d60247ea47fd87" 
    integrity="sha256-fAqyFLkOx1cFONu7NXX3c7/G1DSmXeHgtPtcWU72a4E=" type="text/css" rel="stylesheet"/&gt;
&lt;link href="cassette.axd/asset/Content/library.css?2c2746a086737dc588e313c0cc2c5adf8b947605" 
    integrity="sha256-SaP9kdYfbafIVes+qntAiDLPsi4JaXnit4eN6IfU9lA=" type="text/css" rel="stylesheet"/&gt;
</code></pre>

<p><em>and</em> bundles:</p>

<pre><code>&lt;link href="cassette.axd/stylesheet/ba58f2a04873e41b6a599274ea6768db1a61a650/Content/core" 
    integrity="sha256-thzkrIApz9dAI9nfJGleO1jbNFXXVT/BxoSynI2pEPw=" type="text/css" rel="stylesheet"/&gt;
&lt;link href="cassette.axd/stylesheet/2c2746a086737dc588e313c0cc2c5adf8b947605/Content/library.css" 
    integrity="sha256-6LgYbxu4UwouRBqvUdHZAQc0lewdik6aZYpDgrtAWJ4=" type="text/css" rel="stylesheet"/&gt;
</code></pre>

<p>Voila!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Knockout.js Binding Report for Performance Tuning]]></title>
    <link href="http://kamranicus.com/blog/2015/05/25/knockout-binding-report/"/>
    <updated>2015-05-25T10:30:00+00:00</updated>
    <id>http://kamranicus.com/blog/2015/05/25/knockout-binding-report</id>
    <content type="html"><![CDATA[<p>I use a lot of <a href="http://knockoutjs.com">Knockout.js</a> on <a href="http://keeptrackofmygames.com">Keep Track of My Games</a>. I love Knockout but sometimes it makes it difficult to understand what&rsquo;s slowing my page down.</p>

<!-- More -->


<p>For the game list, there&rsquo;s a lot of binding going on because I have to bind not only the list of games but also the toolbar.</p>

<p><img src="http://41.media.tumblr.com/fefa8f95951ed13a2f4d22e758bb807b/tumblr_inline_nonu62Tr1J1qlpzxk_540.png" alt="KTOMG list" /></p>

<p>Before I deploy the newest update (shown above), I&rsquo;d prefer it if the list binding performance was better than it is now. Currently there&rsquo;s a visible block on the UI thread when returning results from the API, about 500-1000ms. <strong>This is unacceptable.</strong></p>

<p>A quick Google search did not yield anything regarding a &ldquo;real&rdquo; performance tool for Knockout. What I would love is an extension that would overlay performance statistics over the UI of my app after binding is complete. This way I could visualize and easily pinpoint what bindings are causing performance issues.</p>

<p>I&rsquo;ve made a small step towards that dream by creating a simple reporting script that outputs a &ldquo;binding report&rdquo; to the Chrome console:</p>

<p><img src="https://cloud.githubusercontent.com/assets/563819/7795861/5a10389a-02d9-11e5-9462-056fa9e4da18.png" alt="Binding report" /></p>

<p>The report displays the total duration of the binding process (which is all bindings that occur after a 500ms wait time) as well as the top binding according to total duration.</p>

<p>It also displays each binding summary in a table (<code>console.table</code>). You can drill-down by expanding the array entries underneath the table (sorted by duration).</p>

<p><img src="https://cloud.githubusercontent.com/assets/563819/7795969/8fb1c828-02da-11e5-8b81-fe88f466812e.png" alt="Drill-down" /></p>

<p>The script works by wrapping all the binding handlers (even custom ones) in a wrapper function that calculates the duration of the call to <code>init</code> or <code>update</code>. You just need to include it after your custom binding handlers and before the <code>applyBindings</code> call.</p>

<p>The script requires <a href="http://underscorejs.org">Underscore</a> and Google Chrome. Here&rsquo;s the gist:</p>

<script src="https://gist.github.com/kamranayub/65399fa247a6c182bc65.js"></script>


<p>As you can see in my own performance report, I have some work to do to fix my <code>if</code> bindings. It doesn&rsquo;t exactly pinpoint the problem binding, but it gets me a step closer to understanding what&rsquo;s going on.</p>

<p><img src="https://cloud.githubusercontent.com/assets/563819/7796086/f407dc76-02db-11e5-90e7-b89613408174.png" alt="Uh oh" /></p>

<p>Now if you&rsquo;ll execuse me, I&rsquo;ve got some work to do.</p>

<p><strong>Update:</strong> Using this little script, I was able to get down to &lt;150ms from 600-900ms (and this is a slow laptop). This is much more acceptable for a release this week!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Extending Knockout Observables to Sync With Address Bar]]></title>
    <link href="http://kamranicus.com/blog/2015/05/11/extending-knockout-with-urlsync/"/>
    <updated>2015-05-11T16:20:00+00:00</updated>
    <id>http://kamranicus.com/blog/2015/05/11/extending-knockout-with-urlsync</id>
    <content type="html"><![CDATA[<p>I made a tiny Knockout extender called <code>urlSync</code> that syncs an observable with the URL.</p>

<!-- More -->


<p>For <a href="http://keeptrackofmygames.com">Keep Track of My Games</a> I&rsquo;ve been adding filtering to the game library.
I&rsquo;m really proud of what I have, here&rsquo;s what it looks like in the UI:</p>

<p><img src="/blog/images/2015-05-11-filtering.png" alt="Filtering UI" /></p>

<p>A modal allows the user to drill down and pick what filters to apply, the modal updates to show what filters are applied and what&rsquo;s available with the current resultset.</p>

<p><img src="/blog/images/2015-05-11-filtering-modal.png" alt="Filtering Modal" /></p>

<p>When you&rsquo;re outside the modal, I show any filters being applied allowing one-click removal or toggling the filtering method between AND/OR.</p>

<p>To make it easy to serialize/deserialize filters, I created a custom filtering expression that is pretty standard around town:</p>

<pre><code>{facetName}:{facetValue},{facetValue},...|...
</code></pre>

<p>For example, representing the screenshot above, the filtering expression would be:</p>

<pre><code>Lists:6|Status:8|My+Platforms:1
</code></pre>

<p>If you muck with the expression, there shouldn&rsquo;t be any issues. Facets are validated against whatever the original unfiltered resultset is, so you cannot add arbitrary expressions&mdash;if you do, they will not show up in the server response. Strings are special because potentially they can include characters used to parse the expression, the simplest way to deal with it is by encoding them and then decoding the value.</p>

<pre><code>Tags:my%20awesome%2ctag,tag2|Status:4
</code></pre>

<p>Now, I wanted to talk about the filtering expression because it makes it really easy to do a bunch of things:</p>

<ol>
<li>Reading/writing from querystring or hash</li>
<li>Create a command textbox that can parse and autocomplete expressions</li>
<li>Allow the user to save &ldquo;views&rdquo; of their games</li>
</ol>


<p>Items 2 and 3 might be on the agenda for some later date but item 1 is required for being able to create pre-filtered routes or create links. Since the library is loaded through Knockout and Web API, we need to be able to pass any filter or parameters when the page is loaded and also keep track of what the current values are for filtering.</p>

<p>To achieve this, I created a really simple <a href="http://knockoutjs.com/documentation/extenders.html">Knockout Extender</a> called <strong>urlSync.</strong> All it does is initially load an observable from the hash (if found) or the querystring (if found). Then it observes the observable and keeps the <code>window.location.hash</code> updated.</p>

<p>This could easily be extended to use <a href="https://developer.mozilla.org/en-US/docs/Web/Guide/API/DOM/Manipulating_the_browser_history">HTML5 <code>pushState</code></a>, if you wished. For now, managing the hash is &ldquo;good enough&rdquo; for my use case.</p>

<p>Here is a Gist of the extender:</p>

<script src="https://gist.github.com/kamranayub/3feba45dd2da3262b872.js"></script>


<p>It depends on <a href="http://medialize.github.io/URI.js">URI.js</a> and the <a href="http://medialize.github.io/URI.js/docs.html#fragment-abuse">URI.fragmentQuery</a> component. It also uses <a href="http://underscorejs.org">Underscore.js</a>, but that&rsquo;s just because I have it in my project already.</p>

<p>It&rsquo;s really simple to use, for example here&rsquo;s a snippet from my collection view model:</p>

<p>```
// Flattened facets
ViewModel.facets = ko.observableArray([]);</p>

<p>// Selected (applied) facets
ViewModel.selectedFacets = ko.observableArray([]).extend({</p>

<pre><code>urlSync: {
    param: "filterBy",
    read: function(value) {
       return kt.utils.facetsFromString(value, ViewModel.facets);
    },
    write: kt.utils.facetsToString
}
</code></pre>

<p>});</p>

<p>// Filter AND toggle
ViewModel.filterAnd = ko.observable(false).extend({ urlSync: &ldquo;filterAnd&rdquo; });
```</p>

<p>As you can see, the extender allows you to intercept read/write so you can perform any custom transformations (e.g. filtering objects to/from string). Because we&rsquo;re deserializing from a string and because the <code>checkedValue</code> binding is by reference, I pass in the existing facets collection to my utility, in order to preserve object references when required. On initial page load, this isn&rsquo;t required as the games haven&rsquo;t been fetched from the API yet. Once they are, my fetch method updates the observables. I could also modify the way I handle binding the checkboxes but this works.</p>

<p>The <code>urlSync</code> extender will then bind the observable values to the URL like this:</p>

<pre><code>users/kamran.ayub/lists/all#?
    sortBy=Name&amp;
    filterAnd=true&amp;
    filterBy=Status%3A8%7CLists%3A6%7CMy+Platforms%3A1
</code></pre>

<p>Since the extender can also fallback to reading from the querystring, we can create URLs that filter a user&rsquo;s collection:</p>

<pre><code>users/somebody/lists/all?filterBy=Platforms:2,5,40
</code></pre>

<p>Pretty neat and now allows anyone to copy/paste the URL and preserve any needed filtering state!</p>
]]></content>
  </entry>
  
</feed>
