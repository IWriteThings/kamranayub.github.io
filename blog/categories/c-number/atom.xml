<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: C# | Kamranicus]]></title>
  <link href="http://kamranicus.com/blog/categories/c-number/atom.xml" rel="self"/>
  <link href="http://kamranicus.com/"/>
  <updated>2016-02-24T01:53:24+00:00</updated>
  <id>http://kamranicus.com/</id>
  <author>
    <name><![CDATA[Kamran]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Tools of the Trade 2016]]></title>
    <link href="http://kamranicus.com/blog/2016/02/09/tools-of-the-trade/"/>
    <updated>2016-02-09T03:09:00+00:00</updated>
    <id>http://kamranicus.com/blog/2016/02/09/tools-of-the-trade</id>
    <content type="html"><![CDATA[<p>Sometimes you get so caught up in the work you do on a daily basis that you forget what it was like to start your job on day one&mdash;not knowing anything about what tools, extensions, and general utilities you take for granted now, 6 years into your career. It seems like on a monthly basis I find a new extension or utility that is useful to me. I wanted to share my toolbelt, in case it contains something you&rsquo;ve never heard of and causes you to exclaim in excitement about something awesome that you&rsquo;ll start using today.</p>

<!-- More -->


<p>This list is organized by function&mdash;i.e. what the tool contributes to for my work. If I use extensions for a tool, I will list them under the tool. I&rsquo;ve definitely used more things than I list here but I use these on a day-by-day basis typically and are what I would consider essential to my workflow. Share any awesome tools you use that I missed in the comments! If I think of more, I&rsquo;ll add them below.</p>

<h2>Coding</h2>

<p>I work with JavaScript/TypeScript, HTML, CSS, and C# on a daily basis. Here&rsquo;s what I use and for what.</p>

<h3><a href="https://go.microsoft.com/fwlink/?LinkId=691978&amp;clcid=0x409">Visual Studio 2015 Pro/Community</a></h3>

<p>For primary .NET work, web app work, and work-work. I use Community edition at home, it&rsquo;s free!</p>

<p><strong>Extensions</strong></p>

<ul>
<li><a href="https://www.jetbrains.com/resharper/download/">ReSharper 10</a> &ndash; Oodles of time-saving refactoring helpers and code analysis</li>
<li><a href="https://visualstudiogallery.msdn.microsoft.com/3b329021-cd7a-4a01-86fc-714c2d05bb6c">Web Compiler</a> &ndash; for LESS, SASS compiling</li>
<li><a href="https://visualstudiogallery.msdn.microsoft.com/e1d68248-f30e-4a5d-bf18-31399a0bcfa6">Typewriter</a> (see my recent <a href="http://kamranicus.com/blog/2016/02/04/typewriter/">blog post</a>) &ndash; for T4-style TypeScript codegen</li>
<li><a href="https://visualstudiogallery.msdn.microsoft.com/ee6e6d8c-c837-41fb-886a-6b50ae2d06a2">Web Essentials 2015</a> &ndash; for web dev</li>
<li><a href="https://visualstudiogallery.msdn.microsoft.com/1f6ec6ff-e89b-4c47-8e79-d2d68df894ec">Razor Generator</a> &ndash; for Razor templates for emails</li>
<li><a href="https://visualstudiogallery.msdn.microsoft.com/dd1dc8a5-d627-48a2-a19d-df4fe0c47f19">Node.js Tools for Visual Studio</a> &ndash; for Node.js projects</li>
<li><a href="https://visualstudiogallery.msdn.microsoft.com/c9eb3ba8-0c59-4944-9a62-6eee37294597">PowerShell Tools for Visual Studio</a> &ndash; for interactive PowerShell prompt and editing</li>
<li><a href="https://visualstudiogallery.msdn.microsoft.com/410e9b9f-65f3-4495-b68e-15567e543c58">Rebracer</a> &ndash; save formatting settings per solution</li>
</ul>


<h3><a href="http://code.visualstudio.com">Visual Studio Code</a></h3>

<p>For working on lots of my JS/TS-based OSS projects like <a href="http://excaliburjs.com">Excalibur.js</a>. The cross-platform, Git-integrated nature of the IDE is awesome along with per-project user settings to keep everyone in-sync.</p>

<p><strong>Extensions</strong></p>

<ul>
<li>ReStructured Text &ndash; for <a href="http://docs.excaliburjs.com">Excalibur docs</a></li>
<li>PowerShell &ndash; for scripts</li>
</ul>


<h3><a href="https://www.sublimetext.com">Sublime Text 3</a></h3>

<p>I use Sublime for note-taking (auto-save) and quick file editing since it&rsquo;s so fast and has a context-menu shortcut to edit files.</p>

<h3><a href="http://github.com">GitHub</a></h3>

<p>I pay for a plan at GitHub for private source code hosting but I also use it for all my <a href="http://github.com/kamranayub">OSS development</a>. It&rsquo;s a staple of my coding workflow.</p>

<h3><a href="http://desktop.github.com">GitHub Desktop</a></h3>

<p>For working with GitHub projects and local Git repositories, I also like that launches posh-git for the shell.</p>

<h3><a href="http://linqpad.com">Linqpad 5</a></h3>

<p>For quick C# script testing, database queries, etc.</p>

<h3><a href="https://technet.microsoft.com/en-us/scriptcenter/dd742419.aspx">PowerShell &amp; ISE</a></h3>

<p>I recently <a href="http://kamranicus.com/blog/2015/09/17/powershell-html5-offline-manifest/">became a believer</a> in PowerShell, for automation and scripting it&rsquo;s awesome. Just <a href="https://mva.microsoft.com/en-US/training-courses/getting-started-with-powershell-3-0-jump-start-8276">take the few hours</a> and learn it, you won&rsquo;t regret it. ISE is the scripting editor built into Windows.</p>

<h3><a href="https://github.com/dahlbyk/posh-git">posh-git</a></h3>

<p>The default shell for GH Desktop (above), posh-git is a PowerShell prompt with Git integration.</p>

<h2>Multimedia</h2>

<h3><a href="http://www.adobe.com/creativecloud.html">Adobe Creative Cloud</a></h3>

<p>The subscription-based model softens the blow of owning Adobe products and, perhaps, costs more over time but the benefits outweigh the negatives&mdash;namely, I own the full suite of Adobe products (<em>cough</em> legally) and they&rsquo;re <strong>always</strong> up-to-date with new versions so I don&rsquo;t need to pay up-the-nose every year. I also really like TypeKit for syncing new fonts.</p>

<h3><a href="http://www.aseprite.org/">aseprite Editor</a></h3>

<p>This is for pixel graphics and sprites, ASE is great for pixel-perfect drawings and animations.</p>

<h3><a href="http://www.mapeditor.org/">Tiled Map Editor</a></h3>

<p>For creating game maps using the spritesheets and tilesets I made from ASE/Photoshop (or purchased). Tiled also exports to JSON, making it easy to <a href="http://github.com/excaliburjs/excalibur-tiled">integrate with game engines</a>.</p>

<h3><a href="http://www.audacityteam.org/">Audacity</a></h3>

<p>I use Audacity for audio editing since it&rsquo;s easy to use and very lightweight.</p>

<h3><a href="http://www.virtualdub.org/">VirtualDub</a></h3>

<p>Simple video editor and great for transencoding video formats.</p>

<h3><a href="https://obsproject.com/download#mp">Open Broadcasting Studio</a></h3>

<p>For streaming and screen recording, you can&rsquo;t beat the FOSS OBS Studio. The new version is hot stuff and is a total rewrite of the &ldquo;Classic&rdquo; version.</p>

<h2>Productivity</h2>

<h3><a href="http://www.teamviewer.com/en-us/">TeamViewer</a></h3>

<p>I use TeamViewer because it&rsquo;s dead simple to set up and manage remote access to my machines without fiddling with firewalls or port forwarding. They also have native mobile clients for on-the-go RDP.</p>

<h3><a href="https://products.office.com/en-us/office-365-home">OneNote / Office 365</a></h3>

<p>I use OneNote for password-protected information (it&rsquo;s actually encrypted) and for cross-device note syncing. O365 is great for the cross-platform Office and syncing via OneDrive.</p>

<h3><a href="http://onedrive.com">OneDrive</a></h3>

<p>I use OneDrive for its cross-platform syncing (PC/Android/iPhone), cloud storage, and PC Windows-explorer integration. It just works. It also means my OneNote notebooks are available everywhere.</p>

<h3><a href="http://lastpass.com">LastPass</a></h3>

<p>I use LastPass Password Manager for its browser integration, always available cloud vault, and cross-device syncing (to my Android).</p>

<h3><a href="http://trello.com">Trello</a></h3>

<p>My wife and I use Trello to manage our household information&mdash;events, shopping, to-do lists, restaurants to eat at, blog posts to write, etc. My wife loves how she can use it easily on her iPhone and get notifications whenever someone changes/adds something. We both like the flexibility it offers and its ease of use. At work, we use it to manage our tasks and work for the team alongside TFS (because, you know, TFS).</p>

<h3><a href="http://www.powerarchiver.com/">PowerArchiver</a></h3>

<p>Yeah, I pay for an archiving software&hellip; it&rsquo;s awesome, easy to use, unzips anything, has Explorer-integration, etc. It was only $23 and they do free upgrades for the Personal edition.</p>

<h3><a href="https://play.google.com/store/apps/details?id=com.snoggdoggler.android.applications.doggcatcher.v1_0&amp;hl=en">Doggcatcher</a>, <a href="http://audible.com">Audible</a>, <a href="http://iheartradio.com">iHeartRadio</a>, <a href="http://spotify.com">Spotify</a></h3>

<p>You have to listen to something while you work, right? Do you just listen to the local radio on your commutes? Podcasts are invaluable for staying current with tech news and listening to books makes it easy to be &ldquo;literate&rdquo; on the go.</p>

<p><strong>Podcasts</strong></p>

<p>I paid for <a href="https://play.google.com/store/apps/details?id=com.snoggdoggler.android.applications.doggcatcher.v1_0&amp;hl=en">Doggcatcher</a> and it&rsquo;s money well spent. It works flawlessly and I listen to podcasts in the car on the way to and from work everyday. Usually I do one day podcasts, one day book, to keep it sane. I also pick and choose the episodes I listen to.</p>

<ul>
<li><a href="https://www.dotnetrocks.com/">.NET Rocks</a></li>
<li><a href="https://twit.tv/shows/this-week-in-tech">This Week in Tech</a></li>
<li><a href="http://www.polygon.com/minimap">Polygon Minimap</a></li>
<li><a href="http://www.giantbomb.com/podcasts/">Giant Bombcast</a></li>
<li><a href="http://maximumfun.org/shows/my-brother-my-brother-and-me">My Brother, My Brother, and Me</a></li>
<li><a href="http://www.thisamericanlife.org/">This American Life</a></li>
</ul>


<p>I listen to <a href="http://audible.com">Audible</a> for books on commutes. I&rsquo;ve been a member for over 6 years and through it own over 100 books and probably have saved myself hundreds of dollars on books. PS. Check out the <a href="http://www.audible.com/series/ref=a_search_c4_1_1_1srSrs_sa?asin=B0085NK3SS">Matthew Corbett series</a>, Edoardo Ballerini is a fucking awesome narrator.</p>

<p>For radio at home, I hooked up my old Android Moto G to a Bluetooth stereo and use <a href="http://iheartradio.com">iHeartRadio</a>.</p>

<p>For streaming music, I subscribe to <a href="http://spotify.com">Spotify</a> that my wife and I share on our devices. I can also use Spotify/iHeartRadio in the basement on my PS4.</p>

<h3>OK Google</h3>

<p>I use OK Google on my phone (Cortana before, on my Windows Phone) to add reminders and to-dos on-the-go.</p>

<h2>Misc</h2>

<h3>Chrome</h3>

<p>I use <a href="http://kamranicus.com/blog/2015/05/21/chrome-multi-user/">supervised user profiles</a> to keep my work separated.</p>

<h3><a href="https://conemu.github.io/">ConEmu</a></h3>

<p>An awesome multi-tabbed customizable command prompt host&mdash;I use it to create shortcuts for Azure Powershell SDK, Visual Studio CMD prompt, Posh-Git, CMD prompt, etc.</p>

<h3><a href="http://regexr.com/">RegExr</a></h3>

<p>An awesome Regular Expression engine in the browser, my go-to Regex reference/tester.</p>

<h3><a href="http://draeton.github.io/stitches/">Stitches</a></h3>

<p>An HTML5-based sprite sheet generator.</p>

<h3><a href="https://emby.media/">Emby</a></h3>

<p>Not work-related but I use Emby (it&rsquo;s free!) to stream media to my consoles and other devices. It has a great web interface for remote viewing too!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using Typewriter to Strongly-Type Your Client-Side Models and Services]]></title>
    <link href="http://kamranicus.com/blog/2016/02/04/typewriter/"/>
    <updated>2016-02-04T02:08:00+00:00</updated>
    <id>http://kamranicus.com/blog/2016/02/04/typewriter</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve recently discovered <a href="http://frhagn.github.io/Typewriter/index.html">Typewriter for Visual Studio</a>, a T4-style code-generator specifically meant for generating Typescript files. I&rsquo;ve been using it since in all my projects, at work and at home. It&rsquo;s just <strong>so</strong> good. Let me explain what Typewriter does and why it&rsquo;s so awesome.</p>

<!-- more -->


<h2>Setting the stage</h2>

<p>It&rsquo;s 2016. The web app you&rsquo;re working on is a mix of Javascript, C#, and controllers for MVC or Web API. Your solution looks something like this:</p>

<p><img src="https://cloud.githubusercontent.com/assets/563819/12835031/1f2c4cfc-cb72-11e5-8f99-d6b3a4af3e83.png" alt="Folder structure" /></p>

<p>You&rsquo;ve got a standard folder structure with a MVC controller and API controller. You want to leverage a client-side library to make it easier to have a dynamic and responsive interface, let&rsquo;s say <a href="http://knockoutjs.com">Knockout.js</a>. You start creating a Knockout view model and you want to bind it to your view. What do you do now at this point for binding the initial data to your view?</p>

<p>Do you&hellip;</p>

<ol>
<li>Serialize the server model into JSON and pass it into your Knockout view model manually</li>
<li>Don&rsquo;t even bother and fetch the data via AJAX when the page loads</li>
</ol>


<p>In either case, you&rsquo;re left with a realization: <strong>I need to pass in my server model so I can use it in my client-side code.</strong> You&rsquo;re left doing something like this:</p>

<p>```js
var TaskListViewModel = function (model) {
   var vm = {};</p>

<p>   vm.name = ko.observable(model.name);
   vm.tasks = ko.observableArray(model.tasks.map(function (t) { return TaskViewModel(t); });</p>

<p>   return vm;
};</p>

<p>$(function () {
  var vm = TaskListViewModel(window.model);</p>

<p>  ko.applyBindings(vm);
});
```</p>

<p>And then passing in your server model, serialized from JSON either via AJAX or embedded in the view:</p>

<p>```html</p>

<script>
window.model = @Html.Raw(JsonConvert.SerializeObject(Model));

// or

$(function () {
  $.getJSON('/api/tasks', function (tasks) {
    var vm = TaskListViewModel(tasks);
    
    ko.applyBindings(vm);
  });
</script>


<p>```</p>

<p>We&rsquo;ve all done something like this because no matter what approach you choose, you have to map the models <em>somewhere</em>. You could use a mapping library like <a href="http://knockoutjs.com/documentation/plugins-mapping.html">ko.mapping</a> to help. But even with help, you still have the same problem:</p>

<blockquote><p>What happens when you change your model in C#?</p></blockquote>

<p>The answer is, &ldquo;I have to go and update all the references in my client-side Javascript.&rdquo; So what do we do? We try to leave it as much alone as we can, preferring not to change things so we can avoid Happy JS Refactoring Funtime.</p>

<h2>Enter Typescript, stage left</h2>

<p>We can address one aspect of this problem using <a href="http://typescriptlang.org">Typescript</a>, the typed superset of Javascript introduced by Microsoft several years ago. My love for Typescript is <a href="http://kamranicus.com/presentations/demystifying-typescript">well-documented</a> and I encourage you to go through that presentation if you haven&rsquo;t already.</p>

<p>Here&rsquo;s one reason why I love it: we can create interfaces that strongly-type our C# models.</p>

<p>```js
interface TaskListViewModel {
  id: number;
  name: string;
  author: string;
  created: Date;
  tasks: TaskViewModel[];
}</p>

<p>interface TaskViewModel {
   order: number;
   canMarkDone: boolean;
   task: Task;
}</p>

<p>interface Task {
  text: string;
  done: boolean;
  created: Date;
  modified: Date;
}
```</p>

<p>Now I&rsquo;ve created an interface that mirrors my serialized C# model representation. So now with Typescript, <strong>anytime</strong> I use a server-side model, I can ensure I never have any problems with misspellings/refactoring or type changes (e.g. &ldquo;author&rdquo; changing from a string to a <code>User</code> model). At compile-time, Typescript will ensure my references are correct.</p>

<p>Using type information, we can strongly type our previous JS view model:</p>

<p>```js
var TaskListViewModel = function (model: TaskListViewModel) {
   var vm = {};</p>

<p>   vm.name = ko.observable<string>(model.name);
   vm.tasks = ko.observableArray<TaskViewModel>(model.tasks.map(function (t) { return TaskViewModel(t); });</p>

<p>   return vm;
};
```</p>

<p>But we still have one problem: how can we avoid the headaches when our server model changes? We <em>still</em> need to update our TS models manually.</p>

<h2>Enter Typewriter, stage right</h2>

<p><a href="http://frhagn.github.io/Typewriter/index.html">Typewriter</a> is a Visual Studio extension that does one thing and does it well: it lets you create <strong>Typescript Template</strong> files. These are <em>basically</em> T4 templates but they&rsquo;re abstracted to the point where it&rsquo;s actually <em>easy</em> to use (sorry T4). When you save your C# files, Typewriter reflects over them and will run the template and generate corresponding Typescript files. This lets you do simple things like mirror types to crazy things like&hellip; generate an entire AJAX web service.</p>

<p>So, using Typewriter, what would the template file look like to mirror our models?</p>

<p>```
namespace TypewriterBlogPost {</p>

<pre><code>$Classes(TypewriterBlogPost.Models.*)[
/**
 * Interface for: $FullName
 */
export interface $Name {
    $Properties[
    $name: $Type;]
}]
</code></pre>

<p>}
```</p>

<p>The syntax of the template file is pretty straightforward, as <a href="http://frhagn.github.io/Typewriter/pages/getting-started.html">explained in the documentation</a>. Let&rsquo;s walk through it.</p>

<p><code>
$Classes(TypewriterBlogPost.Models.*)[
</code></p>

<p>The <code>Classes</code> keyword tells Typewriter to search for all public classes in a file. In parenthesis, you can filter classes by FullName using wildcard syntax. Typewriter also supports Lambda functions to filter by a predicate:</p>

<p><code>
$Classes(x =&gt; x.FullName.Length &gt; 50)[
</code></p>

<p>The open square bracket indicates a repeated block of code of Typescript. We declare an interface since we want to add type safety, not an implementation (although you could, which you&rsquo;ll see next!). You can append another square pair for a separator string if there are > 1 items that match (i.e. multiple classes in a file, multiple properties, multiple methods).</p>

<p>Next, we list the properties using the same syntax. By the way, Typewriter has full Intellisense for all these keywords and variable names.</p>

<p><img src="https://cloud.githubusercontent.com/assets/563819/12796507/baabed5c-ca84-11e5-99bf-2079d85dabf0.png" alt="Intellisense" /></p>

<h2>Customize Knockout View Models</h2>

<p>Now that we have our models reflected and auto-syncing with our client-side code, we can do some extra fun stuff to <em>automatically generate Knockout view models.</em></p>

<p>The goal here is to auto-generate a base view model that we can then extend with custom methods, properties, and computed observables.</p>

<p>```js
${</p>

<pre><code>string KnockoutType(Property p) {
    if (p.Type.IsEnumerable) {
        return p.Type.Name.TrimEnd('[',']');
    }

    return p.Type;
}

string KnockoutValue(Property property) {
    var type = KnockoutType(property);

    if (IsEnumerableViewModel(property)) {
        return $"ko.observableArray&lt;Knockout{type}&gt;([])";
    } else if (property.Type.IsEnumerable) {
        return $"ko.observableArray&lt;{type}&gt;([])";
    }

    return $"ko.observable&lt;{type}&gt;()";
}    

bool IsEnumerableViewModel(Property p) {
    string type = KnockoutType(p);

    return p.Type.IsEnumerable &amp;&amp; type.EndsWith("ViewModel");
}
</code></pre>

<p>}
namespace TypewriterBlogPost {</p>

<pre><code>$Classes(*ViewModel)[ 
/**
 * Interface for: $FullName
 */
export interface $Name {
    $Properties[
    $name: $Type;]
}

/**
 * Knockout base view model for $FullName
 */
export class Knockout$Name {        
    $Properties[
    public $name = $KnockoutValue;]

    constructor(model: $Name) {
        this.map(model);
    }

    /**
     * Map $Name model to Knockout view model
     */
    public map(model: $Name) {
        $Properties(x =&gt; !IsEnumerableViewModel(x))[
        this.$name(model.$name);]
        $Properties(x =&gt; IsEnumerableViewModel(x))[
        this.$name(model.$name.map(this.map$Name));]
    }

    $Properties(x =&gt; IsEnumerableViewModel(x))[
    /**
     * Map $KnockoutType equivalent Knockout view model. Override to customize.
     */
    public map$Name(model: $KnockoutType) {
        return new Knockout$KnockoutType(model);
    }]

    /**
     * Returns a plain JSON object with current model properties
     */
    public getModel() {
        return {
            $Properties(x =&gt; !IsEnumerableViewModel(x))[
            $name: this.$name(),]
            $Properties(x =&gt; IsEnumerableViewModel(x))[
            $name: this.$name().map(x =&gt; x.getModel())][,]
        }
    }
}]
</code></pre>

<p>}
```</p>

<p>Oh man! This one&rsquo;s a doozy. All we&rsquo;re really doing is ensuring we recursively map KO view models for collections (we ignore non-ViewModels). We also added a couple convenient helper methods like <code>getModel()</code> that returns a JSON object with the current KO model values. <code>map$Name</code> allows us to customize how we map each collection, for example, to override what view model to use (such as a custom view model).</p>

<p>Typewriter allows you to create &ldquo;helper&rdquo; functions that you can then use in the template. We created ones for parsing out the Knockout types (trimming square brackets).</p>

<p>You might ask why prepend the name with <code>Knockout</code>? So that it won&rsquo;t conflict with the interfaces named after the view models. Since we want to pass in JSON from the server, we still need an interface that represents the server-side view model.</p>

<p>Here&rsquo;s an example of what this template will generate for <code>TaskListViewModel</code>:</p>

<p>```js
namespace TypewriterBlogPost {</p>

<pre><code>/**
 * Interface for: TypewriterBlogPost.ViewModels.TaskListViewModel
 */
export interface TaskListViewModel {

    id: number;
    name: string;
    author: string;
    created: Date;
    tasks: TaskViewModel[];
}

/**
 * Knockout base view model for TypewriterBlogPost.ViewModels.TaskListViewModel
 */
export class KnockoutTaskListViewModel {        

    public id = ko.observable&lt;number&gt;();
    public name = ko.observable&lt;string&gt;();
    public author = ko.observable&lt;string&gt;();
    public created = ko.observable&lt;Date&gt;();
    public tasks = ko.observableArray&lt;KnockoutTaskViewModel&gt;([]);

    constructor(model: TaskListViewModel) {
        this.map(model);
    }

    /**
     * Map TaskListViewModel model to Knockout view model
     */
    public map(model: TaskListViewModel) {

        this.id(model.id);
        this.name(model.name);
        this.author(model.author);
        this.created(model.created);

        this.tasks(model.tasks.map(this.mapTasks));
    }


    /**
     * Map TaskViewModel equivalent Knockout view model. Override to customize.
     */
    public mapTasks(model: TaskViewModel) {
        return new KnockoutTaskViewModel(model);
    }

    /**
     * Returns a plain JSON object with current model properties
     */
    public getModel() {
        return {

            id: this.id(),
            name: this.name(),
            author: this.author(),
            created: this.created(),

            tasks: this.tasks().map(x =&gt; x.getModel())
        }
    }
}
</code></pre>

<p>}
```</p>

<p>Awesome? You bet! So how would I use this in practice? I would just <code>extend</code> the auto-generated code with my custom code!</p>

<p>```js
namespace TypewriterBlogPost {</p>

<pre><code>export class ViewModel extends KnockoutTaskListViewModel {

    constructor(model: TaskListViewModel) {
        super(model);
    }

    addTask() {
        // todo call service
    }
}

// apply KO bindings and use JSON object from server
$(() =&gt; ko.applyBindings(new ViewModel((&lt;any&gt;window).viewModel)));
</code></pre>

<p>}
```</p>

<h2>Strongly-typing your API controllers</h2>

<p>Now that we&rsquo;ve got our view models squared away, how can we leverage Typewriter to help us with our Web API methods? Well, Typewriter comes with an awesome Web API extension that makes it easy to generate strongly-typed service classes.</p>

<p>```js
${</p>

<pre><code>using Typewriter.Extensions.WebApi;

string ReturnType(Method m) =&gt; m.Type.Name == "IHttpActionResult" ? "void" : m.Type.Name;
string ServiceName(Class c) =&gt; c.Name.Replace("Controller", "Service");
string ParentServiceName(Method m) =&gt; ServiceName((Class)m.Parent);
</code></pre>

<p>}</p>

<p>module TypewriterBlogPost {</p>

<pre><code>$Classes(:ApiController)[
export class $ServiceName {
    $Methods[

    // $HttpMethod: $Url
    public static Route$Name = ($Parameters(p =&gt; p.Type.IsPrimitive)[$name: $Type][, ]) =&gt; `$Url`;
    public static $name($Parameters[$name: $Type][, ]): JQueryPromise&lt;$ReturnType&gt; {
        return $.ajax({
            url: $ParentServiceName.Route$Name($Parameters(p =&gt; p.Type.IsPrimitive)[$name][, ]),
            type: '$HttpMethod',
            data: $RequestData
        });
    }]
}]
</code></pre>

<p>}
```</p>

<p>So, let&rsquo;s break it down:</p>

<ol>
<li>Include the WebApi extensions</li>
<li>Create some helper methods to rename the controllers and provide the right return type</li>
<li>For all classes that inherit <code>ApiController</code>

<ol>
<li>Create a service class</li>
<li>For each method:

<ol>
<li>Create a route helper function that returns a URL formatted with the right parameters</li>
<li>Create a JQuery AJAX call that sends a request to the right URL and includes the right request information</li>
</ol>
</li>
</ol>
</li>
</ol>


<p>The <code>TasksController</code> we have defined looks like this:</p>

<p>```csharp
using System;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Web.Http;
using TypewriterBlogPost.Models;
using TypewriterBlogPost.ViewModels;</p>

<p>namespace TypewriterBlogPost.Controllers
{</p>

<pre><code>public class TasksController : ApiController
{
    private static IList&lt;TaskListViewModel&gt; _taskLists = new List&lt;TaskListViewModel&gt;()
    {
        new TaskListViewModel()
        {
            Name = "Todos",
            Author = "Kamranicus",
            Created = DateTime.Now,
            Id = 1,
            Tasks =
            {
                new TaskViewModel() { Task = new Task() { Text = "Get milk from store" } },
                new TaskViewModel() { Task = new Task() { Text = "Get deli meat", Done = true  } }
            }
        }
    };

    public IEnumerable&lt;TaskListViewModel&gt; GetAll()
    {
        return _taskLists;
    }

    public TaskListViewModel GetById(int id)
    {
        return _taskLists.First(t =&gt; t.Id == id);
    }

    public void Post(int id, Task task)
    {
        var t = GetById(id);

        t.Tasks.Add(new TaskViewModel() { Task = task });        
    }
}
</code></pre>

<p>}
```</p>

<p>A few things to note:</p>

<ol>
<li>To avoid name collisions, I use <code>getAll</code> and <code>getById</code></li>
<li>To use with Typewriter, I return simple types&mdash;using <code>HttpResponseMessage</code> won&rsquo;t allow you to strongly-type the service. However you can still be flexible with errors by throwing <code>HttpExceptions</code> and Web API will serialize your response.</li>
<li>This is terrible code and is for illustrative purposes only</li>
</ol>


<p>What gets generated is what you&rsquo;d expect:</p>

<p>```js
module TypewriterBlogPost {</p>

<pre><code>export class TasksService {


    // get: api/tasks/
    public static RouteGetAll = () =&gt; `api/tasks/`;
    public static getAll(): JQueryPromise&lt;TaskListViewModel[]&gt; {
        return $.ajax({
            url: TasksService.RouteGetAll(),
            type: 'get',
            data: null
        });
    }

    // get: api/tasks/${id}
    public static RouteGetById = (id: number) =&gt; `api/tasks/${id}`;
    public static getById(id: number): JQueryPromise&lt;TaskListViewModel&gt; {
        return $.ajax({
            url: TasksService.RouteGetById(id),
            type: 'get',
            data: null
        });
    }

    // post: api/tasks/${id}
    public static RoutePost = (id: number) =&gt; `api/tasks/${id}`;
    public static post(id: number, task: Task): JQueryPromise&lt;void&gt; {
        return $.ajax({
            url: TasksService.RoutePost(id),
            type: 'post',
            data: task
        });
    }
}
</code></pre>

<p>}
```</p>

<p>Man, <em>how sexy is that?</em> Not only have we ensured our models and view models stay in-sync, our API is also reflected on the client-side so we don&rsquo;t need to worry about hard-coding routes!</p>

<p>Now we can implement our view model method properly:</p>

<p>```js
addTask(id: number, task: Task) {
  return TasksService.post(id, task).then(</p>

<pre><code>() =&gt; toastr.success("Posted new task successfully"));
</code></pre>

<p>}
```</p>

<p>Obviously there&rsquo;s much more you can do such as automatically handling errors, customizing options, creating Angular services, etc.</p>

<h2>So, that&rsquo;s why Typewriter is awesome</h2>

<p>I&rsquo;ve walked through a simple use case of why Typewriter is super useful&mdash;as a developer I&rsquo;m always interested in ways to make my life easier and not worrying about differences between my client and server is always helpful. That&rsquo;s why I love TypeScript and why I love Typewriter. Hope you found this helpful!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Planet Wars AI Competition With C# and Excalibur.js]]></title>
    <link href="http://kamranicus.com/blog/2016/01/25/planet-wars-ai-competition-excaliburjs-csharp/"/>
    <updated>2016-01-25T18:30:00+00:00</updated>
    <id>http://kamranicus.com/blog/2016/01/25/planet-wars-ai-competition-excaliburjs-csharp</id>
    <content type="html"><![CDATA[<p><img src="https://zippy.gfycat.com/BraveBlushingImpala.gif" alt="Planet Wars" /></p>

<p>This past weekend <a href="http://twitter.com/erikonarheim">Erik</a> and I built out a <a href="https://github.com/eonarheim/planet-wars-competition">Planet Wars</a> server (written in C#) and an <a href="http://excaliburjs.com">Excalibur.js</a>-powered visualization (written in TypeScript). Planet Wars is an AI competition where you build an AI that competes against another player to control a solar system. A map consists of several planets that have different growth rates and an initial number of ships. You have to send out a &ldquo;fleet&rdquo; of ships to colonize other planets and the player who controls the most planets and has destroyed their opponent&rsquo;s ships wins the game.</p>

<p>At work we are hosting our 6th Code Camp and recently we started hosting an AI competition internally. You can find past competition agents for <a href="https://github.com/eonarheim/AntAICompetition">Ants</a> and <a href="https://github.com/eonarheim/BellTowerEscape">Elevators</a>, for example.</p>

<p>The <a href="https://github.com/eonarheim/planet-wars-competition/tree/master/PlanetWars/Scripts/game">visualization for Planet Wars</a> is fairly simple, made even simpler using the power of <a href="http://excaliburjs.com">Excalibur.js</a>, the engine we work on during our spare time. We basically just use an Excalibur timer to query the status of the game state and update the state of all the actors in the game. For moving the fleets, we just use the <a href="http://excaliburjs.com/docs/api/edge/classes/ex.actioncontext.html">Actor Action API</a>.</p>

<p>For the <a href="https://github.com/eonarheim/planet-wars-competition/tree/master/PlanetWars/Server">game server</a>, we are using a <a href="https://github.com/eonarheim/planet-wars-competition/blob/master/PlanetWars/Server/HighFrequencyTimer.cs">HighFrequencyTimer</a> to run a 30fps server and then clients just send commands via HTTP, so any kind of agent will work like Python, Perl, PowerShell, or whatever! Anything that speaks HTTP can be a client. The server runs in the context of a website so we can easily query the state using a singleton <code>GameManager</code>. This wouldn&rsquo;t work in a load-balanced environment but it doesn&rsquo;t matter since people develop agents locally and we run the simulations on one server at high-speed to produce the results. If you backed the server with a data store, you could replay games but right now there&rsquo;s only an in-memory implementation.</p>

<p>To keep the server and client models in-sync, we use <a href="http://frhagn.github.io/Typewriter/index.html">Typewriter for Visual Studio</a> which is <strong>amazing</strong> and super useful not just for syncing client/server but also generating web clients, interfaces, etc. from C# code. I plan to write a separate post on some Typewriter tips for Knockout.js and Web API.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Impersonating a User During Automated Testing Scenarios]]></title>
    <link href="http://kamranicus.com/blog/2015/11/06/impersonating-during-testing/"/>
    <updated>2015-11-06T16:00:00+00:00</updated>
    <id>http://kamranicus.com/blog/2015/11/06/impersonating-during-testing</id>
    <content type="html"><![CDATA[<p>I&rsquo;m starting to introduce privacy controls to <a href="http://keeptrackofmygames.com">Keep Track of My Games</a> and I ran into the following scenario when writing my tests:</p>

<p>```
Scenario: Anonymous user should be able to view a public custom list</p>

<pre><code>Given a user has a list
And a user's list is public
When I request access to the list
Then I have read-only access
</code></pre>

<p>```</p>

<p>In this context, <strong>I</strong> am the anonymous user. This is the exact <a href="http://www.specflow.org/">SpecFlow</a> scenario I wrote. Do you know why I may have run into issues?</p>

<p>Let&rsquo;s look at the first two steps:</p>

<p>```c#
[Given(@&ldquo;a user has a list&rdquo;)]
public void GivenAUserHasAList() {</p>

<pre><code>_listResult = _context.ListService.CreateList(_newList)
</code></pre>

<p>}</p>

<p>[Given(@&ldquo;a user&rsquo;s list is public&rdquo;)]
public void GivenAUsersListIsPublic() {
  <em>privacySettings.Level = PrivacyLevel.Public;
  </em>context.ListService.UpdateListPrivacy(<em>listResult.Id, </em>privacySettings);
}
```</p>

<p>Why would this cause a problem with my given scenario?</p>

<ol>
<li>In the first step, I&rsquo;m creating a new list.</li>
<li>In the second step, I&rsquo;m taking the new list I just made from the first step and updating the privacy settings on it.</li>
</ol>


<p>The problem is that my service assumes the context is an authenticated user and will apply changes to the <strong>current user&rsquo;s</strong> list. Well, since I did not call my login helpers before these two steps, I am in an anonymous context so the service calls fail. That&rsquo;s good! But how can I tell my steps to call a service method <em>on behalf</em> of another user without having <em>every</em> step use the current user context?</p>

<p>You might say I should just create a new method that accepts a username and refactor my methods. I <em>could</em> do that but not only is my entire service designed around the current user context, my service layer is essentially the interface of my public API. I would never allow one user to create a list for another user (unless that was a feature). So the same way I wouldn&rsquo;t expose an API method to do something on behalf of someone, I won&rsquo;t add a public method in my service layer to do the same. I could choose to make the method private or internal and grant access to the assembly for testing&mdash;true, I <em>could</em> but that seems like a workaround where I need to expose special functionality just for testing.</p>

<p>The approach I ended up doing was simpler and more elegant and leveraged an existing pattern I was relying on: injecting an <code>IUserContext</code> into my service layer like this:</p>

<p><code>c#
public ListService(IUserContext userContext) {
  _userContext = userContext;
}
</code></p>

<p>This is using standard dependency injection (Ninject, in my case) to inject a context for the current user. That context gets created and maintained outside this class, so it doesn&rsquo;t care who provided it or where it came from, it just uses it to determine business logic.</p>

<p>So since I&rsquo;m already injecting the current user context and mocking it in my tests, why not simply swap out the context when I need to?</p>

<h2>Creating an impersonation context</h2>

<p>That&rsquo;s what I ended up doing. Here&rsquo;s my implementation of a <code>TestingImpersonationContext</code> (<a href="https://gist.github.com/kamranayub/9654d6581fbcf63cf481">https://gist.github.com/kamranayub/9654d6581fbcf63cf481</a>):</p>

<script src="https://gist.github.com/kamranayub/9654d6581fbcf63cf481.js"></script>


<p>It should be clear what&rsquo;s happening but let me explain further. Specifically in SpecFlow you can inject a context into your testing steps like so:</p>

<p>```c#
public class StepBase : TechTalk.SpecFlow.Steps {</p>

<pre><code>protected TestingContext _context;
public StepBase(TestingContext context)
{
    _context = context;
}
</code></pre>

<p>}
```</p>

<p>As long as your step classes inherit that <code>StepBase</code>, you have access to a context. All I did was build a method off that context that swapped out my existing dependency that was injected for <code>IUserContext</code> with a temporary context that impersonated the requested user. Once it is disposed, it restores the original context. Easy as pie!</p>

<p>If you are <strong>not</strong> using SpecFlow which is probably the case, don&rsquo;t fret&mdash;all you really need is a class or helper method that you can access in your test classes. However you want to achieve that is up to you. Create a base class, don&rsquo;t even bother with dependency injection, etc. This is entirely doable without DI but since my app relies on it I also leverage it during testing.</p>

<p>Now given we have an impersonation context helper, here&rsquo;s how our two testing steps have changed:</p>

<p>```c#
[Given(@&ldquo;a user has a list&rdquo;)]
public void GivenAUserHasAList() {
  using (_context.Impersonate(&ldquo;user&rdquo;) {</p>

<pre><code>_listResult = _context.ListService.CreateList(_newList);
</code></pre>

<p>  }
}</p>

<p>[Given(@&ldquo;a user&rsquo;s list is public&rdquo;)]
public void GivenAUsersListIsPublic() {</p>

<pre><code>using (_context.Impersonate("user"))
{
    _privacySettings.Level = PrivacyLevel.Public;
    _context.ListService.UpdateListPrivacy(_listResult.Id, _privacySettings);
}
</code></pre>

<p>}
```</p>

<p>I could even update my scenario to be specific about <strong>who&rsquo;s list</strong> I&rsquo;m accessing (so it&rsquo;s not ambiguous between logged in user vs. another user) but since I only have two users in my testing context, it doesn&rsquo;t really matter.</p>

<p>Now for the test results:</p>

<p><code>
Given a user has a list
-&gt; done: ListSteps.GivenAUserHasAList() (0.2s)
And a user's list is public
-&gt; done: ListSteps.GivenAUsersListIsPublic() (0.0s)
When I request access to the list
-&gt; done: ListSteps.WhenIRequestAccessToTheList() (0.1s)
Then I have read-only access
-&gt; done: ListSteps.ThenIHaveReadAccess() (0.0s)
</code></p>

<p>The tests are green and now I&rsquo;m a happy coder. By the way, if you aren&rsquo;t using <a href="http://specflow.org">SpecFlow</a> for .NET you should consider it, I love it.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using Azure CDN Origin Pull With Cassette]]></title>
    <link href="http://kamranicus.com/blog/2015/10/10/azure-cdn-cassette/"/>
    <updated>2015-10-10T00:30:00+00:00</updated>
    <id>http://kamranicus.com/blog/2015/10/10/azure-cdn-cassette</id>
    <content type="html"><![CDATA[<p>For the October update for <a href="http://keeptrackofmygames.com">Keep Track of My Games</a> I wanted to offload my web assets to a CDN. Since I&rsquo;m already using <a href="http://azure.com">Microsoft Azure</a> to host the site, I decided to use <a href="https://azure.microsoft.com/en-us/services/cdn/">Azure CDN</a>.</p>

<p>I set it up for &ldquo;Origin Pull&rdquo; which means that instead of uploading my assets to the CDN (Azure Blob storage), you request a file from the CDN and Azure will go and get it from your website and then cache it on their servers.</p>

<p>So as an example:</p>

<p><code>
User requests http://az888888.vo.msecnd.net/stylesheets/foo.png
|
|
CDN: have I cached "stylesheets/foo.png?"
  Yes: Serve content from edge cache (closest to user)
  No: Request http://yourwebsites.com/stylesheets/foo.png and serve
</code></p>

<p>You can read more about <a href="https://azure.microsoft.com/en-us/documentation/articles/cdn-create-new-endpoint/">how to set up origin pull in Azure CDN</a>. In my case, I used &ldquo;Custom Origin&rdquo; of &ldquo;<a href="http://keeptrackofmygames.com">http://keeptrackofmygames.com</a>&rdquo;.</p>

<h2>Using CDN with Cassette</h2>

<p>I use the .NET library <a href="http://getcassette.com">Cassette</a> for bundling &amp; minification for KTOMG&mdash;when I started KTOMG there was no Microsoft provided option and Cassette has been really stable.</p>

<p>It works pretty much as you&rsquo;d expect:</p>

<ul>
<li>Define &ldquo;bundles&rdquo; which are sets of scripts/stylesheets</li>
<li>Render bundles onto page(s)</li>
<li>If debug mode, render individually otherwise minify and concatenate</li>
</ul>


<p>By default, Cassette will render URLs like this in your source code:</p>

<p>In debug mode:</p>

<p>```
Bundle: ~/Content/core</p>

<ul>
<li>/cassette.axd/asset/Content/bootstrap.css?hash</li>
<li>/cassette.axd/asset/Content/site.css?hash</li>
<li>/cassette.axd/asset/Content/app.css?hash
```</li>
</ul>


<p>And in production:</p>

<p><code>
/cassette.axd/stylesheet/{hash}/Content/core
</code></p>

<p>But if we want to serve assets over the CDN, we need to plug in our special CDN URL prefix&mdash;not only for script/stylesheet references but also references to images <em>in</em> those files.</p>

<p>Luckily, Cassette provides a facility to modify generated URLs by letting you register a <code>IUrlGenerator</code>. Here&rsquo;s my full implementation of this for my CDN:</p>

<script src="https://gist.github.com/kamranayub/2da4ccfec3e7812c8367.js"></script>


<p>As you can see, I register a custom <code>IUrlGenerator</code> and a custom <code>IUrlModifier</code>. The default <code>IUrlModifider</code> is Cassette&rsquo;s <code>VirtualDirectoryPrepender</code> and it just prepends &ldquo;/&rdquo; to the beginning of every URL but in our case we want to conditionally prepend the Azure CDN endpoint in production.</p>

<p>In production, this will produce the following output:</p>

<p><code>
https://az99999.vo.msecnd.net/cassette.axd/stylesheet/{hash}/Content/core
</code></p>

<p>To allow local debugging and CDN in production I just use an app setting in the web.config. In Azure, I also add an application setting (<code>CdnUrl</code>) through the portal in my production slot with the correct CDN URL and voila&mdash;all my assets will now be served over CDN.</p>

<h3>Notes</h3>

<ul>
<li><p>Azure CDN does not yet support HTTPS for custom origin domains. So if you want to serve content over <a href="http://static.yoursite.com">http://static.yoursite.com</a> you can&rsquo;t serve it over HTTPS because Azure doesn&rsquo;t allow you to upload or set a SSL certificate to use and insteads uses their own certificate which is not valid for your domain. <a href="http://feedback.azure.com/forums/169397-cdn/suggestions/1332683-allow-https-for-custom-cdn-domain-names">Vote up the UserVoice issue</a> on this.</p></li>
<li><p>Azure CDN origin pull does not seem to respect <code>Cache-Control: private</code> HTTP header. For example, by default MVC serves pages with private cache control which means browsers won&rsquo;t cache that page and neither <em>should</em> Azure CDN&mdash;but it does anyway. In my case, I really don&rsquo;t want a true mirror of my site, I just wants assets served over CDN and Cassette sets <code>Cache-Control: public</code> on them automatically. <a href="http://feedback.azure.com/forums/169397-cdn/suggestions/10148280-respect-cache-control-private-for-origin-pull">You can upvote my feature request on UserVoice</a>.</p></li>
<li><p>I am choosing <strong>not</strong> to point my entire domain to the CDN. Some folks choose to serve their entire site over the CDN which is definitely something you can do. However, in my case, I didn&rsquo;t want to do that. If you instead chose to point your domain to the CDN endpoint, you don&rsquo;t need to do any of this&mdash;<strong>everything</strong> will be served over the CDN.</p></li>
</ul>

]]></content>
  </entry>
  
</feed>
