<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Testing | Kamranicus]]></title>
  <link href="http://kamranicus.com/blog/categories/testing/atom.xml" rel="self"/>
  <link href="http://kamranicus.com/"/>
  <updated>2016-08-12T01:53:05+00:00</updated>
  <id>http://kamranicus.com/</id>
  <author>
    <name><![CDATA[Kamran]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Influencing Your Kudu Deployment Through Git Commit Messages]]></title>
    <link href="http://kamranicus.com/blog/2015/12/11/kudu-deployment-flags-in-commit-messages/"/>
    <updated>2015-12-11T01:30:00+00:00</updated>
    <id>http://kamranicus.com/blog/2015/12/11/kudu-deployment-flags-in-commit-messages</id>
    <content type="html"><![CDATA[<p>If you&rsquo;re on Windows Azure and using continuous deployment through Git, you may not know you are using an open source platform called
<a href="https://github.com/projectkudu/kudu">Kudu</a> behind-the-scenes that performs your deployment. If this is the first time you&rsquo;ve heard of Kudu and you&rsquo;ve been
using Azure for awhile, it&rsquo;s time to <a href="https://github.com/projectkudu/kudu">get acquainted</a>. Kudu is amazing. It has a whole REST API that lets you manage
deployments, trigger builds, trigger webjobs, view processes, a command prompt, and a ton more.</p>

<p>You can get to your Kudu console by visiting</p>

<pre><code>https://&lt;yoursite&gt;.scm.azurewebsites.net
</code></pre>

<p>The <strong>.scm.</strong> part is the key, as that is where the Kudu site is hosted.</p>

<h2>Customizing Kudu deployments</h2>

<p>One of the other things it offers is a <a href="https://github.com/projectkudu/kudu/wiki/Custom-Deployment-Script">customized deployment script</a>. I&rsquo;ve customized mine because I have a test
project where I run automated tests during the build. This is useful since it&rsquo;ll fail the build if I make any changes
that break my tests and forces me to keep things up-to-date resulting in a higher quality codebase.</p>

<p>If you want to generate your own script, it&rsquo;s pretty easy. Just follow the steps <a href="https://github.com/projectkudu/kudu/wiki/Custom-Deployment-Script">outlined here</a>. For example, after
customizing my script here&rsquo;s what my section looks like to run my tests:</p>

<p>```
:: 3. Build unit tests
call :ExecuteCmd &ldquo;%MSBUILD_PATH%&rdquo; &ldquo;%DEPLOYMENT_SOURCE%\src\Tests\Tests.csproj&rdquo; /nologo /verbosity:m /t:Build /p:AutoParameterizationWebConfigConnectionStrings=false;Configuration=Release /p:SolutionDir=&ldquo;%DEPLOYMENT_SOURCE%.\&rdquo; %SCM_BUILD_ARGS%</p>

<p>IF !ERRORLEVEL! NEQ 0 goto error
```</p>

<p>All I really did was copy step 2 in the script that builds my web project and just change the path to my tests project.</p>

<p>Finally, I run the tests using the packaged Nunit test runner (checked into source control):</p>

<p><code>
call :ExecuteCmd "%DEPLOYMENT_SOURCE%\tools\nunit\nunit-console.exe" "%DEPLOYMENT_SOURCE%\src\Tests\bin\Release\Tests.dll" /framework:v4.5.1
IF !ERRORLEVEL! NEQ 0 goto error
</code></p>

<p>Simple!</p>

<h2>Now the fun part</h2>

<p>One thing you&rsquo;ll notice if you start running tests on your builds is that this starts to slow down your continuous deployment workflow.
For 90% of the time this is acceptable, after all, you can wait a few minutes to see your changes show up on the site. But sometimes,
especially for production hotfixes or trial-and-error config changes, that 3-5 minutes becomes unbearable.</p>

<p>In cases like this, I&rsquo;ve set up a little addition to my script that will read the git commit message and take action depending on what phrases it sees.</p>

<p>For example, let&rsquo;s say I commit a change that is just a config change and I know I don&rsquo;t need to run any tests or I really want the quick build.
This is what my commit message looks like:</p>

<pre><code>[notest] just changing App.config
</code></pre>

<p>That phrase <code>[notest]</code> is something my script looks for at build time and if it&rsquo;s present it will skip running tests!
You can use this same logic to do pretty much anything you want. Here&rsquo;s what it looks like after step 3 in my script:</p>

<p>```
:: Above at top of file</p>

<p>IF NOT DEFINED RUN_TESTS (
   SET RUN_TESTS=1
)</p>

<p>:: 4. Run unit tests
echo Latest commit ID is &ldquo;%SCM_COMMIT_ID%&rdquo;</p>

<p>call git show -s &ldquo;%SCM_COMMIT_ID%&rdquo; &mdash;pretty=%%%%s > commitmessage.txt
SET /p COMMIT_MESSAGE=&lt;commitmessage.txt</p>

<p>echo Latest commit message is &ldquo;%COMMIT_MESSAGE%&rdquo;</p>

<p>IF NOT &ldquo;x%COMMIT_MESSAGE:[notest]=%&rdquo;==&ldquo;x%COMMIT_MESSAGE%&rdquo; (
   SET RUN_TESTS=0
)</p>

<p>IF /I &ldquo;%RUN_TESTS%&rdquo; NEQ &ldquo;0&rdquo; (</p>

<pre><code>echo Running unit tests
call :ExecuteCmd "%DEPLOYMENT_SOURCE%\tools\nunit\nunit-console.exe" "%DEPLOYMENT_SOURCE%\src\Tests\bin\Release\Tests.dll" /framework:v4.5.1
IF !ERRORLEVEL! NEQ 0 goto error
</code></pre>

<p>) ELSE (</p>

<pre><code>echo Not running unit tests because [notest] was present in commit message
</code></pre>

<p>)
```</p>

<p>Alright, there&rsquo;s definitely some batch file black magic incantations going on here! So let&rsquo;s break it down.</p>

<pre><code>echo Latest commit ID is "%SCM_COMMIT_ID%"
</code></pre>

<p>Kudu defines several useful <a href="https://github.com/projectkudu/kudu/wiki/Deployment-Environment">environment variables</a> that you have access to, including the current commit ID.
I&rsquo;m just echoing it out so I can debug when viewing the log output.</p>

<pre><code>call git show -s "%SCM_COMMIT_ID%" --pretty=%%%%s &gt; commitmessage.txt
SET /p COMMIT_MESSAGE=&lt;commitmessage.txt
</code></pre>

<p>Alright. This took me some real trial and error. Git lets you <a href="https://git-scm.com/docs/git-show"><code>show</code> any commit message</a> and can format it using a printf format string (<code>--pretty=%s</code>).
However, due to the weird escaping rules of batch files and variables, this requires not one but <strong>four</strong> <code>%</code> signs. Go figure.</p>

<p>Next I pipe it to a file, this is only so I can read the file back and store the message in a batch variable (<code>COMMIT_MESSAGE</code>), on the next line.
<strong>Kudu team:</strong> It would be sweet to add a <code>SCM_COMMIT_MESSAGE</code> environment variable!</p>

<pre><code>IF NOT "x%COMMIT_MESSAGE:[notest]=%"=="x%COMMIT_MESSAGE%" (
   SET RUN_TESTS=0
)
</code></pre>

<p>Okay, what&rsquo;s going on here? I&rsquo;ll <a href="http://stackoverflow.com/questions/7005951/batch-file-find-if-substring-is-in-string-not-in-a-file">let StackOverflow explain</a>. The <code>:[notest]=</code> portion REPLACES the term &ldquo;[notest]&rdquo; in
the preceding variable (<code>COMMIT_MESSAGE</code>) with an empty string. The <code>x</code> prefix character guards against batch file weirdness.
So if <code>[notest]</code> is NOT present, this will return true (the strings match). If it is present, the condition will be false and so we do <code>IF NOT</code>
since we want to execute when that is the case.</p>

<p>If <code>[notest]</code> is present in the message, we set another variable, <code>RUN_TESTS</code> to 0.</p>

<pre><code>IF /I "%RUN_TESTS%" NEQ "0" (
    echo Running unit tests
    call :ExecuteCmd "%DEPLOYMENT_SOURCE%\tools\nunit\nunit-console.exe" "%DEPLOYMENT_SOURCE%\src\Tests\bin\Release\Tests.dll" /framework:v4.5.1
    IF !ERRORLEVEL! NEQ 0 goto error
) ELSE (
    echo Not running unit tests because [notest] was present in commit message
)
</code></pre>

<p>If <code>RUN_TESTS</code> does not evaluate to 0, then we run the tests! Otherwise we echo out an informative message as to why it was skipped.</p>

<p>Phew. So how much time do we save on <code>[notest]</code> builds now?</p>

<p><img src="https://cloud.githubusercontent.com/assets/563819/11734864/9a5e5e10-9f80-11e5-92ff-b93a1d9c994a.png" alt="No test build" /></p>

<p>Compared to a build with tests:</p>

<p><img src="https://cloud.githubusercontent.com/assets/563819/11734880/b874bed0-9f80-11e5-9af2-8e0425a02563.png" alt="Build with tests" /></p>

<p>So that flag cuts the build in half! Nice! There are probably some other ways to improve the time. By the way, if you&rsquo;re wondering what&rsquo;s taking so long
in your build, you can use the Kudu <a href="https://github.com/projectkudu/kudu/wiki/REST-API">REST endpoint</a> to see your deployment logs (<strong>/api/deployments</strong> endoint) which contain full timestamp information!</p>

<p>Happy continuous deployment!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Impersonating a User During Automated Testing Scenarios]]></title>
    <link href="http://kamranicus.com/blog/2015/11/06/impersonating-during-testing/"/>
    <updated>2015-11-06T16:00:00+00:00</updated>
    <id>http://kamranicus.com/blog/2015/11/06/impersonating-during-testing</id>
    <content type="html"><![CDATA[<p>I&rsquo;m starting to introduce privacy controls to <a href="http://keeptrackofmygames.com">Keep Track of My Games</a> and I ran into the following scenario when writing my tests:</p>

<p>```
Scenario: Anonymous user should be able to view a public custom list</p>

<pre><code>Given a user has a list
And a user's list is public
When I request access to the list
Then I have read-only access
</code></pre>

<p>```</p>

<p>In this context, <strong>I</strong> am the anonymous user. This is the exact <a href="http://www.specflow.org/">SpecFlow</a> scenario I wrote. Do you know why I may have run into issues?</p>

<p>Let&rsquo;s look at the first two steps:</p>

<p>```c#
[Given(@&ldquo;a user has a list&rdquo;)]
public void GivenAUserHasAList() {</p>

<pre><code>_listResult = _context.ListService.CreateList(_newList)
</code></pre>

<p>}</p>

<p>[Given(@&ldquo;a user&rsquo;s list is public&rdquo;)]
public void GivenAUsersListIsPublic() {
  <em>privacySettings.Level = PrivacyLevel.Public;
  </em>context.ListService.UpdateListPrivacy(<em>listResult.Id, </em>privacySettings);
}
```</p>

<p>Why would this cause a problem with my given scenario?</p>

<ol>
<li>In the first step, I&rsquo;m creating a new list.</li>
<li>In the second step, I&rsquo;m taking the new list I just made from the first step and updating the privacy settings on it.</li>
</ol>


<p>The problem is that my service assumes the context is an authenticated user and will apply changes to the <strong>current user&rsquo;s</strong> list. Well, since I did not call my login helpers before these two steps, I am in an anonymous context so the service calls fail. That&rsquo;s good! But how can I tell my steps to call a service method <em>on behalf</em> of another user without having <em>every</em> step use the current user context?</p>

<p>You might say I should just create a new method that accepts a username and refactor my methods. I <em>could</em> do that but not only is my entire service designed around the current user context, my service layer is essentially the interface of my public API. I would never allow one user to create a list for another user (unless that was a feature). So the same way I wouldn&rsquo;t expose an API method to do something on behalf of someone, I won&rsquo;t add a public method in my service layer to do the same. I could choose to make the method private or internal and grant access to the assembly for testing&mdash;true, I <em>could</em> but that seems like a workaround where I need to expose special functionality just for testing.</p>

<p>The approach I ended up doing was simpler and more elegant and leveraged an existing pattern I was relying on: injecting an <code>IUserContext</code> into my service layer like this:</p>

<p><code>c#
public ListService(IUserContext userContext) {
  _userContext = userContext;
}
</code></p>

<p>This is using standard dependency injection (Ninject, in my case) to inject a context for the current user. That context gets created and maintained outside this class, so it doesn&rsquo;t care who provided it or where it came from, it just uses it to determine business logic.</p>

<p>So since I&rsquo;m already injecting the current user context and mocking it in my tests, why not simply swap out the context when I need to?</p>

<h2>Creating an impersonation context</h2>

<p>That&rsquo;s what I ended up doing. Here&rsquo;s my implementation of a <code>TestingImpersonationContext</code> (<a href="https://gist.github.com/kamranayub/9654d6581fbcf63cf481">https://gist.github.com/kamranayub/9654d6581fbcf63cf481</a>):</p>

<script src="https://gist.github.com/kamranayub/9654d6581fbcf63cf481.js"></script>


<p>It should be clear what&rsquo;s happening but let me explain further. Specifically in SpecFlow you can inject a context into your testing steps like so:</p>

<p>```c#
public class StepBase : TechTalk.SpecFlow.Steps {</p>

<pre><code>protected TestingContext _context;
public StepBase(TestingContext context)
{
    _context = context;
}
</code></pre>

<p>}
```</p>

<p>As long as your step classes inherit that <code>StepBase</code>, you have access to a context. All I did was build a method off that context that swapped out my existing dependency that was injected for <code>IUserContext</code> with a temporary context that impersonated the requested user. Once it is disposed, it restores the original context. Easy as pie!</p>

<p>If you are <strong>not</strong> using SpecFlow which is probably the case, don&rsquo;t fret&mdash;all you really need is a class or helper method that you can access in your test classes. However you want to achieve that is up to you. Create a base class, don&rsquo;t even bother with dependency injection, etc. This is entirely doable without DI but since my app relies on it I also leverage it during testing.</p>

<p>Now given we have an impersonation context helper, here&rsquo;s how our two testing steps have changed:</p>

<p>```c#
[Given(@&ldquo;a user has a list&rdquo;)]
public void GivenAUserHasAList() {
  using (_context.Impersonate(&ldquo;user&rdquo;) {</p>

<pre><code>_listResult = _context.ListService.CreateList(_newList);
</code></pre>

<p>  }
}</p>

<p>[Given(@&ldquo;a user&rsquo;s list is public&rdquo;)]
public void GivenAUsersListIsPublic() {</p>

<pre><code>using (_context.Impersonate("user"))
{
    _privacySettings.Level = PrivacyLevel.Public;
    _context.ListService.UpdateListPrivacy(_listResult.Id, _privacySettings);
}
</code></pre>

<p>}
```</p>

<p>I could even update my scenario to be specific about <strong>who&rsquo;s list</strong> I&rsquo;m accessing (so it&rsquo;s not ambiguous between logged in user vs. another user) but since I only have two users in my testing context, it doesn&rsquo;t really matter.</p>

<p>Now for the test results:</p>

<p><code>
Given a user has a list
-&gt; done: ListSteps.GivenAUserHasAList() (0.2s)
And a user's list is public
-&gt; done: ListSteps.GivenAUsersListIsPublic() (0.0s)
When I request access to the list
-&gt; done: ListSteps.WhenIRequestAccessToTheList() (0.1s)
Then I have read-only access
-&gt; done: ListSteps.ThenIHaveReadAccess() (0.0s)
</code></p>

<p>The tests are green and now I&rsquo;m a happy coder. By the way, if you aren&rsquo;t using <a href="http://specflow.org">SpecFlow</a> for .NET you should consider it, I love it.</p>
]]></content>
  </entry>
  
</feed>
