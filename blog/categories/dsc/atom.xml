<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: DSC | Kamranicus]]></title>
  <link href="http://kamranicus.com/blog/categories/dsc/atom.xml" rel="self"/>
  <link href="http://kamranicus.com/"/>
  <updated>2017-01-20T20:41:02+00:00</updated>
  <id>http://kamranicus.com/</id>
  <author>
    <name><![CDATA[Kamran]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Generating an Encryption Certificate for PowerShell DSC in WMF5]]></title>
    <link href="http://kamranicus.com/blog/2016/04/05/wmf5-powershell-dsc-generating-encryption-certificate/"/>
    <updated>2016-04-05T03:43:00+00:00</updated>
    <id>http://kamranicus.com/blog/2016/04/05/wmf5-powershell-dsc-generating-encryption-certificate</id>
    <content type="html"><![CDATA[<p>I&rsquo;m currently building out a PowerShell DSC pull server cluster at work. If you aren&rsquo;t familiar with DSC, I&rsquo;ll talk more about it in an upcoming post that ties it all together. The long and short of it is that DSC is a way to store configuration as code and automate the configuration of many servers at once.</p>

<p>In the recent Windows Management Framework 5 release, Microsoft has improved its support and feature set for DSC but with a new release comes new surprises. The first surprise you may run into, as we did, was that your old WMF4 way of encrypting MOF files doesn&rsquo;t work. In WMF5, the requirements for the certificate used to secure MOF files is stricter. <a href="https://msdn.microsoft.com/en-us/powershell/dsc/securemof">Taken from MSDN</a>:</p>

<ol>
<li>Key Usage:</li>
<li>Must contain: &lsquo;KeyEncipherment&rsquo; and &lsquo;DataEncipherment&rsquo;.</li>
<li>Should <em>not</em> contain: &lsquo;Digital Signature&rsquo;.</li>
<li>Enhanced Key Usage:</li>
<li>Must contain: Document Encryption (1.3.6.1.4.1.311.80.1).</li>
<li>Should <em>not</em> contain: Client Authentication (1.3.6.1.5.5.7.3.2) and Server Authentication (1.3.6.1.5.5.7.3.1).</li>
</ol>


<p>If you read my <a href="http://kamranicus.com/blog/2016/02/24/azure-key-vault-config-encryption-azure/">previous foray into certificates with Azure Key Vault</a>, you know I&rsquo;m pretty green when it comes to certificate management and terminology. I really didn&rsquo;t know what this stuff meant&mdash;I mean, I understand a certificate has key usages and enhanced key usages, but <strong>how does it get them?</strong> It has to do with the certificate request and the template used to provision your certificate.</p>

<p>It turns out Microsoft recommends obtaining a certificate from Active Directory Certificate Services. That&rsquo;s cool, but I&rsquo;m just a developer who wants to work on DSC, I don&rsquo;t have an ADCS server to give me certificates during testing&mdash;that&rsquo;s a different team altogether and when they&rsquo;re primary guy is out of the office, I&rsquo;m a bit stuck.</p>

<p><strong>Update (4/13)</strong>: <a href="https://msdn.microsoft.com/en-us/powershell/dsc/securemof">TechNet</a> now has a guide on how to generate certificates for WMF5. I&rsquo;m leaving the rest of this post as-is for posterity.</p>

<hr />

<p>I thought I could maybe use a self-signed certificate while I wait for a &ldquo;for real&rdquo; one later. After searching around for a method to create a certificate with the required KU and EKU specs, I found a lot of answers suggesting using OpenSSL. I&rsquo;ve never used OpenSSL before so I thought I&rsquo;d give it a try and I found it a bit confusing&mdash;I think I could have gotten it to work but instead I came across a random PowerShell article (unrelated to anything) using a utility called <code>certreq</code> that could handle providing custom key usages, problem solved!</p>

<p>You just need to create a file to define your certificate settings, <strong>MyCert.inf</strong>:</p>

<p>```
[Version]
Signature = &ldquo;$Windows NT$&rdquo;</p>

<p>[Strings]
szOID_ENHANCED_KEY_USAGE = &ldquo;2.5.29.37&rdquo;
szOID_DOCUMENT_ENCRYPTION = &ldquo;1.3.6.1.4.1.311.80.1&rdquo;</p>

<p>[NewRequest]
Subject = &ldquo;cn=<a href="&#109;&#97;&#x69;&#108;&#x74;&#111;&#x3a;&#x6d;&#101;&#x40;&#101;&#120;&#97;&#x6d;&#x70;&#108;&#101;&#x2e;&#99;&#x6f;&#109;">&#109;&#x65;&#x40;&#101;&#x78;&#97;&#109;&#112;&#x6c;&#x65;&#46;&#x63;&#111;&#109;</a>&rdquo;
MachineKeySet = false
KeyLength = 2048
KeySpec = AT_KEYEXCHANGE
HashAlgorithm = Sha1
Exportable = true
RequestType = Cert</p>

<p>KeyUsage = &ldquo;CERT_KEY_ENCIPHERMENT_KEY_USAGE | CERT_DATA_ENCIPHERMENT_KEY_USAGE&rdquo;
ValidityPeriod = &ldquo;Years&rdquo;
ValidityPeriodUnits = &ldquo;1000&rdquo;</p>

<p>[Extensions]
%szOID_ENHANCED_KEY_USAGE% = &ldquo;{text}%szOID_DOCUMENT_ENCRYPTION%&rdquo;
```</p>

<p>Just change the <code>Subject</code> line to whatever you need in your case.</p>

<p>Then execute <code>certreq</code> using the input file:</p>

<pre><code>certreq -new MyCert.inf MyCert.cer
</code></pre>

<p>Certreq should be available if you have Makecert&mdash;if you aren&rsquo;t finding it in the default command prompt, try using the Visual Studio Command Prompt. Once you execute the command it will generate a public key file and install the private/public key pair into your <code>CurrentUser</code> personal certificate store:</p>

<pre><code>PS&gt; dir Cert:\CurrentUser\My
</code></pre>

<p>From there, you can export the private/public keys and install it on your DSC nodes.</p>

<p><img src="https://cloud.githubusercontent.com/assets/563819/14269791/dac55acc-fa9c-11e5-8352-55881c3150ed.png" alt="Example screenshot" /></p>

<p>Until you get a signed certificate from your CA, this should work. Hope that helps!</p>
]]></content>
  </entry>
  
</feed>
