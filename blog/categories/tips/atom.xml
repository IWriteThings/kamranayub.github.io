<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Tips | Kamranicus]]></title>
  <link href="http://kamranicus.com/blog/categories/tips/atom.xml" rel="self"/>
  <link href="http://kamranicus.com/"/>
  <updated>2016-04-05T03:06:05+00:00</updated>
  <id>http://kamranicus.com/</id>
  <author>
    <name><![CDATA[Kamran]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Use a Separate Chrome Profile to Manage Your Apps]]></title>
    <link href="http://kamranicus.com/blog/2015/05/21/chrome-multi-user/"/>
    <updated>2015-05-21T13:45:00+00:00</updated>
    <id>http://kamranicus.com/blog/2015/05/21/chrome-multi-user</id>
    <content type="html"><![CDATA[<p>If you&rsquo;re an app or site developer, you&rsquo;ve probably got a bunch of
tabs or bookmarks for your dashboards, social network accounts,
blog, and more. For <a href="http://keeptrackofmygames.com">Keep Track of My Games</a>,
I have UserVoice, Azure, RavenDB, social profiles, etc. that I
need to manage and track (haha).</p>

<!-- More -->


<p>It can be a chore to manage all of this easily but I have a tip.
A little while back Chrome <a href="https://support.google.com/chrome/answer/2364824?hl=en">introduced a new feature</a> that lets
you switch between multiple profiles super easily. I use it
for me and my wife, since she has a Google account and goes
to knitting sites and does whatever she likes doing&mdash;I don&rsquo;t want that filth in <em>my</em> Chrome instance! :)</p>

<p><img src="https://cloud.githubusercontent.com/assets/563819/7749041/784a45e2-ffca-11e4-8a5f-ce5d1c445d4e.png" alt="Chrome user switcher is in the corner" /></p>

<p>The user switcher is in the top-right of Chrome, shown above. You can single-click to bring up a modal or right-click to quickly switch.
Chrome profiles are kept separate, with their own settings, extensions,
and bookmarks. This keeps tabs and work separated neatly and creates a
so-called &ldquo;separation of concerns&rdquo; for your browsing.</p>

<p>Here&rsquo;s the rub: A full Chrome user is tied to a Google account. I don&rsquo;t want to create a separate Google account just for KTOMG.
The Google+, YouTube, email, etc. is all linked to my primary Google Account.
The issue is, Chrome will not let more than one
Google account exist on a single PC. So how can we take advantage of the profile separation but still
keep my primary Google account?</p>

<p>The answer is: we&rsquo;ll create a
<a href="https://support.google.com/chrome/answer/3463947">Supervised User Account</a>. Did you notice I said &ldquo;full user&rdquo; before?
A SUA is just a lower privilege profile (meant for children) that you can
control via your primary Google account. BUT, if you <strong>don&rsquo;t restrict anything</strong>,
it&rsquo;ll just be like a &ldquo;full&rdquo; profile!</p>

<p>We&rsquo;ll follow the instructions above in the Google help article:</p>

<ol>
<li>Under your Chrome profile, go to Settings</li>
<li>Scroll down to Users</li>
<li>Click &ldquo;Add User&rdquo; and enter your app&rsquo;s name and avatar for a picture</li>
<li>Click &ldquo;Control and view websites this person visits from [your Google account]&rdquo;</li>
</ol>


<p><img src="https://cloud.githubusercontent.com/assets/563819/7749183/8dd90398-ffcb-11e4-8f8a-095f4a2e4beb.png" alt="Supervised user" /></p>

<p>Now you&rsquo;ve made a &ldquo;supervised&rdquo; app account managed by your main Google one. Nice! You can set up all your tabs as you want, <del>extensions with any
specific accounts (TweetDeck)</del>, and pinned dashboard tabs, all within a separate context from your primary Chrome profile. <strong>Update:</strong> It appears, after I tried, that SUA&rsquo;s cannot use extensions. There&rsquo;s an <a href="https://code.google.com/p/chromium/issues/detail?id=354178">open issue</a> for it, so hopefully whitelist ability will be added soon.</p>

<p>For example, here&rsquo;s what <a href="http://keeptrackofmygames.com">Keep Track of My Games</a>
looks like in its own Chrome profile:</p>

<p><img src="https://cloud.githubusercontent.com/assets/563819/7749251/1de36eb0-ffcc-11e4-8be9-fa78b45a69da.png" alt="KTOMG profile" /></p>

<p>And the full experience:</p>

<p><img src="https://cloud.githubusercontent.com/assets/563819/7749724/e2d07ed6-ffcf-11e4-93cd-f307718c2c82.png" alt="KTOMG browser" /></p>

<p>When you&rsquo;re the only one managing a bunch of apps, this
is a real productivity booster. You could even go as far as
creating separate profiles for each environment, if you like. Hell, this doesn&rsquo;t have to be for apps, it could be for whatever browsing contexts you want to separate.</p>

<p>Just make sure you have enough RAM because Chrome will
suck it all up.</p>

<p><img src="https://cloud.githubusercontent.com/assets/563819/7749876/db3a810c-ffd0-11e4-8a35-5d96e41b874f.png" alt="Task manager" /></p>

<p>Dumb puny laptop.</p>

<p>Hope this helps! Happy managing.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Triggering a Travis Build Programmatically]]></title>
    <link href="http://kamranicus.com/blog/2015/03/29/triggering-a-travis-build-programmatically/"/>
    <updated>2015-03-29T22:45:30+00:00</updated>
    <id>http://kamranicus.com/blog/2015/03/29/triggering-a-travis-build-programmatically</id>
    <content type="html"><![CDATA[<p>For <a href="http://excaliburjs.com">Exalibur.js</a> we wanted to be able to keep our <code>master</code> branch documentation up-to-date on the website. The website is built using <a href="http://assemble.io">Assemble.io</a> and GitHub pages and <a href="http://kamranicus.com/blog/2015/02/26/continuous-deployment-with-travis-ci/">after successfully automating my blog</a>, naturally I turned to <a href="http://travis-ci.org">Travis CI</a> to set up automated documentation generation.</p>

<!-- More -->


<p>Travis normally sets up a hook in your GitHub repository to automatically trigger a build after you push a commit (or pull request). This is real nice but unfortunately that&rsquo;s where it stops. If you want to trigger a build <strong>for another repository</strong>, you have to do it manually.</p>

<p>I asked Travis about this and their response is promising (Twitter can be nice sometimes):</p>

<blockquote class="twitter-tweet" data-partner="tweetdeck"><p><a href="https://twitter.com/kamranayub">@kamranayub</a> it&#39;s on the roadmap, and hopefully landing soon &lt;3</p>&mdash; Travis CI (@travisci) <a href="https://twitter.com/travisci/status/582311038772723713">March 29, 2015</a></blockquote>


<script async src="http://kamranicus.com//platform.twitter.com/widgets.js" charset="utf-8"></script>


<p>Until that time, though, something has to be done.</p>

<p>One approach I saw was a <a href="https://github.com/metaodi/travis-ping">small Ruby script</a> to forge a webhook POST message. This is actually a nice idea but since Excalibur uses Node to build, I needed something else and didn&rsquo;t want to port it over.</p>

<p>Instead I borrowed some code from <a href="https://github.com/patrickkettner/travis-ping">@patrickketner</a> that uses the <a href="https://github.com/pwmckenna/node-travis-ci">node-travis-ci</a> npm package to submit a build through the public API. I modified Patrick&rsquo;s code since I need to use GitHub personal access tokens like I did <a href="http://kamranicus.com/blog/2015/02/26/continuous-deployment-with-travis-ci/">previously</a>.</p>

<p>You still need to follow the same steps to set up the <code>GH_TOKEN</code> environment variable but once you do, all you have to do is execute this Node.js script (changing the <code>repo</code>).</p>

<script src="https://gist.github.com/kamranayub/88f963a9ac3d5bf6114d.js"></script>


<p>So for example, in your <code>.travis.yml</code> file, you just need:</p>

<p><code>
install:
  - npm install travis-ci
after_success:
  - node trigger-build.js
</code></p>

<p>All set. Now when you commit to one repository, you can trigger a build for another one. This allows us to automatically <a href="http://excaliburjs.com/docs/api/edge">keep our docs up-to-date</a> with whatever <code>master</code> has.</p>

<p>You can <a href="https://github.com/excaliburjs/Excalibur/blob/master/deploy-docs.js">reference Excalibur</a> to see how we execute the script. Additionally, you can reference <a href="https://github.com/excaliburjs/excaliburjs.github.io/blob/site/.travis.yml">excaliburjs.com&rsquo;s Travis configuration</a> to see how we use <a href="http://typedoc.io">TypeDoc</a> to generate documentation for the latest version of <code>master</code>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Continuous Deployment With Travis-CI]]></title>
    <link href="http://kamranicus.com/blog/2015/02/26/continuous-deployment-with-travis-ci/"/>
    <updated>2015-02-26T16:18:22+00:00</updated>
    <id>http://kamranicus.com/blog/2015/02/26/continuous-deployment-with-travis-ci</id>
    <content type="html"><![CDATA[<p>One of the fun things we did for <a href="http://playsweepstacks.com">Sweep Stacks</a> (our Ludum Dare entry)
during development was to setup continuous deployment. Since our GitHub
repository was public, we could leverage the excellent Travis CI build tool.</p>

<!-- More -->


<p>This allowed us to work on the game and have our dedicated tester play every new build
hot off the press. It reduced the amount of bugs we shipped with and created a very
fast feedback loop for QA. In the end it allowed us to push a polished game an hour
or so before the deadline hit. After the voting began, it also allowed us to quickly
push bug fixes that were reported by players.</p>

<p>If you&rsquo;re new to Travis CI, you can learn more about what it is and
how to get started by reading <a href="http://tech.pro/tutorial/1749/get-your-ci-on-with-travis-ci">my Tech.pro tutorial</a>.</p>

<p>Once you have your project building, you can then write a little bash script to
deploy it! By &ldquo;deploying&rdquo;, what I really mean is pushing your built code to your production branch on GitHub for final deployment. For example, we use GitHub pages to host Sweep Stacks.</p>

<p>Let&rsquo;s look at the process.</p>

<h2>Customizing Travis Config</h2>

<p>You will need to execute a script to deploy your site, so you will need to
customize your <strong>_travis.yml</strong> file.</p>

<p>Here is what mine looks like for this blog (built using Octopress):</p>

<pre><code>language: ruby
rvm:
  - 1.9.3
branches:
  only:
    - source
env:
  global:
  - GH_REF: github.com/kamranayub/kamranayub.github.io.git
script:
  - bundle exec rake generate
  - chmod ugo+x deploy.sh
  - '[ "${TRAVIS_PULL_REQUEST}" != "false" ] || ./deploy.sh'
</code></pre>

<p>Let&rsquo;s break it down:</p>

<pre><code>language: ruby
</code></pre>

<p>Easy, since I use <a href="http://octopress.org">Octopress</a> (built on Jekyll) for my blog, we need to use Ruby.</p>

<pre><code>rvm:
  - 1.9.3
</code></pre>

<p>The version of Octopress I use requires Ruby 1.9.3.</p>

<pre><code>branches:
  only:
    - source
</code></pre>

<p>We only want Travis to initiate builds for the <code>source</code> branch, since that is where
the source files are for my blog.</p>

<pre><code>env:
  global:
  - GH_REF: github.com/kamranayub/kamranayub.github.io.git
</code></pre>

<p>We will need to be able to clone and push to our repository, so we store it in an
environment variable for easy access. <code>GH_REF</code> will be available to our bash script.</p>

<pre><code>script:
  - bundle exec rake generate
  - chmod ugo+x deploy.sh
  - '[ "${TRAVIS_PULL_REQUEST}" != "false" ] || ./deploy.sh''
</code></pre>

<p>In our Travis script, we build the blog (<code>rake generate</code>). We then mark our <code>deploy.sh</code> file
as executable (since I&rsquo;m on Windows). After that we execute our deploy as long as this isn&rsquo;t
a pull request (don&rsquo;t want to build other people&rsquo;s changes!). Disabling pull request builds
can also be set in your Travis project settings.</p>

<h2>Deploy script</h2>

<p>Here&rsquo;s the script I use to do the deployment:</p>

<script src="https://gist.github.com/kamranayub/ca7b6866ab43771d9da8.js"></script>


<p>As you can see it&rsquo;s fairly simple. One thing to make sure of is hiding your access token (<code>GH_TOKEN</code>),
we use to authenticate which I&rsquo;ll show you how to generate and use.</p>

<h2>The access token</h2>

<p>The whole reason this works is because we are authenticating to GitHub using a <em>Personal
Access Token</em> (stored in <code>GH_TOKEN</code>). This is an OAuth token that you can create when
using Two-Factor Auth to authenticate 3rd party tools like Visual Studio, or in our case, authenticating in a script.</p>

<p>You can generate a token by:</p>

<ol>
<li>Going to <a href="https://github.com/settings/applications">Applications</a> in your Settings</li>
<li>Clicking &ldquo;Generate New Token&rdquo;</li>
<li>Selecting your permissions (for Travis, all you need is <code>public_repo</code>)</li>
<li>Once created, copy the token to your clipboard (you <em>must</em> regenerate it if you lose it)</li>
</ol>


<p>Now we need to configure Travis to expose this token securely to our script.</p>

<ol>
<li>On Travis, go to the Settings of your project (top-right)</li>
<li>Click the &ldquo;Environment Variables&rdquo; tab (and ensure Build Pull Requests is &lsquo;Off&rsquo;)</li>
<li>Create a new environment variable called <code>GH_TOKEN</code></li>
<li>In the Value field, paste in your token, being sure to remove any trailing whitespace</li>
<li>Ensure &ldquo;Display value in build logs&rdquo; is Off</li>
</ol>


<p>Once created, you&rsquo;re all set! <code>GH_TOKEN</code> will now be available to your <strong>deploy.sh</strong> script.</p>

<h2>Testing it out</h2>

<p>You should be ready to test your deployment. Commit any changes you have to your repository
and you should start seeing the build output once it starts. If there are any errors, now
you can fix them until your build passes.</p>

<p>Happy deploying!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[5 Tips to Improve Your ASP.NET MVC Codebase]]></title>
    <link href="http://kamranicus.com/blog/2014/01/29/5-tips-to-improve-your-mvc-site/"/>
    <updated>2014-01-29T19:16:11+00:00</updated>
    <id>http://kamranicus.com/blog/2014/01/29/5-tips-to-improve-your-mvc-site</id>
    <content type="html"><![CDATA[<p>I have an urge to write a quick list of tips for improving an ASP.NET MVC application because
I just got done reviewing some code for a support ticket at work. It&rsquo;s still fresh
in my mind and I wanted to get some of my thoughts down to share with others. If you
have been doing MVC for a while, I don&rsquo;t think much of this is news. It&rsquo;s more
for those of you that don&rsquo;t do MVC often or are new to MVC.</p>

<!-- More -->


<p>Imagine this: you&rsquo;ve been tasked to figure out why a web application is using 2GB of memory on the
production web servers. You pull down the version that&rsquo;s currently in production and run it locally
to profile and debug.</p>

<p>After looking through the code, doing some profiling, maybe shaking your head a bit, you&rsquo;ve figured
out what the issue is and now you need to give some feedback.</p>

<p>That&rsquo;s exactly what happened to me today and out of that experience, 5 tips you can follow to keep
your ASP.NET MVC codebase working as you&rsquo;d expect.</p>

<h3>1. Understand the queries in your problem domain</h3>

<p>The root cause of the support ticket I received was a simple case of fetching too much
data from the database, causing obscene amounts of memory usage.</p>

<p>It&rsquo;s a common enough issue. You&rsquo;re building a simple blog, it has posts and it has media (images, videos, attachments).
You put a Media array onto your Post domain object. Your Media domain object has all the image
data stored in a byte array. Since you&rsquo;re using an ORM, there&rsquo;s a certain way you need to design your domain model
to play nice; we&rsquo;ve all experienced this.</p>

<p>```c#
public class BlogPost {</p>

<pre><code>public ICollection&lt;BlogMedia&gt; Media { get; set; }
</code></pre>

<p>}</p>

<p>public class BlogMedia {</p>

<pre><code>public byte[] Data { get; set; }

public string Name { get; set; }
</code></pre>

<p>}
```</p>

<p>There&rsquo;s nothing absolutely wrong with this design. You&rsquo;ve modeled your domain accurately. The problem is, when you
issue a query through your favorite ORM, it eagerly loads all the data associated with your blog post:</p>

<p>```c#
public IList<BlogPost> GetNewestPosts(int take) {</p>

<pre><code>return _db.BlogPosts.OrderByDescending(p =&gt; p.PostDate).Take(take).ToList();
</code></pre>

<p>}
```</p>

<p>A seemingly innocuous line (unless you&rsquo;ve been bitten), a sneaky monster is lying in wait with big consequences if you haven&rsquo;t disabled
lazy loading or didn&rsquo;t tell your ORM to ignore that big <code>Data</code> property on blog media.</p>

<p>It&rsquo;s important to understand how your ORM queries and maps objects and make sure you only query what you need (for example using projection).</p>

<p>```c#
public IList<PostSummary> GetNewestPosts(int take) {</p>

<pre><code>return _db.BlogPosts.OrderByDescending(p =&gt; p.PostDate).Take(take).Select(p =&gt; new PostSummary() {
    Title = p.Title,
    Id = p.Id
}).ToList();
</code></pre>

<p>}
```</p>

<p>This ensures we only grab the amount of data we really need for the task. If all you&rsquo;re doing is using the title and ID to build a link on the homepage, <em>just ask</em>.</p>

<p>It&rsquo;s OK to have more than 5 methods on a repository; be as granular as you need to be for your UI.</p>

<h3>2. Don&rsquo;t call your repositories from your views</h3>

<p>This one&rsquo;s a little sneaky. Consider this line in an MVC view:</p>

<p>```c#
@foreach(var post in Model.RelatedPosts) {</p>

<pre><code>...
</code></pre>

<p>}
```</p>

<p>It <em>seems</em> innocent enough. But if we take a look at what exactly that model property is hiding:</p>

<p>```c#
public class MyViewModel {</p>

<pre><code>public IList&lt;BlogPost&gt; RelatedPosts {
    get { return new BlogRepository().GetRelatedPosts(this.Tags); }
}
</code></pre>

<p>}
```</p>

<p>Yikes! Your &ldquo;view model&rdquo; has business logic in it on top of calling a data access method directly. Now you&rsquo;ve introduced data
access code somewhere it doesn&rsquo;t belong and hidden it inside a property. Move that into the controller so you can wrangle it in
and populate the view model conciously.</p>

<p>This is a good opportunity to point out that implementing proper unit tests would uncover issues like this; because you definitely can&rsquo;t intercept calls to something like that and then you&rsquo;d realize injecting a repository into a view model is probably not something you want to be doing.</p>

<h3>3. Use partials and child actions to your advantage</h3>

<p>If you need to perform business logic in a view, that should be a sign you need to revisit your view model and logic.
I don&rsquo;t think it&rsquo;s advisable to do this in your MVC Razor view:</p>

<p>```c#
@{</p>

<pre><code>var blogController = new BlogController();
</code></pre>

<p>}</p>

<ul>
@foreach(var tag in blogController.GetTagsForPost(p.Id)) {
    <li>@tag.Name</li>
}
</ul>


<p>```</p>

<p>Putting business logic in the view is a no-no, but on top of that you&rsquo;re creating a <em>controller</em>! Move that into your action method and use
that view model you made for what it&rsquo;s intended for. You can also move that logic into a separate action method that only gets called inside views
so you can cache it separately if needed.</p>

<p>```c#
//In the controller:</p>

<p>[ChildActionOnly]
[OutputCache(Duration=2000)]
public ActionResult TagsForPost(int postId) {</p>

<pre><code>return View();
</code></pre>

<p>}</p>

<p>//In the view:</p>

<p>@{Html.RenderAction(&ldquo;TagsForPost&rdquo;, new { postId = p.Id });}
```</p>

<p>Notice the <code>ChildActionOnly</code> attribute. From <a href="http://msdn.microsoft.com/en-us/library/system.web.mvc.childactiononlyattribute(v=vs.118).aspx">MSDN</a>:</p>

<blockquote><p>Any method that is marked with <code>ChildActionOnlyAttribute</code> can be called only with the <code>Action</code> or <code>RenderAction</code> HTML extension methods.</p></blockquote>

<p>This means people can&rsquo;t see your child action by manipulating the URL (if you&rsquo;re using the default route).</p>

<p>Partial views and child actions are useful tools in the MVC arsenal; use them to your advantage!</p>

<h3>4. Cache what matters</h3>

<p>Given the code smells above, what do you think will happen if you only cached your view model?</p>

<p>```c#
public ActionResult Index() {</p>

<pre><code>var homepageViewModel = HttpContext.Current.Cache["homepageModel"] as HomepageViewModel;

if (homepageViewModel == null) {
    homepageViewModel = new HomepageViewModel();
    homepageViewModel.RecentPosts = _blogRepository.GetNewestPosts(5);

    HttpContext.Current.Cache.Add("homepageModel", homepageViewModel, ...);

}

return View(homepageViewModel);
</code></pre>

<p>}
```</p>

<p>Nothing! There will not be any performance gain because you&rsquo;re accessing the data layer through a controller variable in the view and
through a property in the view model&hellip; caching the view model won&rsquo;t help anything.</p>

<p>Instead, consider caching the <em>output</em> of the MVC action instead:</p>

<p>```c#
[OutputCache(Duration=2000)]
public ActionResult Index() {</p>

<pre><code>var homepageViewModel = new HomepageViewModel();

homepageViewModel.RecentPosts = _blogRepository.GetNewestPosts(5);

return View(homepageViewModel);
</code></pre>

<p>}
```</p>

<p>Notice the handy <code>OutputCache</code> attribute. MVC supports ASP.NET Output Caching; use it to your advantage when it applies. If you are
going to cache the model, your model needs to essentially be a POCO with automatic (and read-only) properties&hellip; not something that calls other
repository methods.</p>

<p>As an added benefit, I haven&rsquo;t ever done this but you can <a href="http://msdn.microsoft.com/en-us/magazine/gg650661.aspx">implement different output caching providers</a> allowing you to cache on
AppFabric/NoSQL/anywhere if you ever needed it. MVC is super extensible.</p>

<h3>5. Don&rsquo;t be afraid to leverage your ORM</h3>

<p>If you&rsquo;re not going to take advantage of your ORM&rsquo;s feature set, you are missing out. In the codebase
I was reviewing, they were using NHibernate but they weren&rsquo;t <em>using</em> it. They were totally missing out on <a href="http://nhforge.org/doc/nh/en/index.html#querycriteria-projection">its advanced projection
capabilities</a> to solve some of these memory issues. Some of this stems from rigidity in using a &ldquo;repository pattern&rdquo; and some of it stems from lack of knowledge.</p>

<p>By taking advantage of EF or NHibernate&rsquo;s features, your repositories can do a lot more than just use basic generic methods. They can shape and
return the data <em>you actually want</em> in your controllers, greatly simplifying your controller logic. Do yourself a favor and read through the ORM&rsquo;s documentation to get a handle on what it can offer.</p>

<p>I think when people adopt the repository pattern, it&rsquo;s almost like they pull down a shade over the bright light shining in from their ORM window. When I started playing with RavenDB, I <strong>got rid</strong> of my repository layer (in fact, my <em>entire data project</em>) and went full-metal using Raven queries in my application service layer with a little bit of extension methods to reuse query logic. I found that <em>a lot</em> of my logic was really context-specific and benefited from simply taking advantage of Raven&rsquo;s extensive features to project, shape, and batch my queries.</p>

<h4>That&rsquo;s just, like, your opinion man&hellip;</h4>

<p>If you think you can abstract your ORM, I challenge you to think about it differently. The ORM <em>is</em> your abstraction and if you believe swapping out your existing ORM with another ORM will be a piece of cake because it&rsquo;s &ldquo;abstracted&rdquo;, you&rsquo;d be surprised. That&rsquo;s what I thought too until I learned the hard way that switching to Raven really changed my entire codebase in ways I didn&rsquo;t expect. Your ORM doesn&rsquo;t only affect data access, it affects the domain and it affects your business logic, it even will have an effect on your UI. By removing the repository abstraction, I actually <em>reduced the overall complexity</em> of my data access code.</p>

<h3>&ldquo;Common sense is not so common&rdquo;</h3>

<p>Or so my dad loves to remind me at times. Sometimes it just takes a good code review to remind oneself that what you thought everyone knew isn&rsquo;t the case; you probably learned it through experience or frantic Googling and just assumed other people already knew it.</p>

<p>I hope this helped someone else out!</p>
]]></content>
  </entry>
  
</feed>
