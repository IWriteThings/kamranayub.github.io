<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: PowerShell | Kamranicus]]></title>
  <link href="http://kamranicus.com/blog/categories/powershell/atom.xml" rel="self"/>
  <link href="http://kamranicus.com/"/>
  <updated>2016-12-29T15:13:30+00:00</updated>
  <id>http://kamranicus.com/</id>
  <author>
    <name><![CDATA[Kamran]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Extending PowerShell Pester With Custom Assertions]]></title>
    <link href="http://kamranicus.com/blog/2016/08/17/posh-pester-extend-custom-assertions/"/>
    <updated>2016-08-17T02:10:00+00:00</updated>
    <id>http://kamranicus.com/blog/2016/08/17/posh-pester-extend-custom-assertions</id>
    <content type="html"><![CDATA[<p>After the initial release of <a href="http://kamranicus.com/blog/2016/08/12/posh-openweathermap-powershell-module/">my OpenWeatherMap PowerShell module</a> I decided it might be a good idea to write some tests. This was my first time using <a href="https://github.com/pester/Pester">Pester</a>, a BDD-style testing framework for PowerShell. Coming from <a href="http://jasmine.github.io/">Jasmine</a> Javascript unit testing, I felt right at home.</p>

<!-- More -->


<p>Now because my module deals a lot with dates, I wanted to use an assertion that simplified some of the logic of testing a date. For example, this is what it looks like validating a DateTime:</p>

<p>```powershell
$Result.Time.Year   | Should Be 2015
$Result.Time.Month  | Should Be 8
$Result.Time.Day    | Should Be 15</p>

<p>$Result.Time.Hour   | Should Be 13
$Result.Time.Minute | Should Be 56
$Result.Time.Second | Should Be 32
```</p>

<p>The other way would be to compare formatted date strings:</p>

<p><code>powershell
$Result.Time.ToString("MM/dd/yyyy HH:mm:ss") | Should Be "08/15/2015 13:56:32"
</code></p>

<p>Which is fine. However, using it as a learning opportunity, I wanted to write my own assertion for Pester, <code>BeDate</code> so I could do:</p>

<p><code>powershell
$Result.Time | Should BeDate "08/15/2015 13:56:32"
</code></p>

<p>In C# using NUnit or MSTest, writing custom assertions is pretty straightforward. However, Pester essentially uses a convention where it loads up commands in its module starting with <code>Pester</code> and also having a couple failure message handlers.</p>

<p>So, for example, our <code>BeDate</code> assertion is defined as:</p>

<p>```powershell
Function PesterBeDate($Value, $Expected) {</p>

<pre><code>$Expected = [System.DateTime]::Parse($Expected)

$Value.Year   | Should Be $Expected.Year
$Value.Month  | Should Be $Expected.Month
$Value.Day    | Should Be $Expected.Day

$Value.Hour   | Should Be $Expected.Hour
$Value.Minute | Should Be $Expected.Minute
$Value.Second | Should Be $Expected.Second
</code></pre>

<p>}</p>

<p>Function PesterBeDateFailureMessage($Value, $Expected) {</p>

<pre><code>if (-not (($expected -is [string]) -and ($value -is [System.DateTime])))
{
    return "Expected: {$expected}`nBut was:  {$value}"
}

return "Expected: $Expected\nBut was: $($Value.ToString('MM/dd/YYYY h:mm:ss'))"
</code></pre>

<p>}</p>

<p>Function NotPesterBeDateFailureMessage($Value, $Expected) {</p>

<pre><code>return PesterBeDateFailureMessage -Value $Value -Expected $Expected
</code></pre>

<p>}
```</p>

<p>Now, I don&rsquo;t actually think my <code>PesterBeDateFailureMessage</code> cmdlet ever runs because I&rsquo;m using the basic <code>Be</code> assertion but whatever&mdash;this is the convention.</p>

<p>So, how we do we get Pester to see these functions? Well, like I said, it searches for the assertions <strong>in the scope of the module</strong>. That means if I define these in my own file, it won&rsquo;t see them.</p>

<h2>Defining functions inside a module&rsquo;s scope</h2>

<p>We can use a weird PowerShell &ldquo;hack&rdquo; to actually declare these functions <em>inside the scope of the Pester module</em> if we want.</p>

<p>```powershell
$pesterModule = Import-Module Pester -PassThru</p>

<p>. $pesterModule {</p>

<pre><code>function PesterBeDate { }
# etc
</code></pre>

<p>}
```</p>

<p>This is what Dave Wyatt suggested <a href="https://github.com/pester/Pester/issues/590#issuecomment-239977094">when I asked about it</a>. Cool, we <strong>could</strong> do that but I would prefer if we could keep my custom assertions separated from my tests since I&rsquo;d have to include this in my <strong>.Tests.ps1</strong> files.</p>

<h2>Using local modules and extending Pester</h2>

<p>The  implication the previous solution has is that the caller (user) has Pester installed globally. Over the years, as a programming community we decided that&rsquo;s a sub-optimal outlook on life hence we have package managers like Nuget and NPM. To my knowledge, there&rsquo;s not yet a <code>package.json</code> equivalent to a PowerShell &ldquo;project&rdquo; besides the Module Manifest (psd1). Ideally, I would be able to type <code>Install-Module</code> in the current directory, PowerShellGet would identify the dependencies (perhaps from psd1 manifest?), and download them. Alas, it doesn&rsquo;t so we can do it ourselves.</p>

<p>To achieve maximum contributability (is that a word?) I decided to roll my own little build script that would bring down the Pester module locally to the project and then extend Pester&rsquo;s assertions by manually copying in my own code.</p>

<p>This only takes a few lines of Powershell:</p>

<p>```powershell
$PesterVersion = &lsquo;3.4.2&rsquo;</p>

<h1>Save-module locally</h1>

<p>Save-Module -Name Pester -Path &lsquo;.modules\&rsquo; -RequiredVersion $PesterVersion</p>

<h1>Copy custom assertions</h1>

<p>Copy-Item -Path &lsquo;.\Assertions*.ps1&rsquo; -Destination &ldquo;..modules\Pester\$PesterVersion\Functions\Assertions&rdquo;</p>

<h1>Import local Pester module so we can extend built-in assertions</h1>

<p>Import-Module &ldquo;..modules\Pester\$PesterVersion\Pester.psd1&rdquo;</p>

<h1>Run tests</h1>

<p>Invoke-Pester -Script &ldquo;.\OpenWeatherMap.Tests.ps1&rdquo;
```</p>

<p>So this is fairly straightforward:</p>

<ol>
<li>Use <code>Save-Module</code> cmdlet to unzip and copy the Pester module locally to a <strong>.modules</strong> folder that we&rsquo;ll exclude from source control</li>
<li>Copy my <code>*.ps1</code> assertion files under <em>*Assertions*</em> to the local Pester assertions directory</li>
<li>Import the local Pester module explicitly (this will load our new assertions)</li>
<li>Invoke Pester on our test script (if you don&rsquo;t qualify it, it will run all the tests in the Pester module also!)</li>
</ol>


<p>Now we achieve both desired effects:</p>

<ol>
<li>Our repository is now self-contained and can be contributed to without any global dependencies (besides PowerShell 5)</li>
<li>We can keep our custom assertions separated</li>
</ol>


<p>If you want to see the final product, <a href="https://github.com/kamranayub/posh-openweathermap">give my OpenWeatherMap module a gander</a>!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[OpenWeatherMap PowerShell Module]]></title>
    <link href="http://kamranicus.com/blog/2016/08/12/posh-openweathermap-powershell-module/"/>
    <updated>2016-08-12T00:15:00+00:00</updated>
    <id>http://kamranicus.com/blog/2016/08/12/posh-openweathermap-powershell-module</id>
    <content type="html"><![CDATA[<p>There&rsquo;s no better to way to learn something new than to make a thing. Yesterday I had a strong desire to know what the weather was like from my command prompt. I can&rsquo;t explain it&mdash;I just had to and I thought, &ldquo;Hey, it can&rsquo;t be that bad, right?&rdquo; I decided to try writing and releasing an open-source PowerShell module.</p>

<!-- More -->


<p>It turned out to be very easy, in fact. There&rsquo;s an awesome project called <a href="http://openweathermap.org">OpenWeatherMap</a> where you can sign up for a free API key and go to town on their open data API&mdash;limited to 60 calls a minute which isn&rsquo;t a problem for my pet project.</p>

<p>So, what happens when you combine PowerShell and an open weather API? Weather in your command prompt!</p>

<p><img src="https://cloud.githubusercontent.com/assets/563819/17608181/4a908116-5ff0-11e6-8bb2-396c8f5a998e.png" alt="Weather" /></p>

<p>I&rsquo;ve <a href="https://github.com/kamranayub/posh-openweathermap/">released the module on GitHub</a> and the <a href="http://www.powershellgallery.com/packages/OpenWeatherMap/">PowerShell Gallery</a> for your enjoyment. I&rsquo;ve already added weather symbols (Unicode is cool) and I&rsquo;m adding friendly forecasting next.</p>

<p>You can set up your PowerShell profile to get the weather each time you boot your prompt, <a href="https://github.com/kamranayub/posh-openweathermap/blob/master/profile.example.ps1">following the example on GitHub</a>.</p>

<p>This also sets up an alias for <code>weather</code> so you can ad-hoc get the weather too:</p>

<p><img src="https://cloud.githubusercontent.com/assets/563819/17608247/ba82117e-5ff0-11e6-92c3-b06e7216feb3.png" alt="weather command" /></p>

<p>I plan to add the ability to get a quick forecast, so you can know what to plan for the next morning before you get into work! There&rsquo;s probably more neat stuff we can do with coloring the weather conditions but maybe you want to open a PR then?</p>

<p>One interesting thing I noticed was that the Windows Command Prompt (and PowerShell) does not support some Unicode characters. For example, you can probably see this:</p>

<pre><code>â›±
</code></pre>

<p>But if you try pasting that into command prompt you&rsquo;ll see:</p>

<p><img src="https://cloud.githubusercontent.com/assets/563819/17608313/4e4c8b3c-5ff1-11e6-9300-200bc4604a39.png" alt="no symbols" /></p>

<p>So that was a little disappointing&mdash;it meant I had to stick to the Unicode symbols that worked in the prompt, which is still a good amount but not as a granular as it could potentially be.</p>

<p>I am not sure why Windows doesn&rsquo;t support those characters but maybe in a future Windows 10 update they&rsquo;ll add support!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Generating an Encryption Certificate for PowerShell DSC in WMF5]]></title>
    <link href="http://kamranicus.com/blog/2016/04/05/wmf5-powershell-dsc-generating-encryption-certificate/"/>
    <updated>2016-04-05T03:43:00+00:00</updated>
    <id>http://kamranicus.com/blog/2016/04/05/wmf5-powershell-dsc-generating-encryption-certificate</id>
    <content type="html"><![CDATA[<p>I&rsquo;m currently building out a PowerShell DSC pull server cluster at work. If you aren&rsquo;t familiar with DSC, I&rsquo;ll talk more about it in an upcoming post that ties it all together. The long and short of it is that DSC is a way to store configuration as code and automate the configuration of many servers at once.</p>

<p>In the recent Windows Management Framework 5 release, Microsoft has improved its support and feature set for DSC but with a new release comes new surprises. The first surprise you may run into, as we did, was that your old WMF4 way of encrypting MOF files doesn&rsquo;t work. In WMF5, the requirements for the certificate used to secure MOF files is stricter. <a href="https://msdn.microsoft.com/en-us/powershell/dsc/securemof">Taken from MSDN</a>:</p>

<ol>
<li>Key Usage:</li>
<li>Must contain: &lsquo;KeyEncipherment&rsquo; and &lsquo;DataEncipherment&rsquo;.</li>
<li>Should <em>not</em> contain: &lsquo;Digital Signature&rsquo;.</li>
<li>Enhanced Key Usage:</li>
<li>Must contain: Document Encryption (1.3.6.1.4.1.311.80.1).</li>
<li>Should <em>not</em> contain: Client Authentication (1.3.6.1.5.5.7.3.2) and Server Authentication (1.3.6.1.5.5.7.3.1).</li>
</ol>


<p>If you read my <a href="http://kamranicus.com/blog/2016/02/24/azure-key-vault-config-encryption-azure/">previous foray into certificates with Azure Key Vault</a>, you know I&rsquo;m pretty green when it comes to certificate management and terminology. I really didn&rsquo;t know what this stuff meant&mdash;I mean, I understand a certificate has key usages and enhanced key usages, but <strong>how does it get them?</strong> It has to do with the certificate request and the template used to provision your certificate.</p>

<p>It turns out Microsoft recommends obtaining a certificate from Active Directory Certificate Services. That&rsquo;s cool, but I&rsquo;m just a developer who wants to work on DSC, I don&rsquo;t have an ADCS server to give me certificates during testing&mdash;that&rsquo;s a different team altogether and when they&rsquo;re primary guy is out of the office, I&rsquo;m a bit stuck.</p>

<p><strong>Update (4/13)</strong>: <a href="https://msdn.microsoft.com/en-us/powershell/dsc/securemof">TechNet</a> now has a guide on how to generate certificates for WMF5. I&rsquo;m leaving the rest of this post as-is for posterity.</p>

<hr />

<p>I thought I could maybe use a self-signed certificate while I wait for a &ldquo;for real&rdquo; one later. After searching around for a method to create a certificate with the required KU and EKU specs, I found a lot of answers suggesting using OpenSSL. I&rsquo;ve never used OpenSSL before so I thought I&rsquo;d give it a try and I found it a bit confusing&mdash;I think I could have gotten it to work but instead I came across a random PowerShell article (unrelated to anything) using a utility called <code>certreq</code> that could handle providing custom key usages, problem solved!</p>

<p>You just need to create a file to define your certificate settings, <strong>MyCert.inf</strong>:</p>

<p>```
[Version]
Signature = &ldquo;$Windows NT$&rdquo;</p>

<p>[Strings]
szOID_ENHANCED_KEY_USAGE = &ldquo;2.5.29.37&rdquo;
szOID_DOCUMENT_ENCRYPTION = &ldquo;1.3.6.1.4.1.311.80.1&rdquo;</p>

<p>[NewRequest]
Subject = &ldquo;cn=<a href="&#109;&#97;&#105;&#108;&#116;&#x6f;&#x3a;&#x6d;&#101;&#64;&#x65;&#x78;&#97;&#x6d;&#112;&#x6c;&#x65;&#46;&#99;&#x6f;&#x6d;">&#109;&#101;&#64;&#x65;&#x78;&#97;&#109;&#112;&#108;&#x65;&#46;&#x63;&#x6f;&#x6d;</a>&rdquo;
MachineKeySet = false
KeyLength = 2048
KeySpec = AT_KEYEXCHANGE
HashAlgorithm = Sha1
Exportable = true
RequestType = Cert</p>

<p>KeyUsage = &ldquo;CERT_KEY_ENCIPHERMENT_KEY_USAGE | CERT_DATA_ENCIPHERMENT_KEY_USAGE&rdquo;
ValidityPeriod = &ldquo;Years&rdquo;
ValidityPeriodUnits = &ldquo;1000&rdquo;</p>

<p>[Extensions]
%szOID_ENHANCED_KEY_USAGE% = &ldquo;{text}%szOID_DOCUMENT_ENCRYPTION%&rdquo;
```</p>

<p>Just change the <code>Subject</code> line to whatever you need in your case.</p>

<p>Then execute <code>certreq</code> using the input file:</p>

<pre><code>certreq -new MyCert.inf MyCert.cer
</code></pre>

<p>Certreq should be available if you have Makecert&mdash;if you aren&rsquo;t finding it in the default command prompt, try using the Visual Studio Command Prompt. Once you execute the command it will generate a public key file and install the private/public key pair into your <code>CurrentUser</code> personal certificate store:</p>

<pre><code>PS&gt; dir Cert:\CurrentUser\My
</code></pre>

<p>From there, you can export the private/public keys and install it on your DSC nodes.</p>

<p><img src="https://cloud.githubusercontent.com/assets/563819/14269791/dac55acc-fa9c-11e5-8352-55881c3150ed.png" alt="Example screenshot" /></p>

<p>Until you get a signed certificate from your CA, this should work. Hope that helps!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PowerShell Script to Generate an HTML5 Offline Manifest]]></title>
    <link href="http://kamranicus.com/blog/2015/09/17/powershell-html5-offline-manifest/"/>
    <updated>2015-09-17T02:40:00+00:00</updated>
    <id>http://kamranicus.com/blog/2015/09/17/powershell-html5-offline-manifest</id>
    <content type="html"><![CDATA[<p>In my new role at work I&rsquo;ve been learning PowerShell to administrate our systems (I&rsquo;m a half developer, half sys admin monster). I&rsquo;ve been a developer for a long time and been living in .NET for about as long&mdash;I still had not really <em>embraced</em> PowerShell as something I could use in my daily development routine. I&rsquo;ve changed my tune. <strong>PowerShell is awesome.</strong> It&rsquo;s also not too hard to pick up once you learn how it works. I recommend you take a serious look at learning it. I recommend <a href="https://www.microsoftvirtualacademy.com/en-us/training-courses/getting-started-with-powershell-3-0-jump-start-8276">following the PowerShell 3 Jumpstart course</a> and trial and error.</p>

<p>Anyway, for some of the games we write as part of <a href="http://excaliburjs.com">Excalibur.js</a> for game jams we would like to run them offline. To do this, you need to create an <a href="http://www.html5rocks.com/en/tutorials/appcache/beginner/">HTML5 Application Manifest file</a>. However, this file is super finicky, as outlined in the linked article. In order to assist, I wrote a small PowerShell script that generates an <code>appcache</code> manifest file with each file&rsquo;s MD5 checksum. Therefore, the manifest file will only change when dependent assets change. I do some more work to disable it locally and only enable for release, but you can run this script as part of your build.</p>

<script src="https://gist.github.com/kamranayub/cc2c4d371a83aec8279e.js"></script>


<p>Modify the script to be specific to your project and it should output an appropriate manifest file. Feel free to change as you see fit.</p>
]]></content>
  </entry>
  
</feed>
