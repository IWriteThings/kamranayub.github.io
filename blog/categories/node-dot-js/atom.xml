<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Node.js | Kamranicus]]></title>
  <link href="http://kamranicus.com/blog/categories/node-dot-js/atom.xml" rel="self"/>
  <link href="http://kamranicus.com/"/>
  <updated>2017-01-20T20:41:02+00:00</updated>
  <id>http://kamranicus.com/</id>
  <author>
    <name><![CDATA[Kamran]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Triggering a Travis Build Programmatically]]></title>
    <link href="http://kamranicus.com/blog/2015/03/29/triggering-a-travis-build-programmatically/"/>
    <updated>2015-03-29T22:45:30+00:00</updated>
    <id>http://kamranicus.com/blog/2015/03/29/triggering-a-travis-build-programmatically</id>
    <content type="html"><![CDATA[<p>For <a href="http://excaliburjs.com">Exalibur.js</a> we wanted to be able to keep our <code>master</code> branch documentation up-to-date on the website. The website is built using <a href="http://assemble.io">Assemble.io</a> and GitHub pages and <a href="http://kamranicus.com/blog/2015/02/26/continuous-deployment-with-travis-ci/">after successfully automating my blog</a>, naturally I turned to <a href="http://travis-ci.org">Travis CI</a> to set up automated documentation generation.</p>

<!-- More -->


<p>Travis normally sets up a hook in your GitHub repository to automatically trigger a build after you push a commit (or pull request). This is real nice but unfortunately that&rsquo;s where it stops. If you want to trigger a build <strong>for another repository</strong>, you have to do it manually.</p>

<p>I asked Travis about this and their response is promising (Twitter can be nice sometimes):</p>

<blockquote class="twitter-tweet" data-partner="tweetdeck"><p><a href="https://twitter.com/kamranayub">@kamranayub</a> it&#39;s on the roadmap, and hopefully landing soon &lt;3</p>&mdash; Travis CI (@travisci) <a href="https://twitter.com/travisci/status/582311038772723713">March 29, 2015</a></blockquote>


<script async src="http://kamranicus.com//platform.twitter.com/widgets.js" charset="utf-8"></script>


<p>Until that time, though, something has to be done.</p>

<p>One approach I saw was a <a href="https://github.com/metaodi/travis-ping">small Ruby script</a> to forge a webhook POST message. This is actually a nice idea but since Excalibur uses Node to build, I needed something else and didn&rsquo;t want to port it over.</p>

<p>Instead I borrowed some code from <a href="https://github.com/patrickkettner/travis-ping">@patrickketner</a> that uses the <a href="https://github.com/pwmckenna/node-travis-ci">node-travis-ci</a> npm package to submit a build through the public API. I modified Patrick&rsquo;s code since I need to use GitHub personal access tokens like I did <a href="http://kamranicus.com/blog/2015/02/26/continuous-deployment-with-travis-ci/">previously</a>.</p>

<p>You still need to follow the same steps to set up the <code>GH_TOKEN</code> environment variable but once you do, all you have to do is execute this Node.js script (changing the <code>repo</code>).</p>

<script src="https://gist.github.com/kamranayub/88f963a9ac3d5bf6114d.js"></script>


<p>So for example, in your <code>.travis.yml</code> file, you just need:</p>

<p><code>
install:
  - npm install travis-ci
after_success:
  - node trigger-build.js
</code></p>

<p>All set. Now when you commit to one repository, you can trigger a build for another one. This allows us to automatically <a href="http://excaliburjs.com/docs/api/edge">keep our docs up-to-date</a> with whatever <code>master</code> has.</p>

<p>You can <a href="https://github.com/excaliburjs/Excalibur/blob/master/deploy-docs.js">reference Excalibur</a> to see how we execute the script. Additionally, you can reference <a href="https://github.com/excaliburjs/excaliburjs.github.io/blob/site/.travis.yml">excaliburjs.com&rsquo;s Travis configuration</a> to see how we use <a href="http://typedoc.io">TypeDoc</a> to generate documentation for the latest version of <code>master</code>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Getting WebSockets to Work on Windows Azure]]></title>
    <link href="http://kamranicus.com/blog/2014/02/09/websockets-on-windows-azure/"/>
    <updated>2014-02-09T03:52:48+00:00</updated>
    <id>http://kamranicus.com/blog/2014/02/09/websockets-on-windows-azure</id>
    <content type="html"><![CDATA[<p>I was banging my head against the wall for the past hour or so wondering why I was falling back to XHR polling when I deployed my Node.js application to Azure. I&rsquo;m using socket.io and everything looks like it&rsquo;s in order, works locally, etc. It was failing with a WebSocket handshake error.</p>

<p>What I saw in the Chrome developer console was something like:</p>

<pre><code>Error during WebSocket handshake: Unexpected response code: 502
</code></pre>

<p>In my Azure Node.js console (<code>azure site log tail SITENAME</code>), I was seeing <code>EPIPE</code> errors.</p>

<p>It turns out, this little tidbit from the <a href="http://blogs.msdn.com/b/windowsazure/archive/2013/11/14/introduction-to-websockets-on-windows-azure-web-sites.aspx">original Windows Azure blog post</a> on Web Sockets did the trick.</p>

<p>Modify your <strong>web.config</strong> and add:</p>

<pre><code>&lt;webSocket enabled="false" /&gt;
</code></pre>

<p>To your <code>system.webServer</code> configuration. Also, another good point in that blog post is to use SSL, since you get SSL for free with a <code>*.azurewebsites.net</code> site.</p>

<p>Hope this helps someone else out there. This should be added to the <a href="http://www.windowsazure.com/en-us/documentation/articles/web-sites-nodejs-chat-app-socketio/">official Azure tutorial</a> on using web sockets with Node.js.</p>
]]></content>
  </entry>
  
</feed>
