---
layout: post
title: "Entity Framework, Polymorphism, and AutoMapper: Can't We All Be Friends?"
date: 2011-04-22 04:41:05 -0500
comments: true
categories:
permalink: /blog/posts/8/entity-framework-polymorphism-and-automapper-cant
disqus_identifier: 8
---

At work we were running into an interesting issue. We are using EF Code First, AutoMapper, and the dynamic proxies generated by EF. We map our domain entities onto our view models.

## The Problem

AutoMapper fails to map a derived type to a view model base class for use in a general-use scenario:

```c#
public IEnumerable<AbstractViewModel> GetPolymorphicClasses() {
    var list = db.AbstractClasses.ToList();

    // list is a list of dynamically proxied derived types
    // DerivedTypeA, DerivedTypeB, and so on
    // aka DynamicProxy_xxxxxxx
    return Mapper.Map<IEnumerable<AbstractClass>, IEnumerable<AbstractViewModel>>(list);
}
```

## The "Solution"

This is not a solution, but it's the best I could do with *limited* knowledge of AutoMapper and a need to just get it working quickly. Thanks to [this post on the same problem](http://stackoverflow.com/q/3441916/109458), I was able to retrofit the answerer's answer to a solution that worked for me (his generated a stack overflow because it seemed to get stuck converting in an infinite loop).

If [Jimmy Bogard](http://stackoverflow.com/users/58508/jimmy-bogard) reads this, please tell me what I'm doing wrong and how to *actually* fix it:

<script src="https://gist.github.com/935461.js?file=gistfile1.cs"></script>